# Rules for Sharepoint framework

# "alternate access mapping" must be defined in IIS
# see http://technet.microsoft.com/en-us/library/cc288609.aspx (public URL)

<Macro ShpRPCRule @target @pattern $tags>
 Use SecRuleDeny @target @pattern "phase:2,~{drop},t:none,msg:'SharePoint Foundation RPC abuse',tag:Shp,$tags"
 #~{increaseBlockCounterMax}
</Macro>

# Allow Sharepoint Web services
<Macro FrameworkSharepointWS>
 Use SkipFramework_ SharepointWS
 Use SecAllowSOAP 250000
 Use SecMarker AfterFrameworkSharepointWS
</Macro>

# Rules for Sharepoint framework
<Macro FrameworkSharepoint>
 Use SkipFramework_ Sharepoint
 Use FrameworkDotNet
 Use SecRuleRemoveByFullTag Shp
 Use SecAllowExt "as[hmp]x|axd|dll"
 Use SecAllowMultipleExtInUrl
 Use SecAllowDoubleUrlEncoding
 Use SecAllowQueryInPost
 Use SecAllowBase64
 Use CSPallowInternalScript
 Use SecArgNameSizeMax     255
 Use AcceptAllCookies
 #Use AcceptCookie      SPSessionGuid
 #Use AcceptCookie      WSS_KeepSessionAuthenticated
 #Use AcceptCookieRegex "WSS_ExpGroup[~{CharMin}]{0,20}"
 #Use AcceptCookieRegex "[~{CharMin}]{0,4}Ribbon[.][~{CharMin}]{0,20}"
 #Use AcceptCookieRegex "stsSync[~{CharMin}]{0,20}"
 #Use AcceptCookieRegex "databaseBtn[~{CharMin}]{0,20}"

 Use SecAllowWindowsPath

 # Allow Unicode extended encoding
 Use SecRuleRemoveByID 2002106-2002107
  
 # &rootfolder=*&
 Use SecRuleRemoveByID 2000869
  
 # Special keywords in output
 Use SecRuleRemoveByID 4002206,4002296,4003710,4004013
  
 #Also http://*.microsoft.com?
 Use AllowFrameFrom3rdParty "https://*.microsoft.com https://support.office.com"
 Use AllowHiddenFrame
  
 #<LocationMatch ^/(?i:_vti_bin/Discovery.asmx)$>
 # Use AcceptCookieRegex "http[~{CharMin}/]{0,40}%2FDiscovery"
 #</LocationMatch>

 <LocationMatch /(?i:_layouts/(?:aclinv|picker)[.]aspx)$>
  Use SecRuleRemoveByID 1-2000738,2000741-9999999,???1
 </LocationMatch>

 <LocationMatch ^/(?i:_vti_bin/.*[.]asmx)$>
  Use FrameworkSharepointWS
 </LocationMatch>
</Macro>

# Allow ALL SharePoint Foundation RPC - VERY DANGEROUS
# http://msdn.microsoft.com/en-us/library/ms442469%28v=office.14%29.aspx
<Macro FrameworkSharepointRPCAll>
 <LocationMatch ^/(?i:_vti_bin/owssvr[.]dll)$>
  Use SecAllowExt "dll"
 </LocationMatch>
</Macro>

# Allow SharePoint Foundation RPC, but only read-only commands - still dangerous
<Macro FrameworkSharepointRPC>
 Use FrameworkSharepointRPCAll
 <LocationMatch ^/(?i:_vti_bin/owssvr.dll)$>
  # Restrict usage
  Use ShpRPCRule ARGS:Cmd     "!(?i)^(?:dialogview|display|exportlist|renderview)$" ""
  Use ShpRPCRule ARGS:List    "!(?i)^[{]~{syntax_GUID}[}]$" ""
  Use ShpRPCRule ARGS:View    "!(?i)^[{]~{syntax_GUID}[}]$" ""
  Use ShpRPCRule ARGS:XMLDATA "!(?i)^(?:true|false)$" ""
  Use ShpRPCRule ARGS:/^(?i:FileDialogFilterValue|Query)$/ "[*]" "tag:Star"
 </LocationMatch>

 Use SecMarker AfterFrameworkSharepoint
</Macro>

# Rules for Sharepoint Web Parts (pages editing)
<Macro FrameworkSharepointWebPart>
 Use SecAllowHTML
 Use SecAllowPath
 Use SecRuleRemoveByID 2003134,???2,2000841,2000844,2000847,2000866,2000868,2003123,2003124,2003127,2003128,2003129,2003133
 Use SecArgSizeMax 250000
 # For VisioWebAccess
 Use SecAllowExt "vdw"
</Macro>

# Rules for Sharepoint User picker
<Macro FrameworkSharepointUserPicker>
 Use SecAllowPipeInArgs
 # Allow Picker URLs
 Use SecRuleRemoveByID ???3

 Use NotInsideLocation
 # Remove false positives
 Use SecRule TX:url "(?i)/_layouts/" "phase:1,t:none,~{nosecaction},ctl:ruleRemoveByTag=Command;ARGS:/ct100.*data/,msg:'Excluding false positive from several arguments',tag:Shp"
</Macro>

# Allow Sharepoint WebDAV
<Macro FrameworkSharepointWebDAV>
 Use SecRule REQUEST_LINE "^(?:PROPFIND|PUT) .*/~[$]" "phase:1,t:none,tag:specific,~{stop404},tag:Dollar,tag:Shp"
 Use SecRule REQUEST_LINE "^(?:PROPFIND|PUT) .*/~[$]" "phase:2,t:none,tag:specific,~{stop404},tag:Dollar,tag:Shp"

 Use SecArgsAllowUnicode
 Use SecAllowAllContentType

 Use FrameworkSharepoint
 Use FrameworkSilverlight
 Use SecAllowExt "svc"

 # Upload filenames
 Use SecAllowUpChars  " ()"
 Use SecUrlAllowChars " ()@"
 # Allow upload names without extension (at least for directories)
 Use SecAllowUpNoFileExt

 Use SecArgNameAllowCharacter ":/ {}$\x5b\x5d."

 # for MS Office
 Use AllowWebDAV
 Use SecRuleRemoveByID 2000724,???2,???1
 # Empty ARGS_NAME
 Use SecArgNameAllowEmpty
 # Allow all characters in Content-Type
 Use SecRuleRemoveByFullTag ProtoCT
 # Allow requests without User-agent header
 Use AllowEmptyUA
 # Invalid multipart/form-data requests: last separator contains a newline before final --
 Use IgnoreReqBodyParsingError
 Use SecAllowDoubleUrlEncoding
 Use CSPAllowEvalInScript
 Use CSPallowInternalScript
 Use AllowSQLEncodedBinary

 # Allow all characters
 Use SecArgsAllowAllChars
 
 # SharePoint
 Use SecRuleUrl  "(?i)/(?:allitems|(?:all|my)(?:categorie|comment)s|categoryresults|viewcategory|webfldr)[.]aspx"  ???1,tag:BackendWeb ""
 Use SecRulePathEverywhere "/(?i:_vti|msoffice)" ???2,tag:BackendWeb,tag:Command,tag:Slash "t:~{winPathDecode}"
 Use SecRuleUrl  "(?i)/_layouts/(?:aclinv|picker)[.]aspx"  ???3,tag:BackendWeb ""
  
 <LocationMatch (?i)/_layouts/>
  Use SecAllowBase64Arg rev
 </LocationMatch>
 <LocationMatch /Reports/Pages/Report.aspx$>
  # Allow |
  Use SecAllowPipeInArgs
 </LocationMatch>
</Macro>

# Remove WebDAV headers unless explicitely allowed
Header unset "DMS-Options"                     env=!webdav
Header unset "MicrosoftOfficeWebServer"        env=!webdav
Header unset "MicrosoftSharePointTeamServices" env=!webdav
Header unset "MS-Author-Via"                   env=!webdav
Header unset "MS-Doclib"                       env=!webdav
Header unset "MS-WebStorage"                   env=!webdav
Header unset "Repl-uid"                        env=!webdav
Header unset "ResourceTag"                     env=!webdav
