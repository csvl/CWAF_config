# ModSecurity rules for XSS
# ---------------------------------------------------------------
# Range: 2000300-2000449

# HTML tags
# Inside tags:
#  - JavaScript actions (onerror, ...)
#  - src=(https?:)?//
#  - src=data:
#  - inside src, refresh, ...
#     - data:
#     - relative url:
#        xxx@fqdn  *******
#        /../xxx
# src="js_%LG%.js"
#  LG => @attacker.com/script
# src="js_@attacker.com/script.js"
# src="//victim.com/js_%LG%.js"
#  LG => /../redirect/xxx?url=//attacker.com/script
# src="//victim.com/js_/../redirect/xxx?url=//attacker.com/script.js"

# Very slow
#Use SecRuleHeuristicArgsCookies  "@detectXSS" 2000421,tag:libXSSi,tag:XSS,tag:XSSHEUR 3  "none,~{htmlMsg}"  "XSS Attack Detected via LibInjection"

# !!! Some of these should also be checked against output

# Tags =========================================================================
DefineStr uri_abs_local     "(?:~{syntax_URL}|~{syntax_URL_path})"
DefineStr href_uri_         "(?:~{QuotedString}|~{uri_abs_local}(?:[?#][^> ]*)?)"
# Quoted mailto is covered by quoted string
#DefineStr mailto_syntax_    "(?i:(?<quote_mailto>[\x27\x22]?)mailto:~{syntax_email}(?:,~{syntax_email})*\k<quote_mailto>)"
DefineStr mailto_syntax_    "(?i:mailto:~{syntax_email}(?:,~{syntax_email})*)"
DefineStr href_syntax_      "(?:\s++href\s*+=\s*+(?:~{mailto_syntax_}|~{href_uri_}))"
DefineStr allowed_attr_     "(?i:\s++(?!on)(?:[a-z0-9_]++(?:\s*+=\s*+(?:[-a-z0-9_]+|(?<quote_attr>[\x27\x22])[-a-z0-9_ ]*+\k<quote_attr>))?))"
DefineStr allowed_attr2_    "(?i:\s++(?!on)(?:[a-z0-9_]++(?:\s*+=\s*+(?:[-a-z0-9_]+|(?<quote_att2>[\x27\x22])[-a-z0-9_ ]*+\k<quote_att2>))?))"
DefineStr style_syntax_     "(?i:\s++style\s*+=\s*+~{QuotedString}|~{allowed_attr_})"
DefineStr allowed_attr_href "(?:~{href_syntax_}|~{allowed_attr2_})"
DefineStr all_tags_attr     "(?:~{syntax_email}|/?(?i:a~{allowed_attr_href}*|[a-z][a-z0-9_]*~{allowed_attr_}*))"
DefineStr all_tags_style    "(?:~{syntax_email}|/?(?i:a~{allowed_attr_href}*|[a-z][a-z0-9_]*~{style_syntax_}*))"
DefineStr known_tags_       "(?i:acronym|b|big|blink|blockquote|br?|caption|center|cite|code|del|details|div|d[lt]|em|h[1-6r]|i|ins|li|mark|menu|nobr|ol|p|pre|q|s|samp|small|spacer|span|strike|strong|su[bp]|summary|style|table|t[dhr]|tfoot|thead|time|tt|u|ul|var|wbr)"
DefineStr known_tags_attr_  "(?:~{syntax_email}|/?(?i:a~{allowed_attr_href}*|~{known_tags_}~{allowed_attr_}*))"
DefineStr known_tags_style_ "(?:~{syntax_email}|/?(?i:a~{allowed_attr_href}*|~{known_tags_}~{style_syntax_}*))"
# Block all tags
# Normally UTF-8 letters and underscore are also valid but never used in practice
Use SecRuleArgsCookies "(</?[a-zA-Z][^>]{0,100})" 2000340,tag:XSS,tag:XML,tag:LowerThan "t:~{jsDecode},~{htmlMsg},msg:'XML/HTML tag'"
Use SkipAfterOnSuccess                            2000340,tag:XSS,tag:XML,tag:LowerThan AfterAllTags
 # --------- basic tags are allowed => only block HTML active content ----------------
 # Block tags with "extended" attribute
 # This also blocks custom tags containing a dash, dot, but not e-mail addresses
 # Allow only some known tags (always allow "style" attribute)
 Use SecRuleArgsCookies "<(?!~{known_tags_style_}\s*+/?>)/?[a-zA-Z][^>]{0,100}"  2000317,tag:XSS,tag:XML,tag:LowerThan "multiMatch,~{htmlMsg},msg:'Unknown XML/HTML tag or extended attribute'"
 Use SkipAfterOnSuccess                                                          2000317,tag:XSS,tag:XML,tag:LowerThan,tag:security  AfterTagsStyle
  Use SecRuleArgsCookies "<(?!~{all_tags_style}\s*+/?>)/?[a-zA-Z][^>]{0,100}"    2000394,tag:XSS,tag:XML,tag:LowerThan "multiMatch,~{htmlMsg},msg:'XML/HTML tag with extended attribute'"
 Use SecMarker AfterTagsStyle,tag:security
 # Block "container" tags like <script>, <style>
 Use SecRuleArgsCookies "<(?i)style\b"                                            2000402,tag:XSS,tag:LowerThan "~{htmlMsg},msg:'<style> HTML tag'"
 Use SecRuleArgsCookies "<(?i:embed|i?frame|maction|meta|object|portal|script)\b" 2000435,tag:XSS,tag:LowerThan "~{htmlMsg},msg:'Active HTML tag'"
Use SecMarker AfterAllTags,tag:security,tag:XSS,tag:XML

# Processing tags
Use SecRuleArgsCookies "<(?![?]xml)\s*+[?]" 2000301,tag:XSS,tag:LowerThan,tag:QuestionMark "t:~{jsDecode},msg:'Processing tag inclusion'"

Use SecRuleArgsCookies "<\s*+!"             2000429,tag:XSS,tag:LowerThan,tag:Exclam "t:~{jsDecode},msg:'Processing tag inclusion'"
Use SkipAfterOnSuccess  2000429,tag:XSS,tag:LowerThan,tag:Exclam,tag:security  AfterLtBang
 Use SecRuleArgsCookies "<!--#"            2000381,tag:XSS,tag:LowerThan,tag:Exclam,tag:HashTag,tag:Dash "t:~{jsDecode},msg:'Server tag inclusion'"
 # Allow only comment, no other
 Use SecRuleArgsCookies "<!(?!--)"         2000383,tag:XSS,tag:LowerThan,tag:Exclam "t:~{jsDecode},msg:'Processing tag inclusion'"
Use SecMarker AfterLtBang,tag:security

Use SecRuleArgsCookies "<\s*+[:_*~%#&]"     2000443,tag:XSS,tag:LowerThan "t:~{jsDecode},multiMatch,msg:'XML/HTML tag'"
Use SecRuleArgsCookies "<<"                2000326,tag:XSS,tag:LowerThan "t:~{jsDecode}"

# Closing tags - needed as a new one must be open?
# This will block stand-alone tags like <br/>
#Use SecRuleArgsCookies  "[:_*~%#]>"             2000436,tag:XSS,tag:LowerThan "multiMatch,t:~{jsDecode},msg:'Tag closing'"

# HTML actions: onerror= ... (https://html5sec.org/) ===========================
Use SecRuleArgsCookies "\b(?:-o-link(?:|-source)|dirname)[\s/]*+=" 2000444,tag:XSS,tag:Equal "t:~{jsDecode},~{htmlMsg},msg:'XSS Attack (JS handler)'"
# Tokens: base64.base64 => accept =.
Use SecRuleArgsCookies "\bon[a-z]{3,30}[\s/]*+=[^=.]"              2000445,tag:XSS,tag:Equal "t:~{jsDecode},~{htmlMsg},msg:'XSS Attack (JS handler)'"
Use SkipAfterOnSuccess                                              2000445,tag:XSS,tag:Equal,tag:security AfterOnHandlers
 DefineStr JsEventPrefix "(?:de)?activate|after|before|begin|device|dom|moz"
 DefineStr JsEventSuffix "abort|autocomplete|blur|cancel|change|click|close|copy|done|down|end|enter|error|hide|iteration|leave|load|move|out|over|press|ready|resetresize|run|select|scroll|show|start|toggle|up(?:date)?"
 DefineStr JsEventObject "cue|duration|hash|key|language|mouse|message|rate|webkit|wheel"
 DefineStr JsEventAction "canplay|cut|drag|drop|edit|emptied|input|focus|(?:un)?load|o(?:ff|n)line|paste|playing|popstate|print|(?:re|un)do|seeking|sort|stalled|storage|submit|suspend"
 Use SecRuleArgsCookies "\bon(?:~{JsEventPrefix}|~{JsEventObject}|~{JsEventAction})[a-z]{3,20}[\s/]*+=[^=]"  2000431,tag:XSS,tag:Equal "t:~{jsDecode},~{htmlMsg},msg:'XSS Attack (JS handler)'"
 Use SecRuleArgsCookies "\bon[a-z]{3,20}(?:~{JsEventSuffix})[\s/]*+=[^=]"  2000432,tag:XSS,tag:Equal "t:~{jsDecode},~{htmlMsg},msg:'XSS Attack (JS handler)'"
 Use SecRuleXSSHeuristic  "\b(?:on)[a-z]{3,30}[\s/]*+/*\s*+=[^=]"     2000430,tag:Equal,tag:Base64  "3,logdata:'value=%{tx.heur}'"
Use SecMarker AfterOnHandlers,tag:security

# HTML attributes ==============================================================
Use SecRuleArgsCookies "(?i)(?:ecma|java|vb)?script[\s/]*+(?:[:=]|&[a-z])"  2000303,tag:XSS "t:~{jsDecode},msg:'Active script'"
Use SecRuleArgsCookies "[[.]\s*+(?i)csstext\b"             2000304,tag:XSS,tag:Parano "t:~{jsDecode}"
Use SecRuleArgsCookies "(?i)\b(?:low|dyn)src\b"           2000306,tag:XSS,tag:Parano,tag:PossibleName "t:~{jsDecode}"
Use SecRuleArgsCookies "\b(?:expression|eval)~{attrSeparator}?\s*+(?:[+}]|&[a-z])" 2000307,tag:XSS,tag:Parano "multiMatch,t:~{jsDecode}"
Use SecRuleArgsCookies "\beval~{attrSeparator}?\s*+(?:[(;]|&[a-z])"    2000425,tag:XSS,tag:Parenthesis,tag:Parano "multiMatch,t:~{jsDecode}"
Use SecRuleArgsCookies "=\s*+(?:expression|eval)\b"        2000331,tag:XSS,tag:Equal,tag:Parano t:~{jsDecode}
Use SecRuleArgsCookies "\b(?:href|url)(?:\s*+[(]|~{attrSeparator}?\s*+=)\s*+[\x27\x22]?(?:shell|run):" 2000308,tag:XSS,tag:Colon,tag:Parano "multiMatch,t:~{jsDecode}"
Use SecRuleArgsCookies "\bbackground-image\b"             2000309,tag:XSS,tag:Parano,tag:Dash t:~{jsDecode}
#Use SecRuleArgsCookies "\bstyle[\s/]*+=[^=]"             2000311 tag:XSS,tag:Equal,tag:Parano t:~{jsDecode}
#Use SecRuleArgsCookies "activexobject"                   2000313 tag:XSS,tag:Parano,tag:PossibleName t:~{jsDecode}
Use SecRuleArgsCookies "\b(?:copy|get)(?:file|special|parent)folder" 2000314,tag:XSS,tag:Parano "t:~{jsDecode}"
Use SecRuleArgsCookies "\b(?:(?:instance|type)of)\b"      2000315,tag:XSS,tag:Parano,tag:PossibleName "t:~{jsDecode}"
Use SecRuleArgsCookies "\b(?:(?:create(?:element|attribute|text(?:range|node))|contextualfragment|unescape|(?:en|de)codeuricomponent|(?:remove|append)child|getelement\w+|(?:remove|parent)node|globalstorage|sessionstorage|postmessage|setinterval|elseif|regex|moveby|resizeto))\b"  2000316,tag:XSS,tag:Parano,tag:PossibleName "t:~{jsDecode}"
Use SecRuleArgsCookies "\bregwrite\b"                     2000318,tag:XSS,tag:Parano t:~{jsDecode}
Use SecRuleArgsCookies "\bexecscript\b"                   2000320,tag:XSS,tag:Parano t:~{jsDecode}
Use SecRuleArgsCookies "\b(?:add|@\s*+)import\b"           2000321,tag:XSS,tag:Parano t:~{jsDecode}
Use SecRuleArgsCookies "\b(?:inn|out)er(?:html|text)\b"   2000322,tag:XSS,tag:Parano "t:~{jsDecode}"
Use SecRuleArgsCookies "\bxmlns\s*+(?:[:=]|&[a-z])"        2000324,tag:XSS,tag:Parano,tag:SHORT,tag:XML multiMatch,t:~{jsDecode}
Use SecRuleArgsCookies "\bbase64"                         2000325,tag:XSS,tag:Parano,tag:SHORT,tag:Base64,tag:PossibleName t:~{jsDecode}
Use SecRuleArgsCookies "\x5c[\x22\x27]"                   2000327,tag:XSS,tag:JSON,tag:Parano,tag:BackSlash "multiMatch,t:~{jsDecode}"
Use SecRuleArgsCookies "(?:moz-binding|\bchrome(?:html)?|\bie[.](?:ftp|https?)|(?:firefox|navigator)url|wyciwyg|view-source):"   2000328,tag:XSS,tag:Colon,tag:Parano "t:~{jsDecode},msg:'Firefox reserved scheme'"
Use SecRuleArgsCookies "addeventlistener[.]|navigator[.]plugins|xpcnativewrapper|about:blank" 2000329,tag:XSS,tag:Parano "t:~{jsDecode},msg:'Firefox reserved scheme'"
Use SecRuleArgs        "(?:[.]|[[][\x27\x22]|set-)cookie\b" 2000330,tag:XSS,tag:Parano t:~{jsDecode}
Use SecRuleArgs        "[+]="                             2000333,tag:XSS,tag:Parano,tag:Equal,tag:Short "multiMatch,t:~{jsDecode}"
Use SecRuleArgsCookies "uricomponent"                     2000335,tag:XSS,tag:Parano,tag:PossibleName t:~{jsDecode}
#Use SecRuleArgsCookies "\bsrc~{attrSeparator}?\s*+="       2000361,tag:XSS,tag:SHORT,tag:Equal multiMatch,t:~{jsDecode}
Use SecRuleArgsCookies "__viewstate"                      2000342,tag:XSS,tag:Parano,tag:Underscore t:~{jsDecode}
Use SecRuleArgsCookies "\bbit(?:and|or|val)\b"            2000343,tag:XSS,tag:Parano,tag:SHORT,tag:PossibleName t:~{jsDecode}
Use SecRuleArgsCookies "/[.]source"                       2000344,tag:XSS,tag:Parano,tag:Slash,tag:Dot t:~{jsDecode}
Use SecRuleArgsCookies "\b(?:document|location)(?:[.][a-z]++|[[][\x27\x22][a-z]++[\x27\x22][]])?\s*+="  2000345,tag:XSS,tag:XML,tag:Equal t:~{jsDecode}
Use SecRuleArgsCookies "(?:previous|next)sibling"         2000346,tag:XSS,tag:Parano t:~{jsDecode}
Use SecRuleArgsCookies "\bcharset~{attrSeparator}?\s*+="    2000348,tag:XSS,tag:Parano,tag:Equal t:~{jsDecode},multiMatch
Use SecRuleArgsCookies "\b(?:s|g)etter~{attrSeparator}?\s*+=" 2000349,tag:XSS,tag:Parano,tag:Equal multiMatch,t:~{jsDecode}
Use SecRuleArgsCookies "\bwith\s*+[(].+[)]\s*+\w++\s*+[(]"    2000350,tag:XSS,tag:Parano,tag:Parenthesis t:~{jsDecode}
Use SecRuleSubsetOf 2000319,tag:security,tag:XSS,tag:CurlyBrace,tag:Parenthesis 2000351
Use SecRuleArgsCookies "\b(?:do|while|for)\s*+[(].*[)]\s*+[{]" 2000351,tag:XSS,tag:Parano,tag:Parenthesis,tag:CurlyBrace t:~{jsDecode}
Use SecRuleArgsCookies "\bisn(?:an|ull)\b"                2000352,tag:XSS,tag:Parano,tag:SHORT,tag:PossibleName t:~{jsDecode}
Use SecRuleArgsCookies "\bxpath\b"                        2000354,tag:XSS,tag:Parano,tag:SHORT,tag:PossibleName,tag:XPath t:~{jsDecode}
Use SecRuleArgsCookies "csshttprequest|innerhtml"         2000426,tag:XSS,tag:Parano t:~{jsDecode}
Use SecRuleArgsCookies "\@cc_on"                          2000371,tag:XSS,tag:Parano,tag:SHORT,tag:Underscore,tag:AtSign t:~{jsDecode}
Use SecRuleArgsCookies "\@_"                              2000372,tag:XSS,tag:Parano,tag:SHORT,tag:Underscore,tag:AtSign t:~{jsDecode}
Use SecRuleArgsCookies "behavior[:.]url"                  2000373,tag:XSS,tag:Parano t:~{jsDecode}
Use SecRuleArgsCookies "(?>\bfor\s*+[(][^)]{0,100}+);[^)]{0,100}+;[^)]{0,100}+[)]"   2000374,tag:XSS,tag:Parano,tag:Parenthesis,tag:SemiColon t:~{jsDecode}
Use SecRuleArgsCookies "[+]\s*+[(]?+\s*+new array"             2000375,tag:XSS,tag:Parano t:~{jsDecode}
Use SecRuleArgsCookies "(?i)visibility:hidden"             2000376,tag:XSS,tag:Parano,tag:Colon t:~{jsDecode}
Use SecRuleArgsCookies "\bthis\s*+[[].*[]]"                 2000377,tag:XSS,tag:Parano,tag:Bracket t:~{jsDecode}
Use SecRuleArgsCookies "(?i)style:expression"              2000379,tag:XSS,tag:Parano,tag:Colon t:~{jsDecode}
Use SecRuleArgsCookies "(?i)cursor:url"                    2000380,tag:XSS,tag:Parano,tag:Colon t:~{jsDecode}
Use SecRuleArgsCookies ":#"                                2000382,tag:XSS,tag:SHORT,tag:Colon,tag:AtSign t:~{jsDecode}
Use SecRuleArgsCookies "\bdata(?:src|fld)~{attrSeparator}\s*+=" 2000384,tag:XSS,tag:Parano,tag:Equal multiMatch,t:~{jsDecode}
Use SecRuleArgsCookies "\batob\s*+[(]"                      2000385,tag:XSS,tag:Parano,tag:Parenthesis t:~{jsDecode}
#Use SecRuleArgsCookies "[+].(?:valueof|tostring):"        2000385,tag:XSS,tag:Parano t:~{jsDecode}
Use SecRuleArgsCookies "(?i)\bname=[\x27\x22]?src\b"       2000389,tag:XSS,tag:Parano,tag:Equal t:~{jsDecode}
Use SecRuleArgsCookies "\b(?:data)~{attrSeparator}?\s*+="    2000388,tag:XSS,tag:XML,tag:SHORT,tag:Equal multiMatch,t:~{jsDecode}
Use SecRuleArgsCookies "\b(?:value)~{attrSeparator}?\s*+="   2000391,tag:XSS,tag:Parano,tag:XML,tag:SHORT,tag:Equal multiMatch,t:~{jsDecode}
#Use SecRuleArgsCookies "\baction~{attrSeparator}?\s*+="     2000395,tag:XSS multiMatch,t:~{jsDecode}
Use SecRuleArgsCookies "document[.]cookie|[.](?:createdocument|documentelement)" 2000399,tag:XSS t:~{jsDecode}
Use SecRuleArgsCookies "clipboard(?:data|formats)|(?:general|set)clipboard" 2000407,tag:XSS,tag:Parano,tag:PossibleName t:~{jsDecode}
Use SecRuleArgsCookies "xmlhttprequest"                    2000408,tag:XSS,tag:Parano t:~{jsDecode}
Use SecRuleArgsCookies "location[.]hash"                   2000413,tag:XSS,tag:Parano t:~{jsDecode}
Use SecRuleArgsCookies "\b(?:formaction|actiontype)"       2000414,tag:XSS,tag:Parano,tag:PossibleName t:~{jsDecode}
Use SecRuleArgsCookies "\bsrc(?:doc|set)~{attrSeparator}?\s*+="  2000415,tag:XSS,tag:Equal multiMatch,t:~{jsDecode}
Use SecRuleArgsCookies "toxmlstring"                       2000416,tag:XSS,tag:Parano t:~{jsDecode}
Use SecRuleArgsCookies "pointer-events"                    2000417,tag:XSS,tag:Parano,tag:Dash t:~{jsDecode}
Use SecRuleArgsCookies "__nosuchmethod__"                  2000419,tag:XSS,tag:Parano,tag:Underscore t:~{jsDecode}
Use SecRuleArgsCookies "(?:push|replace)state"             2000420,tag:XSS,tag:Parano,tag:PossibleName t:~{jsDecode}
Use SecRuleArgsCookies "[.]action[\s/]*+="                2000305,tag:XSS,tag:Parano,tag:Equal t:~{jsDecode}
Use SecRuleArgsCookies "\btostring\b"                      2000422,tag:XSS,tag:Parano,tag:PossibleName t:~{jsDecode}
Use SecRuleArgsCookies "[.]constructor"                    2000433,tag:XSS,tag:Parano,tag:Dot "t:~{jsDecode},msg:'JS function overriding'"
Use SecRuleArgsCookies "constructor[.][a-z]"               2000370,tag:XSS,tag:Parano,tag:Dot "t:~{jsDecode},msg:'JS function overriding'"
Use SecRuleArgsCookies "[.]prototype"                      2000434,tag:XSS,tag:Parano,tag:Dot "t:~{jsDecode},msg:'JS function overriding'"
Use SecRuleArgsCookies "\bsetTimeout\b"                    2000341,tag:XSS,tag:Parano,tag:Dot "t:~{jsDecode},msg:'Dangerous JS function SetTimeout'"
# // (comment) not used in a URL (no check in cookies because contains often base64)
#Use SecRuleArgs         "(?<!~{AllowedProtos}:/)//(?![a-z0-9/])"  2000442,tag:XSS,tag:Slash,tag:Base64 "t:~{jsDecode},msg:'// Comment'"

Use SecRuleArgsCookies ":\s*+has\s*+[(]"        2000355,tag:XSS,tag:Parano,tag:Parenthesis,tag:Colon "t:~{jsDecode},msg:'JS internal method'"
Use SkipAfterOnSuccess  2000355,tag:XSS,tag:Parenthesis,tag:Colon,tag:security  AfterHasMethod
Use SecRuleArgsCookies "[*]\s*+:\s*+has\s*+[(]"  2000362,tag:XSS,tag:Parano,tag:Parenthesis,tag:Colon,tag:Star "t:~{jsDecode},msg:'JS internal method'"
Use SecRuleArgsCookies ":\s*+has\s*+[(]\s*+[*]"  2000362,tag:XSS,tag:Parano,tag:Parenthesis,tag:Colon,tag:Star "t:~{jsDecode},msg:'JS internal method'"
Use SecMarker AfterHasMethod,tag:security

# HTML MIME types
#data:[<mediatype>][;token=value][;base64],<data>
Use SecRuleArgsCookies "data:(?i:[a-z]++/[-a-z0-9+.]++\s*+(?:;[^,]*)?)?\s*+(?i:;base64)?\s*+,"  2000347,tag:XSS,tag:Colon                     t:~{jsDecode},~{htmlMsg}
Use SecRuleArgsCookies "=\s*+(?i:[a-z]++/[-a-z0-9+.]++\s*+(?:;[^,]*)?)?\s*+(?i:;base64)\s*+,"    2000347,tag:XSS,tag:Equal,tag:Comma,tag:Slash t:~{jsDecode},~{htmlMsg}
#Use SecRuleArgsCookies "(?:data:|=\s*+)[\x27\x22]?text/(?:x?html|[a-z]*script)"              2000347,tag:XSS t:~{jsDecode},~{htmlMsg}
Use SecRuleArgsCookies "\bjar:"                           2000353,tag:Parano,tag:XSS,tag:Colon t:~{jsDecode}

# Protocols
Use SecRuleArgsCookies "\b(ie(?:[.]ftp|[.]https?|history|rss)|mhtml|ms-(?:msdt|xhelp)|outlookfeeds?|slupkg|snews|ssh2.tunnel|stickynotes|stssync|svn[+]ssh|tsvncmd|webcals?|wmp11[.]assocprotocol[.]mms)\b" 2000409,tag:XSS,tag:Parano "t:~{jsDecode},msg:'Protocol inclusion'"
Use SecRuleArgsCookies "\b(stickynotes):"  2000427,tag:XSS,tag:Parano,tag:Colon "t:~{jsDecode},msg:'Protocol inclusion'"
Use SecRuleArgsCookies "\b(outlook|thunderbird)[.]url"  2000410,tag:XSS,tag:Parano,tag:Dot "t:~{jsDecode},msg:'Protocol inclusion'"
Use SecRuleXSSHeuristic "\b(aim|feed|ftp|ldap|mms|news|oms|skype|t?svn|wlpg):"  2000411,tag:Parano,tag:Colon "2,msg:'Protocol inclusion',logdata:'value=%{tx.heur}:'"

# function(...) {
Use SecRuleArgsCookies "(?>[(][^)]*+)[)]\s*+[{]"  2000319,tag:XSS,tag:Parano,tag:CurlyBrace,tag:Parenthesis "multiMatch,t:~{jsDecode},msg:'Possible function syntax'"

# JS decoding functions
Use SecRuleArgsCookies "\b(?:getcharword|fromcharcode|(?:to|sub)(?:string|(?:upper|lower)case)|valueof)\b" 2000323,tag:XSS,tag:Parano t:~{jsDecode}
Use SecRuleArgsCookies "\b(?:(?:to|sub)(?:string|(?:upper|lower)case)|valueof)\b"                          2000428,tag:XSS,tag:Parano,tag:PossibleName t:~{jsDecode}
Use SecRuleArgsCookies "(?:[.]|[[]\s*+.)(?:replace)\b"                                                      2000332,tag:XSS,tag:Parano t:~{jsDecode}

Use SecRuleXSSHeuristic "\b((?:reduce(?:right|left)?|map|top|filter|every|some|object)\s*+[[(}+])" 2000390,tag:Parano,tag:SHORT      "1,logdata:'value=%{tx.heur}'"
Use SecRuleXSSHeuristic "\b(url~{attrSeparator}?\s*+=)"                                             2000392,tag:Parano,multiMatch,tag:SHORT,tag:Equal       "1,logdata:'value=%{tx.heur}'"
Use SecRuleXSSHeuristic "\b(redirect\b[^ ])"                                                      2000393,tag:Parano                           "1,logdata:'value=%{tx.heur}'"
Use SecRuleXSSHeuristic "\b(url\s*+[(])"                                                           2000302,tag:Parano,tag:SHORT,tag:Parenthesis "1,logdata:'value=%{tx.heur}'"

# Array
Use SecRuleArgsCookies "[^\s][[]\s*+\d++\s*+[]]\s*+[;+]" 2000336,tag:XSS,tag:Bracket "t:~{jsDecode}"

# Concatenation
Use SecRuleArgsCookies "/\s*+[?]\s*+\x22"  2000337,tag:Parano,tag:XSS,tag:Quote,tag:QuestionMark   "multiMatch,t:~{jsDecode},msg:'Possible XSS: string concatenation'"
Use SecRuleArgsCookies "/\s*+[)]\s*+[[]"   2000338,tag:Parano,tag:XSS,tag:Bracket,tag:Parenthesis  "t:~{jsDecode},msg:'Possible XSS: string concatenation'"
Use SecRuleXSSHeuristic  "([]]\s*+[[]\W*\w)" "2000396,tag:Parano,tag:Bracket,msg:'Possible XSS: string concatenation'"   "2,logdata:'value=%{tx.heur}'"

Use SecRuleXSSHeuristic "\b((?:autofocus|placeholder)[^=]*+=)"  "2000398,tag:Parano,tag:Equal,msg:'XSS Attack'"  "4,logdata:'value=%{tx.heur}'"

# CSS
Use SecRuleArgsCookies "(?i)background\s*+:\s*+url" 2000366,tag:XSS,tag:Parano,tag:Colon            t:~{cssDecode}
Use SecRuleArgsCookies "(?i)\@\s*+font-face"       2000368,tag:XSS,tag:Parano,tag:AtSign,tag:Dash  t:~{cssDecode}
# String breaker
#Use SecRuleXSSHeuristic "[\x0a\x0d]\s*+;"       2000446,tag:Parano,tag:SemiColon,t:~{encodedParam}  3
# {} already covered by 2000367

# Encoded tab, new line, etc.
Use SecRuleArgsCookiesAscii  "&#x?0*+(?:9|1[0-3]|[a-d]);"     2000448,tag:XSS,tag:Ampersand,tag:HashTag,tag:XSS,tag:SemiColon "multiMatch,msg:'HTML-Encoded tab, new line, etc.'"
Use SecRuleSubsetOf 2000218,tag:security,tag:XSS,tag:BackSlash 2000449
Use SecRuleArgsCookiesAscii  "\x5cx?0*+(?:9|1[0-3]|[a-d])\b"  2000449,tag:XSS,tag:BackSlash             "multiMatch,msg:'JS/HTML-Encoded tab, new line, etc.'"

# RSnake XSS Cheat Sheet "signatures"
#Use SecRuleArgsCookies "\brsnake\b"       2000360,tag:XSS,tag:Parano,tag:SHORT,tag:PossibleName "t:~{jsDecode},msg:'XSS signature (RSnake Cheat Sheet)'"
# slow: Use SecRuleArgsCookiesAscii  "(?:&#|\x5c)(?:(?:00){0,2}8[38]){3}|\bxss[.]js\b|(?:<|/|'|\"|&quot;)xss\b"       2000363 "multiMatch,t:~{jsDecode},tag:XSS,msg:'XSS signature (RSnake Cheat Sheet)'"

# Basic XSS probes
Use SecRuleXSSHeuristic  "\b((?:alert|confirm|prompt)[(])" "2000364,tag:XSS,tag:Parano,tag:Parenthesis,msg:'XSS classical probe (alert/prompt)'"  "3,logdata:'value=%{tx.heur}'"

# Regular expression assignment - warning: referer may contain param=/...
#Use SecRuleXSSHeuristic "(?<!callback|url)=\s*+/"          2000397,tag:Slash,tag:Equal  2

Use SecRuleArgsCookies "[{]\s*+[{]"  2000356,tag:XSS,tag:CurlyBrace "multiMatch,msg:'Mustache.js/Handlebars/Jinja2/Twigg/AngularJS template injection'"

Use SecRuleArgsCookies "xlink\s*+:\s*+href" 2000357,tag:XSS,tag:Parano,tag:Colon ""

# HTML entities: used in OPTIONS (drop down) -> disabled
#Use SecRuleArgs  "&(?:(?:#[0-9]+)|(?:#x[0-9a-f]+)|(?:[a-z]+));"      2000370,tag:XSS,tag:SemiColon,tag:Ampersand "multiMatch,t:~{jsDecode},~{status}:508,msg:'HTML entity. Matched signature'"

# jjencoding / FuckJS
#  +[]  -> 0
#  ~[]  -> -1
#  ![]  -> false
#  {}   -> [object Object]
#  {}.  -> undefined
#  !""  -> false
#  !''  -> false
#  ()   -> code evaluation
#  to transform in a string ->  +"..."
Use SecRuleArgsCookies "[[][]]"  2000400,tag:XSS,tag:JSON,tag:Bracket  ""
Use SkipAfterOnSuccess           2000400,tag:XSS,tag:Bracket,tag:security AfterJJBrackets
 Use SecRuleArgsCookies "[~!+=]\s*+[[]\s*+[]]|[[]\s*+[]]\s*+[[+]"  2000401,tag:XSS,tag:Bracket  "multiMatch"
Use SecMarker AfterJJBrackets,tag:security
Use SecRuleArgsCookies "[{]\s*+[}]" 2000367,tag:XSS,tag:JSON,tag:CurlyBrace  "multiMatch,t:~{cssDecode}"
Use SkipAfterOnSuccess             2000367,tag:XSS,tag:CurlyBrace,tag:security AfterJJCurlyBrace
 Use SecRuleArgsCookies "[{]\s*+[}]\s*+[.+]" 2000403,tag:XSS,tag:Parano,tag:CurlyBrace  "multiMatch"
Use SecMarker AfterJJCurlyBrace,tag:security
Use SecRuleArgsCookies "[!]\s*+[\x22\x27]\s*+[\x22\x27]" 2000406,tag:XSS,tag:Quote,tag:Exclam     multiMatch
Use SecRuleArgsCookies "[(]\s*+[)]"     2000363,tag:XSS,tag:Parenthesis       multiMatch
Use SecRuleArgsCookies "=\s*+!"         2000334,tag:XSS,tag:Equal,tag:Exclam     multiMatch
Use SecRuleXSSHeuristic "[+]\s*+\x22"   2000404,tag:Quote,tag:Plus  3
# $ can be anything, but used by "default" encoder
Use SecRuleArgsCookies "[$]\s*+="       2000405,tag:XSS,tag:Dollar,tag:Equal  multiMatch
# rem: {} $_ already blocked

# Allowing space after . would be safer but leads to many false positives
Use SecRuleXSSHeuristic  "(?<!view)([[.](?:write|location|form))\b"  2000412,tag:Parano "1,logdata:\x27value=%{tx.heur}'"

Use SecRuleArgsCookies "text/cache-manifest" 2000358,tag:XSS,tag:Parano,tag:Slash,tag:Dash  ""

# Prototype pollution
Use SecRuleArgNotAllowed "__proto__"
Use SecRuleArgsCookies "__(?:definegetter|definesetter|js_function|lookupgetter|nosuchmethod|parent|proto)"  2000423,tag:XSS,tag:Parano,tag:Underscore  ""
Use SecRuleArgsCookies "closeText"  2000424,tag:XSS,tag:Parano,tag:PossibleName  "msg:'JQuery internal property'"

# Also used for PHP
DefineStr _sh_fct  "(?:char|concat|eval|passthru|str(?:c..|len)|scanf|s?printf|unhex)"
Use SecRuleArgsCookies "\b(~{_sh_fct}[(])"     2000437,tag:XSS,tag:Parano,tag:Parenthesis ""
Use SecRuleArgsCookies "(=~{_sh_fct})\b"       2000438,tag:XSS,tag:Parano,tag:Equal ""
Use SecRuleArgsCookies "binarywrite|(?:filesystem|create)object|(?:html|url)encode" 2000439,tag:XSS,tag:Parano ""
# Count "function(" as heuristic, but block if followed by quote
DefineStr _sh_fct2  "(?:ascii|cast|benchmark|convert|encode|if|open|system)"
Use SecRuleArgsCookies "\b(~{_sh_fct2}[(] ?[\x27\x22])" 2000386,tag:XSS,tag:Parano,tag:Parenthesis,tag:Quote  ""
Use SecRuleXSSHeuristic  "\b(~{_sh_fct2}[(])"           2000310,tag:XSS,tag:Parano,tag:Parenthesis  "2,logdata:'value=%{tx.heur}'"
Use SecRuleArgsCookies "\bexec\s*+[(]"                   2000312,tag:XSS,tag:Parano,tag:Parenthesis  ""

# VBScript (supported in IE 10 and below)
#Use SecRuleArgsCookies "filereader\s*+[(]"   2000359,tag:XSS,tag:Parano,tag:PossibleName,tag:Parenthesis t:~{jsDecode}
# VBScript, ASP, Adobe ActionScript
#Use SecRuleArgsCookies "\bdeletefile\b"     2000319,tag:XSS,tag:Parano t:~{jsDecode}

Use SecRuleArgsCookies "(?:document|self)\s*+[[]\s*+[\x22\x27]" 2000447,tag:XSS,tag:Parano,tag:Bracket,tag:Quote  ""

# Zero-Width Space: these are translated to space by the htmldecode transformation => specific check
Use SecRuleArgsCookies "&#(?:820[345]|652(?:79|96));"  2000369,tag:XSS,tag:Parano,tag:Ampersand,tag:HashTag,tag:Semicolon "multiMatch,msg:'Zero-Width Space'"
