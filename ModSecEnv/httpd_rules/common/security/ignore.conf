Use SecRule IP:VulnScan @unconditionalMatch "phase:1,~{VulnScanActions},~{nolog},msg:'Previously detected vulnerability scanner',skipAfter:VeryLastRule"
# In case IP are blocked in phase 2, don't log when counter > 5000 to avoid log exhaustion
<IfDefine !Is1~{block_phase}>
 Use SecRule "IP:blocked"  "@eq ~{BlockedNoWarn}" "phase:1,tag:logging,t:none,~{denyBlocked},~{noIncreaseBlockCounter},msg:'Too many attacks from this IP, stopping logging them'"
 Use SecRule "IP:blocked"  "@gt ~{BlockedNoWarn}" "phase:1,tag:logging,t:none,~{denyBlocked},~{noIncreaseBlockCounter},msg:'Too many attacks from this IP, stopping logging them',nolog"
</IfDefine>

# Ignore empty Content-Type with GET/HEAD
Use SecRule REQUEST_METHOD  "^(?:DELETE|GET|HEAD)$"  "phase:1,t:none,~{nosecaction},tag:security,ctl:ruleRemoveById=2000047"

# Block but do not log wrong requests when robots misinterpretes the mailto: protocol
Use SecRule TX:url  "^/mailto:"  "phase:1,t:none,~{stop404},tag:Ignore"

# Block but do not log wrong requests from Google toolbar
Use SecRule TX:url  "^/url[(]"    "phase:1,t:none,~{stop404},tag:Ignore"

# Block but do not log wrong requests from PaloAlto URL filtering
Use SecRule TX:url  "(?i:<|%3c)br/?$"    "phase:1,t:none,~{stop404},tag:Ignore"

# Block requests from PGP clients looking for PGP public keys
Use SecRule TX:url  "^/[.]well-known/openpgpkey/"    "phase:1,t:none,~{status404},~{noIncreaseBlockCounter},msg:'Looking for PGP public keys (ignored)',tag:Ignore"

# Allow monitoring checks on IP address (not needed if monitoring set in "browser" mode)
#Use SecRule REQUEST_HEADERS:USER-AGENT  "(?i)[(]www.paessler.com[)]"  "phase:1,t:none,tag:security,~{nosecaction},ctl:ruleRemoveById=2002949"

# LinkedIn bot takes trailing ) as part of the URL
#Use SecRule REQUEST_HEADERS:User-Agent "!LinkedInBot" "phase:1,t:none,~{skip}:1"
#Use SecRule TX:url "(.*)[)]$"                         "phase:1,t:none,~{nosecaction},capture,redirect:%{TX.1}"

# To allow (even non standard clients) access to site icon, robots.txt, Google analytics data, etc.
Use SecRule ENV:PathToIgnore @unconditionalMatch "phase:1,t:none,~{stopSecurity}"

# Allow # in redirection URLs
Use SecAction "phase:1,~{nosecaction},ctl:ruleRemoveTargetById=4003341;ARGS:idp,ctl:ruleRemoveTargetById=4003341;ARGS:redirect_url,ctl:ruleRemoveTargetById=4003341;ARGS:ReturnUrl"

# Allow the following extensions
Use SecAllowExt "css|ico|js|htc|html?|~{UsualFileExt}"

# number followed by ;
Use SecRuleIgnoreTargetById 2000822 REQUEST_HEADERS

# Fix cookies separator
#Use EditRequestCookieEarly "," ";"

#Use SecDisableRuleExt "@unconditionalMatch" "@unconditionalMatch" json 2000001-2000002
#Use SecDisableRuleExt "@unconditionalMatch" "@unconditionalMatch" json 2001655

# Remove special cookies (to be sure)
Use RemoveCookieEarly "_acl|[*#]waf_[^; ]*"
# Remove obsolete (pseudo-)cookies
Use RemoveCookieEarly "[$](?:Domain|Path|Version)"
# Remove 3rd-party cookies ---------------------------------------
<IfDefine ------------------->
# Intercom, Inc. (https://www.intercom.com/legal/cookie-policy)
Use RemoveCookieEarly "intercom-[^=;]*"
# Zopim 
Use RemoveCookieEarly "__zlc[^=;]*"
# Disqus
Use RemoveCookieEarly "disqus_"
# Adobe Analytics
Use RemoveCookieEarly "AMCV[^=;]*"
# www.ist-track.com
Use RemoveCookieEarly "IST(?:Track)?"
</IfDefine>

# Exceptions for ARGS containing tokens & signed AWS/Azure URL (base64)
<Macro SignExcept_ $target>
 Use SecRule ARGS "(?i)^(?:token)$|\bamazonaws[.]com/.*signature=|blob[.]core[.]windows[.]net.*&sig=" "phase:1,t:none,~{nosecaction},ctl:'ruleRemoveTargetByTag=/~{Base64RuleTags_}/;$target'"
</Macro>
# Exceptions managed dynamically
<IfDefine !noOptimExceptions>
 Use IgnoreTargets_ 1 REQUEST_HEADERS "~{IgnoredHeaders_}"         SecRuleHeaders
 Use IgnoreTargets_ 1 REQUEST_HEADERS "~{IgnoredHeaders}"          SecRuleHeaders
 Use IgnoreTargets_ 1 REQUEST_HEADERS "~{EmergencyIgnoredHeaders}" SecRuleHeaders
 Use IgnoreTargets_ 1 REQUEST_COOKIES "~{IgnoredCookies_}"         SecRuleCookies
 Use IgnoreTargets_ 1 REQUEST_COOKIES "~{IgnoredCookies}"          SecRuleCookies
 Use IgnoreTargets_ 1 REQUEST_COOKIES "~{EmergencyIgnoredCookies}" SecRuleCookies
 Use IgnoreTargets_ 2 ARGS "~{IgnoredArgs_}"                       SecRuleArgs
 Use IgnoreTargets_ 2 ARGS "~{IgnoredArgs}"                        SecRuleArgs
 Use IgnoreTargets_ 2 ARGS "~{EmergencyIgnoredArgs}"               SecRuleArgs
</IfDefine>
Use SignExcept_ %{MATCHED_VAR_NAME}

<IfDefine OptimParsing>
 # Optimisations: Suppress some rules if some charcters are not found -----------
 DefineStr optimTfn "t:none,t:urlDecode,t:htmlEntityDecode"

 # Don't check for ; and cmd separators in headers
 Define BypassOptimHeaderSemiColon 1
 Define BypassOptimHeaderCmdDelim  1

 # Only possible from version 2.9.5.2 (variable ModSecVersion available from 2.9.5.2)
 Use SecRule &ENV:ModSecVersion "@eq 0" "phase:1,t:none,tag:security,~{skipAfter}:AfterOptim"
 Use SecRule &ENV:ModSecVersion "@eq 0" "phase:2,t:none,tag:security,~{skipAfter}:AfterOptim"
  Use SecDisableTagConditionally Ampersand    "&"       "t:none,t:urlDecode"
  Use SecDisableTagConditionally AtSign       "\@"      "~{optimTfn}"
  Use SecDisableTagConditionally BackSlash    "\x5c"    "~{optimTfn}"
  Use SecDisableTagConditionally Bracket      "[[]"     "~{optimTfn}"
  Use SecDisableTagConditionally Colon        ":"       "~{optimTfn}"
  Use SecDisableTagConditionally CurlyBrace   "[{]"     "~{optimTfn}"
  Use SecDisableTagConditionally Dollar       "[$]"     "~{optimTfn}"
  Use SecDisableTagConditionally Dot          "[.]"     "~{optimTfn}"
  Use SecDisableTagConditionally Equal        "="       "~{optimTfn}"
  #Use SecDisableTagConditionally Exclam       "!"       "~{optimTfn}"
  Use SecDisableTagConditionally HashTag      "#"       "~{optimTfn}"
  Use SecDisableTagConditionally LowerThan    "<"       "~{optimTfn}"
  #Use SecDisableTagConditionally NewLine      "[\x0a\x0d]" "~{optimTfn}"
  Use SecDisableTagConditionally Parenthesis  "[(]"     "~{optimTfn}"
  Use SecDisableTagConditionally Pipe         "[\x7c]"  "~{optimTfn}"
  #Use SecDisableTagConditionally QuestionMark "[?]"     "~{optimTfn}"
  Use SecDisableTagConditionally Quote        "['\x22]" "~{optimTfn}"
  Use SecDisableTagConditionally SemiColon    ";"       "~{optimTfn}"
  Use SecDisableTagConditionally Slash        "/"       "~{optimTfn}"
  Use SecDisableTagConditionally Star         "[*]"     "~{optimTfn}"
  Use SecDisableTagConditionally Underscore   "_"       "~{optimTfn}"

  # Command injection separators (Unix separators are a superset of Windows ones): & | ;
  #Use SecDisableTagConditionally CmdDelim "~{CmdDelimShort}" "~{optimTfn}"
  Use SecDisableTagCon_ 1 REQUEST_COOKIES "%{tx.optimREQUEST_COOKIESAmpersand}|%{tx.optimREQUEST_COOKIESPipe|%{tx.optimREQUEST_COOKIESSemiColon}" "~{cookies}" CmdDelim,tag:SecRuleCookies,tag:COOKIE CmdDelim
  Use SecDisableTagCon_ 2 ARGS            "%{tx.optimARGSAmpersand}|%{tx.optimARGSPipe|%{tx.optimARGSSemiColon}"          "~{args}"    CmdDelim,tag:SecRuleArgs,tag:ARGS CmdDelim
  Use SecAction "phase:2,tag:security,tag:$tag,~{nosecaction},setvar:TX.optimBODYCmdDelim=+%{TX.optimSTREAM_INPUT_BODYAmpersand}%{TX.optimSTREAM_INPUT_BODYPipe}%{TX.optimSTREAM_INPUT_BODYSemiColon}%{TX.optimREQUEST_BODYAmpersand}%{TX.optimREQUEST_BODYPipe}%{TX.optimREQUEST_BODYSemiColon}"
   Use SecRule TX:optimBODYCmdDelim "!@eq 0" "phase:2,tag:security,tag:CmdDelim,~{skipAfter}:AfterXMLBodyCheck"
   Use SecRule STREAM_INPUT_BODY "."         "phase:2,tag:security,tag:CmdDelim,t:none,ctl:'ruleRemoveTargetByTag=^(?i:CmdDelim)$;STREAM_INPUT_BODY'"
   Use SecRule REQUEST_BODY      "."         "phase:2,tag:security,tag:CmdDelim,t:none,ctl:'ruleRemoveTargetByTag=^(?i:CmdDelim)$;REQUEST_BODY'"
  Use SecMarker AfterXMLBodyCheck,tag:security,tag:CmdDelim
 Use SecMarker AfterOptim,tag:security
</IfDefine>
