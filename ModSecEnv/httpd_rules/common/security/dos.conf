# DoS detection -------------------------------------------------

# IP.dos_counter contains total number of requests (excluding images, CSS & JS)
# IP.dos         contains number of DoS attacks previously detected

# Expire DoS counter after 20 min. (instead of 1h total inactivity)
#SecAction "phase:1,~{nosecaction},expirevar:IP.dos=1200"

# Log only every 100 DoS connections
Use RuleLogSome IP dos_counter  ~{DoSConnectionRateLog}

# White-listed IP
Use SecRuleIp "~{IpToNotBlock}" "phase:1,t:none,tag:security,~{skipAfter}:EndOfDoSCheck"

# Slow headers & POST
<IfModule reqtimeout_module>
 # RequestReadTimeout header/body=t1[-t2],MinRate=b
 #   t1 = time-out for first bytes (including SSL re-negotiation)
 #   t2 = total time-out
 #   b  = # of bytes that allow 1 more second to t1
 #   Initial values are increased in SSL locations
 RequestReadTimeout ~{RequestReadTimeout}

 # DoS attacks: mod_reqtimeout returns error 408
 SecRule RESPONSE_STATUS "^408" "phase:5,t:none,~{increaseBlockCounter},~{warn},setvar:IP.dos=+1,msg:'Too slow request - possible DoS',tag:DoS"

 # Previous DoS detection
 SecRule IP:dos "@gt ~{DoSAttackMax}"  "phase:1,t:none,~{drop},msg:'Previously detected as DoS attacker',setvar:TX.dos_counter,tag:DoS"
</IfModule>

# Slow responses
<IfDefine EXTENDEDSTATUS-------->
 Use SecAction "phase:1,tag:security,~{nosecaction},setvar:tx.resptime4=%{TIME_EPOCH}"
 Use SecAction "phase:4,tag:security,~{nosecaction},setvar:tx.resptime4=%{TIME_EPOCH}"
 Use SecAction "phase:5,tag:security,~{nosecaction},setvar:tx.resptime5=%{TIME_EPOCH},setvar:tx.resptime5=-%{tx.resptime4}"
 Use LogPhase 5 "Response time: %{tx.resptime5} (%{TIME_EPOCH} - %{tx.resptime4})"
</IfDefine>

# Allow up to X numbers of simultaneous connections from one IP address
# mod_reqtimeout protects against this? (this chokes on loopback proxying)
<IfDefine Throttling>
 <IfModule !qos_module>
  <Macro SecConnStateLimit @blocked>
   SecConnReadStateLimit  ~{ConcurrentConnections} @blocked
   SecConnWriteStateLimit ~{ConcurrentConnections} @blocked
  </Macro>

  <IfDefine !IpMatch>
   # SecConnReadStateLimit only accept IpMatch* operators => syntax error with reverse proxy
   #Warning You must define "IpMatch" to define "Throttling" with a reverse proxy
  </IfDefine>
  SecConnEngine On
  # Simultaneous connections in READ_BUSY_STATE/WRITE_BUSY_STATE
  Use SecConnStateLimit "!@IpMatch 127.0.0.1,~{ReverseProxy_IP},~{App_WAF_Front_IP}}"

  # Too high rate from one IP
  Use SecReqMaxRate ~{DoSConnectionRate}
 </IfModule>
</IfDefine>

SecMarker EndOfDoSCheck
