# ModSecurity rules for HTTP Request Smuggling
# ---------------------------------------------------------------
# Range: 2003000-2003099

# Blocked by Apache
#Use SecRuleDeny TX:url "\x5c|%5[cC]" "phase:1,t:none,~{status404},msg:'Backslash in URL'"

# CR or LF in URI or headers (Headers name & Upload filenames already restricted)
Use SecRuleDeny TX:url|REQUEST_HEADERS "[\r\n]"  "phase:1,id:2003000,tag:NewLine,~{status404},msg:'HRS: CR or LF in URI or header'"
Use SkipAfterOnSuccess_ 1 2003000,tag:security AfterHttpMethod
 # HTTP methods in header
 Use SecRuleDeny REQUEST_HEADERS  "(?i)[\r\n](?:get|post|head|acl|(?:re|un)?bind|check(?:in|out)|copy|delete|(?:un)?lock|merge|mk(?:activity|col(?:_after)?|workspace)|move|options|poll|prop(?:find|patch)|put(?:_after)?|report|search|(?:un)?subscribe|uncheckout|update|version_control)\s+(?:[a-z]+:/)?/"     "phase:1,t:none,id:2003002,tag:NewLine,tag:Slash,~{drop},msg:'HRS: HTTP method in header'"
Use SecMarker AfterHttpMethod,tag:security


# CR or LF in the request
#Use SecRuleDeny QUERY_STRING    "[\r\n]"     "phase:1,~{status}:400,id:2003001,tag:NewLine,msg:'encoded CR or LF in the request'"

<Macro BlockMultipleHeader $header>
 Use SecRuleDeny &REQUEST_HEADERS:'$header'  "@gt 1"  "phase:1,t:none,~{drop},msg:'Multiple header <$header>'"
 # Some contain commas so do not use: Use SecRuleDeny REQUEST_HEADERS:$header   ","      "phase:1,t:none,~{drop},msg:'Multiple header (concatenated) <$header>'"
</Macro>

# Block multiple headers
Use BlockMultipleHeader host
Use BlockMultipleHeader /^if-(?:un)?modified-since$/
Use BlockMultipleHeader authorization
Use BlockMultipleHeader connection
Use BlockMultipleHeader content-length
Use BlockMultipleHeader content-type
Use BlockMultipleHeader date
Use BlockMultipleHeader host
Use BlockMultipleHeader if-range
Use BlockMultipleHeader max-forwards
Use BlockMultipleHeader proxy-authorization
Use BlockMultipleHeader range
Use BlockMultipleHeader referer
Use BlockMultipleHeader transfer-encoding
Use BlockMultipleHeader user-agent

# Content-Type white-listed => not needed ---------------------------------------
# Empty boundary
#Use SecRuleHeader Content-Type "(?i);\s*+boundary\s*+=\s*+$" "phase:1,t:none,~{drop},tag:Protocol,tag:SemiColon,tag:Equal,msg:'Empty Boundary in Content-Type'"
# Boundary containing a comma
#Use SecRuleHeader Content-Type "(?i);\s*+boundary\s*+=\s*+[^;,]*," "phase:1,t:none,~{drop},tag:Protocol,tag:SemiColon,tag:Equal,tag:Comma,msg:'Boundary contains a comma'"
# Multiple boundaries
#Use SecRuleHeader Content-Type "(?i);\s*+boundary\s*+=.*;\s*+boundary\s*+=" "phase:1,t:none,~{drop},tag:Protocol,tag:Protocol,tag:SemiColon,msg:'Multiple boundaries in Content-Type'"
# Incomplete multipart
#Use SecRuleHeader Content-Type "(?i)multipart/\s*+(?:;|$)" "phase:1,t:none,~{drop},tag:Protocol,tag:SemiColon,tag:Slash,msg:'Incomplete multipart in Content-Type'"
# Boundary not last item
#Use SecRuleHeader Content-Type "(?i);\s*+boundary\s*+=.+['\x22]."   "phase:1,t:none,~{drop},tag:Protocol,tag:SemiColon,tag:Equal,tag:Quote,msg:'Boundary not last item'"
# Multiple charset
#Use SecRuleHeader Content-Type "(?i)charset\s*+=.*charset\s*+="   "phase:1,t:none,~{drop},tag:Protocol,tag:Equal,msg:'Multiple charset'"

# HTTP request line in Cookies (\r\n blocked in URL, filename, headers, etc.)
Use SecRuleCookies "[\r\n].* (?i)http/(?:0[.][9]|[12][.][01])\b"  "2003012,~{caseSensitive},tag:Slash,tag:NewLine,tag:Dot,tag:XSS" "multiMatch,msg:'HRS: HTTP request line splitting'"

# Authentication Gap in TLS Renegotiation
#Use SecRuleDeny REQUEST_HEADERS "(?i)(?:GET|POST|HEAD|ACL|(?:RE|UN)?BIND|CHECK(?:IN|OUT)|COPY|DELETE|(?:UN)?LOCK|MERGE|MK(?:ACTIVITY|COL(?:_AFTER)?|WORKSPACE)|MOVE|OPTIONS|POLL|PROP(?:FIND|PATCH)|PUT(?:_AFTER)?|REPORT|SEARCH|(?:UN)?SUBSCRIBE|UNCHECKOUT|UPDATE|VERSION_CONTROL) .* HTTP/(?:0[.][9]|[12][.][01])" "phase:1,t:none,id:???,~{drop},msg:'Possible TLS renegotiation exploit: HTTP method in header'"

# Chunked transfer encodings and Content-Length header
# httpd removes C-L when chunked encoding is used as well
#Use SecRule &REQUEST_HEADERS:Content-Length "@eq 0"       "phase:1,t:none,id:2003004,tag:AutomatedTools,tag:security,~{skipAfter}:AfterHRS"
# Use SecRuleDeny REQUEST_HEADERS:Transfer-Encoding "!^$"  "phase:1,t:none,id:2003004,tag:AutomatedTools,~{status}:501,msg:'HRS: chunked encodings & Content-Length'"
#Use SecMarker AfterHRS,tag:AutomatedTools,tag:security

# HTTP header in args (content-type can be used in full HTML)
Use SecRuleArgs "(?<!-)\b(?i)content-type:"                    2003003,tag:EXPLOIT,tag:Dash,tag:XSS  "~{drop},msg:'HRS: HTTP header (Content-...) in argument'"
Use SecRuleArgs "(?<!-)\b(?i)content-(?:disposition|length):"  2003017,tag:EXPLOIT,tag:Dash          "~{drop},msg:'HRS: HTTP header (Content-...) in argument'"

# WSGI convert headers to HTTP_header
Use InvalidRequestHeader /^HTTP_/

# Unencoded space --------------------------------------------------------------
# Unencoded space in URI => Apache stops reading the line

# Session fixation
<Macro BlockSessionFixation_ @target @pattern $id>
 Use SecRuleDeny @target @pattern "phase:2,t:~{jsDecode},id:$id,~{status}:500,msg:'Session Fixation. Matched signature',logdata:%{MATCHED_VAR_NAME}"
</Macro>
<Macro BlockSessionFixation @pattern $id>
 Use BlockSessionFixation_ REQUEST_URI_RAW            @pattern 200306$id,tag:Parano,tag:URL
 Use BlockSessionFixation_ "~{args}"                  @pattern 200307$id,tag:Parano,tag:ARGS,tag:SecRuleArgs
 <IfDefine XMLParsing>
  Use BlockSessionFixation_ XML:/*                    @pattern 200308$id,tag:Parano,tag:XML
 </IfDefine>
 Use BlockSessionFixation_ "ARGS_NAMES|~{ReqHeaders}" @pattern 200309$id,tag:Parano,tag:SecRuleHeaders
</Macro>
<Macro BlockSessionFixationDisable_ $baseid $id $todisable $tags>
 Use SecAction "phase:2,tag:security,~{nosecaction},id:$baseid$id,ctl:ruleRemoveById=$baseid$todisable,$tags"
</Macro>
<Macro BlockSessionFixationDisable $id $todisable>
 Use BlockSessionFixationDisable_ 200306 $id $todisable tag:URL
 Use BlockSessionFixationDisable_ 200307 $id $todisable tag:ARGS
 Use BlockSessionFixationDisable_ 200308 $id $todisable tag:XML
 Use BlockSessionFixationDisable_ 200309 $id $todisable ""
</Macro>
Use BlockSessionFixation "(?i)\bset-cookie:"                           4,tag:Colon,tag:Dash
Use BlockSessionFixation "(?i)\bhttp-equiv\b"                          3,tag:Dash
Use BlockSessionFixation "(?i)[.]cookie\b.*;\s*+(?:expires|domain)\s*+=" 2,tag:Equal,tag:Dot,tag:SemiColon
Use BlockSessionFixationDisable                                        4 1
Use BlockSessionFixationDisable                                        3 1
Use BlockSessionFixation "(?i)\bhttp-equiv\s+set-cookie\b"             1,tag:Dash

# --- We should check the complete request
# 2 CR or LF
#???Use SecRuleDeny REQUEST_???   "\n[ \t]*\n|\r[ \t]*\r"        "phase:1,t:none,id:2003005,tag:NewLine,~{drop},msg:'HRS: 2 CR or LF in headers'"
# CR/LF space CR/LF
#???Use SecRuleDeny REQUEST_???   "[\n\r][ \t]*[\n\r]"           "phase:1,t:none,id:2003006,tag:NewLine,~{drop},msg:'HRS: 2 CR or LF in headers'"

Use SkipAfterOnSuccess_ 1 2002924,tag:security AfterHeaderNameSpace
 # Disallow space between header name and :
 Use SecRuleDeny REQUEST_HEADERS_NAMES " $" "phase:1,t:none,id:2003008,~{drop},msg:'HRS: space at end of header name'"
Use SecMarker AfterHeaderNameSpace,tag:security

# "debug" parameter
Use SecRuleDeny ARGS:debug "!^0$" "t:none,id:2003005,msg:'debug parameter'"

# Connection header specifies headers to remove
Use SecRuleHeader Connection "\b(?i:Accept|Cache-Control|Content-length|Host|If-Modified-Since|If-None-Match|Referer|Upgrade-Insecure-Requests|User-Agent|X-Forwarded-.*)\b" "phase:1,t:none,tag:Protocol,tag:Comma,~{status}:400,msg:'Connection Header: invalid syntax',id:2003007"

# Response Header Name Injection Attack
Use SecRuleInputHeaders "(?i)\brefresh\s*+:\s*+[0-9]*\s*+;\s*+url\s*+=.*//"  2003009 2003016 tag:XSS,tag:Parano,tag:Colon,tag:Equal,tag:SemiColon,tag:Equal,tag:Slash "msg:'Response Header Name Injection'"
Use SecRuleInputHeaders "(?i:content-security-policy|cross-origin-opener-policy|x-(?:frame-options|proxy-authorization|proxy-connection|xss-protection|proxy-remote-addr|proxy-request))" 2003010 2003018 tag:XSS,tag:Parano,tag:Dash "msg:'Response Header Name Injection'"
Use SecRuleInputHeaders "(?i)dns-prefetch" 2003011  2003019 tag:XSS,tag:Parano,tag:Dash "msg:'dns-prefetch Injection'"


# Bug in AppleWebKit: sends requests for images with "bytes=xxx-"
Use SecRule REQUEST_HEADERS:User-Agent "!AppleWebKit/"                        "phase:2,t:none,tag:security,~{skipAfter}:EndOfImagesWithBytes"
Use SecRule REQUEST_LINE               "!^GET /.*[.](?i:gif|jpe?g|png) HTTP"  "phase:2,t:none,tag:security,~{skipAfter}:EndOfImagesWithBytes"
Use SecRule REQUEST_HEADERS:Range      "^bytes=[0-9]+-$"                      "phase:2,t:none,~{stopStatus}:416,msg:'Chrome bug: invalid Range header',tag:Protocol"
Use SecMarker EndOfImagesWithBytes,tag:security

# Invalid numeric in headers (DoS) ---------------------------------------------
Use SecRuleHeader "/^Accept|^TE$" "[,;]\s*+q\s*+=\s*+(?!(?:1|0|0?[.][0-9]{1,3}))" "phase:1,t:none,~{increaseBlockCounterMax},~{drop},tag:Protocol,tag:Equal,msg:'Invalid ponderation in header'"

# Embedded content
Use SecRuleInputHeaders "(?i)content-(?:disposition|location|mime-version|transfer-encoding|type):" 2003013 2003014 tag:XSS,tag:Parano,tag:Colon,tag:Dash "t:~{jsDecode},~{status}:400,msg:'Embedded content header'"
Use SecRuleInputHeaders "(?i)Multipart/(?:mixed|related)"                                           2003015 2003015 tag:XSS,tag:Parano,tag:Slash "t:~{jsDecode},~{status}:400,msg:'Embedded content header'"
