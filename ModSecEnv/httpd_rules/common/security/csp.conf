# ModSecurity CSP rules
# ---------------------------------------------------------------
# Range: 1000140-1000149

<IfDefine !noCSPheader>

 # default is to send the header to all browsers but old IE
 # MSIE < 11
 BrowserMatch "\bMSIE "  noCSPheader
 # MSIE 11
 BrowserMatch "\bTrident/.*rv:11[.]"   noCSPheader


 # V1 (www.w3.org/TR/CSP/) : Edge,     Firefox 23+, Chrome 25+, Safari 7+,  Opera 19+ => obsolete
 # V2 (www.w3.org/TR/CSP2/): Edge 15+, Firefox 31+, Chrome 40+, Safari 10+, Opera 23+ (> 2015)
 # V3 (www.w3.org/TR/CSP3/): 
 # Latest: https://w3c.github.io/webappsec-csp/
 # Header Content-Security-Policy
 # V2 (www.w3.org/TR/CSP2/): Edge 15+, Firefox 31+, Chrome 40+, Safari 10+, Opera 23+ (> 2015)
 #  Tokens
 #     * means that default-src doesn't apply
 #  - default-src XXX     : urls allowed when unspecified by specific directives
 #  - base-uri XXX        : allowed base URLs *
 #  - connect-src XXX     : allow XMLHttpRequest sources from external urls XXX
 #  - font-src XXX        : allow fonts from external urls XXX
 #  - form-action XXX     : allow to send a form to XXX
 #  - frame-ancestors XXX : allow to embed the page in site XXX
 #  - frame-src XXX       : allow inclusion of frames & workers from external urls "XXX"
 #  - img-src    XXX      : allow images from external urls XXX
 #  - media-src  XXX      : allow multimedia from external urls XXX
 #  - object-src XXX      : allow objects/applets from external urls XXX
 #  - plugin-types MMM    : allow MIME-types MMM
 #  - script-src 'unsafe-eval'  : allow eval() => protection is useless if no eval() is used, otherwise, it's needed
 #  - script-src 'unsafe-inline': allow inline scripts and javascript: URIs
 #  - script-src XXX      : allow scripts from external urls XXX
 #  - style-src 'unsafe-inline': allow inline style
 #  - style-src XXX       : allow styles from external urls XXX
 #  - sandbox             : allow-forms
 #                          allow-pointer-lock: enable the pointer lock API
 #                          allow-popups
 #                          allow-same-origin: content treated as being from same origin instead of restricted
 #                          allow-scripts
 #                          allow-top-navigation: allow to navigate top-level browsing context???
 #  - worker-src XXX      : allow workers (scripts) from external urls XXX (default to script-src)
 #
 #  - block-all-mixed-content:    disallow HTTP resources in HTTPS (if upgrade-insecure-requests not specified/supported)
 #  - upgrade-insecure-requests:  load HTTP resources in HTTPS (2015-08: Chrome/Opera only)
 #
 #
 #  Sources (cannot contain path from v1.1)
 #  - 'none'
 #  - 'self'
 #  - 'unsafe-redirect'
 #  - blob:  => JavaScript blob (https://developer.mozilla.org/fr/docs/Web/API/Blob)
 #  - data:  => Base64-encoded data
 #  - 'report-sample'  => include (part of) blocked script
 # V1 (www.w3.org/TR/CSP/) : no more supported
 # child-src
 # V3 (www.w3.org/TR/CSP3/): not yet supported
 # http: URLs match also https: URLs
 #  Tokens
 #  - 'strict-dynamic': externally loaded scripts (files) are trusted
 #                       => sources are ignored (all allowed)
 #                       => nonces are enforced (if present)
 #                       => scripts created by JS in the DOM are allowed, even if nonces are enforced
 #                       => ignore 'unsafe-inline' & 'unsafe-eval' if present (compat with browsers not supporting it)
 #  Sources (cannot contain path from v1.1)
 #  - manifest-src:    sources for application manifests
 #  - prefetch-src:    sources to be prefetched or prerendered
 #  - script-src-attr: sources for event handlers
 #  - script-src-elem: idem script-src but ignored for scripts defined in inline attributes (+ not a fallback for worker-src)
 #  - style-src-attr:  sources for style attributes
 #  - style-src-elem:  idem style-src except for styles defined in inline attributes
 #  - webrtc-src:      sources for WebRTC connections
 #  - navigate-to:     URLs to which a document can navigate by any means (a, form, window.location, window.open, etc.)
 #  - report-to:       sends report based on the Report-To header (overwrites report-uri)
 
 # "connect-src" needed for iOS (bug)
 Use CSPSetDefault "report-to csp;report-uri /!report/csp;default-src ~{cspSelf};script-src ~{cspSelf} 'unsafe-eval' 'report-sample';connect-src ~{cspSelf};frame-src ~{cspSelf} javascript:;img-src * data:;font-src * data:;media-src * data:;form-action ~{cspSelf}"
 
 # Report-to header used by CSP, Cross-Origin-Opener-Policy, ...
 Header set Reporting-Endpoints "coop=/!report/coop, csp=/!report/csp, default=/!report/default"

 # Capture nonces & hashes set by the application
 <Macro CaptureBackEndCspNonces $header $var>
  Use SecRule RESPONSE:HEADERS:$header "([a-z-]+:)(?:[^:]*?('(?:nonce|sha[0-9]+)-~{syntax_base64}'))+" phase:3,t:none,~{nosecaction},capture,setenv:'$var=%{TX.1} %{TX.2} %{TX.3} %{TX.4} %{TX.5} %{TX.6} %{TX.7} %{TX.8} %{TX.9}''"
  # Maybe all nonces/hashes are stored in TX.2 => to check
 </Macro>
 #Use CaptureBackEndCspNonces ~{CspHeader}      csp-nonces
 #Use CaptureBackEndCspNonces ~{CspHeaderDebug} csp-nonces-debug

 # Forbid MIME-Handling sniffing - also used by CORB (https://fetch.spec.whatwg.org/#corb)
 Header set "X-Content-Type-Options"  "nosniff" env=!disableNosniff
 SecRule RESPONSE_HEADERS:Content-Type "application/octet-stream" "phase:3,~{nosecaction},setenv:disableNosniff,~{caseSensitive}"
 Use CSPUnSet "X-Content-Type-Options"  env=disableNosniff
 # IE8: Allow built-in XSS protection
 Header set "X-XSS-Protection" "1; mode=block" env=browser_ie

 # Allow inline style for SVG
 <LocationMatch [.](?i)svg$>
  Use CSPSet "default-src 'none'; frame-ancestors 'none'; style-src 'self' 'unsafe-inline'"
 </LocationMatch>
</IfDefine>

# Reports logging ----------------------------------------------------------
Use UTF8Encoding "^/!report/"
Use UTF8Encoding "/csp-report$"
<LocationMatch "^/!report/|/csp-report$">
 # In case the engine is off, enable it for reports
 SecRuleEngine On
 SecStreamInBodyInspection On
 Use NoCompression
 # Disable CSP header
 Use NoCSP
 RequestHeader unset Cookie early
 # When in DetectionOnly
 Use AllowLocalPages
 Use SecAllowContentType "application/csp-report"
 Use SecAllowContentType "application/reports+json"
 Use SecUrlPathAllowChars "!"
</LocationMatch>

# Remark: most complexity will be replaced by REQUEST_HEADERS:Content-Type "!^application/csp-report$"
#         when supported by all browsers (CSP Level2 not supported by IE 11 & Android 4.x)

# Log CSP report (only once per URI or application) ----------------------------
<Macro SkipNotReport_ $phase>
 SecRule TX:url "!/(?:!report/|csp-report$)" "phase:$phase,t:none,~{skipAfter}:EndOfReports"
</Macro>

Use SkipNotReport_ 1
Use SkipNotReport_ 2
Use SkipNotReport_ 3
Use SkipNotReport_ 4
Use SkipNotReport_ 5

 # REQUEST_BODY & C logging don't work with "Content-Type: application/json" unless processor forced to URLENCODED
 SecAction "phase:1,~{noResponseBodyAccess},ctl:requestBodyAccess=on,ctl:requestBodyProcessor=URLENCODED,ctl:forceRequestBodyVariable=on,~{disableAllRules},setvar:TX.allowed1"
 ###,setsid:none
 
 # CSP logging (phase 5) -------------------------------------------------------
 SecRule TX:BASENAME "!^csp(?:-report)?$" "phase:5,t:none,~{skipAfter}:EndOfCSPLog"
  # Initialise CSP RESOURCE collection to invariant (skip referrer)
  SecRule STREAM_INPUT_BODY  "^\s*+{\s*+\x22csp-report\x22 ?:(.*)\x22referrer\x22: ?\x22[^\x22]*(.*)"  "phase:5,t:none,capture,~{nosecaction},setvar:TX.csp_data=%{TX.1}@%{TX.2}"
  Use HashRes 5 csp %{TX.csp_data}
  SecAction "phase:5,~{nosecaction},initcol:RESOURCE=csp_%{TX.hash_csp},setvar:RESOURCE.CSP_Logged=+1"

  # Suppress some CSP warnings ----------------------------
  DefineStr stopCSPLog  "phase:5,t:none,tag:CSP,~{skipAfter}:EndOfReports"
  DefineStr knownCSPLog "~{stopCSPLog},~{log},setvar:RESOURCE.noContentType,ctl:auditLogParts=+I,msg:'Content Security Policy violation (reported by browser)'"
  
  # Don't log if already done
  SecRule RESOURCE:CSP_Logged "@gt 1" "~{stopCSPLog}"

  # addons in browsers => false positive
  <Macro IgnoreAddon @pattern>
   SecRule STREAM_INPUT_BODY @pattern "~{stopCSPLog}"
  </Macro>
  <Macro MaliciousAddon @pattern>
   SecRule STREAM_INPUT_BODY @pattern "~{knownCSPLog},msg:'Content Security Policy violation (known man in the browser)'"
  </Macro>
  Use IgnoreAddon "\x22blocked-uri\x22:\x22(?:about\b|(?:chrome|moz-icon)(?:-extension):?)"
  Use IgnoreAddon "\x22script-sample\x22:\x22@media [^\x22]*-ghostery"
  Use IgnoreAddon "if [(]window[.]google && [(]window[.]google[.]sn"
  # addons in iOS => false positive
  Use IgnoreAddon "\x22blocked-uri\x22:\x22(?:about|gsa|ms-appx-web|mx):"
  Use IgnoreAddon "\x22source-file\x22:\x22(?i:resource|safari-extension|webviewprogressproxy):"
  Use MaliciousAddon "\x22blocked-uri\x22:\x22https?://[^/]{1,200}[.](?i:akamaihd[.]net|cloudfront[.]net/|tlscdn[.]com)"
  # toolbars & wrapper pages
  DefineStr cspUrlToIgnore "translate[.]google[.]com|www[.]google[.](?:a-z)+/imgres[?]|.*/google_custom_search_watermark[.]gif|mstat[.]acestream[.]net|www[.]searchtweaker[.]com/downloads/js/foxlingo_ff[.]js|nikkomsgchannel|91[.]68[.]209|.*zscalertwo[.]net|o[.]yieldsquare[.]com|compare[.]buyhatke[.]com|icontent[.]us|.*metabar[.]ru|.*bufferapp[.]com|.*fontface[.]ninja|.*instapaper[.]com|.*superfish[.]com|.*printfriendly[.]com|.*jollywallet[.]com|.*zohostatic[.]com|apps[.]2gis[.]ru|restapi[.]dictionary[.]com|ads[.]panoramtech[.]net|nikkomsgchannel|cdn[.]viglink[.]com|.*ultimatestatusbar|inst[.]shoppingate[.]info|mc[.]yandex[.]ru|vivafiliates[.]com[.]br|.*best-deals-products[.]com"
  SecRule STREAM_INPUT_BODY "\x22blocked-uri\x22:\x22https?://(?i:~{cspUrlToIgnore})"       "~{stopCSPLog}"

  SecAction  "~{knownCSPLog}"
 SecMarker EndOfCSPLog

 # Reports: "skipAfter" all rules when not in blocking mode
 SecAction    "phase:1,~{skipAfter}:VeryLastRule"
 SecAction    "phase:2,~{skipAfter}:VeryLastRule"
 SecAction    "phase:3,~{skipAfter}:VeryLastRule"
 SecAction    "phase:4,~{skipAfter}:VeryLastRule"
SecMarker EndOfReports

