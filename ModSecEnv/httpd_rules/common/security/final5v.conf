# ModSecurity rules: final rules in phase 5 in vhost
# Global scope because locations not available when blocking in phase 1
# Range: 4001000-4001099

<IfModule auth_openidc_module>
 # To overwrite other directives
 <LocationMatch ~{OIDCRedirectURI}$>
  Use SecAuditLog "~{SecLog}/../mod_oidc_audit.log"
 </LocationMatch>
</IfModule>

<LocationMatch ^>
 <IfDefine !noSecurityRules>
  # Unset variable "allowedCookies" in case all cookies are allowed
  Use SecRule ENV:allowAllCookies  @unconditionalMatch  "phase:2,t:none,~{nosecaction},tag:security,setenv:!allowedCookies"
  SetEnvIf allowAllCookies . !allowedCookies

  # Copy only allowed cookies
  RequestHeader unset Cookie                       env=allowedCookies
  RequestHeader   set Cookie %{allowedCookies}e    env=allowedCookies
  RequestHeader edit* Cookie "REQUEST_COOKIES:" "" env=allowedCookies
 </IfDefine>

 # Remove mod_oidc cookies for back-end
 <IfModule auth_openidc_module>
  RequestHeader edit* Cookie "(?:~{CookieDelim1_}(?:~{OIDCCookiePrefix})[^;,]*)+" ""
 </IfModule>

 # Cleanup cookie header
 RequestHeader edit  Cookie "^[;, ]+|[;, ]+$" ""
 RequestHeader edit* Cookie "; *;+"           ";"

 # Response ---
 # Store & show all cookies in debug mode
 Use SecRule &ENV:debug           "@eq 0"   "phase:5,t:none,tag:security,~{skipAfter}:EndOfCookiesLog"
 Use SecRule ENV:allowAllCookies  "@eq 1"   "phase:5,t:none,tag:security,~{skipAfter}:EndOfCookiesLog"
  # Store all cookies
  Use SecRule  "REQUEST_COOKIES_NAMES" "!^(?:_acl$|waf)" "phase:5,tag:security,~{nosecaction},t:none,setvar:'TX.orgCookies=%{TX.orgCookies};%{MATCHED_VAR}'"
  # Show all cookies
  # RESOURCE.OrgCookie may become very long if huge number of cookies
  #  => collection_store: Failed to write to DBM file ".../resource": Invalid argument
  Use SecRule TX:orgCookies  "^;(.*)"                           "phase:5,tag:security,t:none,~{nosecaction},capture,setvar:'TX.orgCookies=%{TX.1}'"
  Use SecRule TX:orgCookies  "!@within %{RESOURCE.OrgCookie}"   "phase:5,tag:security,t:none,~{nosecaction},initcol:RESOURCE=%{WEBAPPID},setvar:'RESOURCE.OrgCookie=%{RESOURCE.OrgCookie};%{MATCHED_VAR}'"
  Use SecRule TX:orgCookies  "."                                "phase:5,tag:security,t:none,~{logOnly},msg:'Original cookies',logdata:'%{MATCHED_VAR}'"
 Use SecMarker EndOfCookiesLog,tag:security

 # No header found => log once
 Use SecRule TX:notProxyFE                      @unconditionalMatch "phase:5,~{skipAfter}:AfterRemoteAddr"
 Use SecRule REQUEST_HEADERS:~{IPAddressHeader} @unconditionalMatch "phase:5,~{skipAfter}:AfterRemoteAddr"
 Use SecRule TX:url                             "~{ProbeURL_}"      "phase:5,~{skipAfter}:AfterRemoteAddr"
  Use RuleLogOnceExt__ 5 REMOTE_ADDR @unconditionalMatch "t:none" "tag:security" "No <~{IPAddressHeader}> header set by reverse proxy" 1000101 "tag:security,tag:config" RESOURCE "%{WEBAPPID}"
 Use SecMarker AfterRemoteAddr

 <IfDefine EXTENDEDSTATUS>
  # Force contextual data
  Use StatusAndTrace
 </IfDefine>
 SecMarker VeryLastRule
</LocationMatch>
