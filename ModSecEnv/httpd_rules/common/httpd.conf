Define httpd2.4 1

# Unix-specific define (not found on Windows):
# Linux:    APR_USE_PTHREAD_SERIALIZE, APR_USE_SYSVSEM_SERIALIZE
# AIX:      APR_USE_PTHREAD_SERIALIZE, APR_USE_SYSVSEM_SERIALIZE
# Solaris:  APR_USE_PTHREAD_SERIALIZE, APR_USE_FCNTL_SERIALIZE

# Load custom modules

<IfModule !authz_core_module>
 LoadModule authz_core_module modules/mod_authz_core.so
</IfModule>

# To allow suppressing authentication for some locations
<IfModule !authn_core_module>
 LoadModule authn_core_module modules/mod_authn_core.so
</IfModule>

# mod_version must be used before using <IfVersion>
<IfModule !version_module>
 LoadModule version_module modules/mod_version.so
</IfModule>

# node.conf may contain Define that influences everything else
IncludeOptional conf/machin?/nod?.conf

# params.conf may contain system-related defines used in loadfile.conf
# (typically AppModulesRoot)
Include conf/site/params.conf
# wildcard mandatory before 2.4.30 but keep it to allow multiple files
IncludeOptional conf/emergenc?/params*.conf
# Variables depending on params.conf
Include conf/common/defines2.conf

# Add defines depending on other ones
<IfDefine debug>
 Define Debug 1
</IfDefine>
<IfDefine Debug>
 Define EXTENDEDSTATUS 1
</IfDefine>
<IfDefine EXTENDEDSTATUS>
 Define ClientStatus 1
 Define ExtendedInfo 1
</IfDefine>
<IfDefine noSecurityRules>
 #Define noSecurityHeader 1
 #Define noHeaderChange   1
 Define noCookieRewrite 1
 Define noWafCookie     1
</IfDefine>
<IfDefine noHeaderChange>
 #Define noSecurityHeader 1
 Define noCookieRewrite 1
 Use NoCSPChange
</IfDefine>
<IfDefine noSecurityHeader>
 Define noCSPheader 1
</IfDefine>
<IfDefine noSecurityHeader>
 Define noCORSheader 1
</IfDefine>
<IfDefine !OptimExceptions>
 Define noOptimExceptions 1
</IfDefine>

# Load mod_define ------------------
# For Windows
<IfModule mpm_winnt_module>
 Include conf/common/os/windows.conf
</IfModule>
# For others
<IfDefine !CustomLoadFile>
 <IfModule !mpm_winnt_module>
   # Default is RedHat
   Include conf/common/os/redhat.conf
 </IfModule>
</IfDefine>
<IfDefine CustomLoadFile>
 Include conf/machine/loadfile.conf
</IfDefine>
# ----------------------------------

<IfDefine ModOIDC>
 <IfModule !authz_user_module>
  LoadModule authz_user_module modules/mod_authz_user.so
 </IfModule>
 <IfModule !auth_openidc_module>
  LoadModule auth_openidc_module ${AppModulesRoot}/mod_auth_openidc.so
 </IfModule>
</IfDefine>

# New folder organisation
DefineStr SSLDir "conf/ssl"
<IfDefine OldSSLDir>
 DefineStr SSLDir "conf/site/ssl"
</IfDefine>

<IfDefine DUMP_CONFIG>
 LoadModule info_module modules/mod_info.so
</IfDefine>

# Dynamic Shared Object (DSO) Support
# Modules are executed in reverse order (first defined is last executed)

# Proxying
<IfModule !proxy_module>
 LoadModule proxy_module modules/mod_proxy.so
</IfModule>
<IfModule !proxy_http_module>
 LoadModule proxy_http_module modules/mod_proxy_http.so
</IfModule>

# Loaded after ModSecurity in order to play with
# environment variables set by ModSecurity
<IfModule !rewrite_module>
 LoadModule rewrite_module modules/mod_rewrite.so
</IfModule>
RewriteEngine on

<IfDefine !NOSUBST>
 <IfModule !substitute_module>
  LoadModule substitute_module modules/mod_substitute.so
  SubstituteMaxLineLength 1M
  # When all CSS are on one line
  <LocationMatch [.]min[.](?:cs|j)s$>
   SubstituteMaxLineLength 4M
  </LocationMatch>
 </IfModule>
</IfDefine>

<IfModule !headers_module>
 LoadModule headers_module modules/mod_headers.so
</IfModule>
<IfModule !include_module>
 LoadModule include_module modules/mod_include.so
</IfModule>
<IfModule !log_config_module>
 LoadModule log_config_module modules/mod_log_config.so
</IfModule>
# RemoveOutputFilter in mime_module must run after filter_module
<IfModule !mime_module>
 LoadModule mime_module modules/mod_mime.so
</IfModule>
<IfModule !filter_module>
 LoadModule filter_module modules/mod_filter.so
</IfModule>
# To have filters running on statuses other than 200
Setenv filter-errordocs
<IfModule !env_module>
 LoadModule env_module modules/mod_env.so
</IfModule>
<IfModule !setenvif_module>
 LoadModule setenvif_module modules/mod_setenvif.so
</IfModule>
<IfModule !unique_id_module>
 LoadModule unique_id_module modules/mod_unique_id.so
</IfModule>

# From 2.4.47, we use mod_proxy_http
<IfModule !proxy_wstunnel_module>
 <IfVersion < 2.4.47>
  LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so
  <IfDirective ProxyWebsocketFallbackToProxyHttp>
   ProxyWebsocketFallbackToProxyHttp Off
  </IfDirective>
 </IfVersion>
</IfModule>

# Load-balancing modules
<IfModule !proxy_balancer_module>
 LoadModule proxy_balancer_module modules/mod_proxy_balancer.so
</IfModule>
<IfModule !lbmethod_byrequests_module>
 LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so
</IfModule>
# slotmem_shm_module seems to be optional for load-balancing
<IfModule !slotmem_shm_module>
 LoadModule slotmem_shm_module modules/mod_slotmem_shm.so
</IfModule>

# File storage when not using slotmem_shm_module
<IfDirective HeartbeatStorage>
 HeartbeatStorage "~{AppRun}/hb.dat"
</IfDirective>

<IfDefine ------------>
 <IfModule !logio_module>
  LoadModule logio_module modules/mod_logio.so
 </IfModule>
</IfDefine>

# Optional modules depending on a define ---------------------------------------
<IfDefine !NOSSL>
 # In Unix, mod_ssl is sometimes built statically
 <IfModule !ssl_module>
  LoadModule ssl_module modules/mod_ssl.so
 </IfModule>
</IfDefine>

<IfDefine !NOGEO>
 <IfModule !maxminddb_module>
  LoadModule maxminddb_module  modules/mod_maxminddb.so
 </IfModule>
</IfDefine>

# Compress content before delivering to client
# Must be loaded after mod_security to run before as input filter (same phase)
<IfDefine !NOCOMPRESS>
 <IfDefine BROTLI>
  <IfModule !brotli_module>
   LoadModule brotli_module modules/mod_brotli.so
  </IfModule>
 </IfDefine>
 <IfModule !deflate_module>
  LoadModule deflate_module modules/mod_deflate.so
 </IfModule>
</IfDefine>

# Protects against DoS (slow headers & POST)
<IfDefine DoSProtection>
 <IfModule !reqtimeout_module>
  LoadModule reqtimeout_module modules/mod_reqtimeout.so
  LogLevel reqtimeout:info
 </IfModule>
</IfDefine>

<IfDefine !noHTTP2>
 <IfModule !http2_module>
  LoadModule http2_module modules/mod_http2.so
 </IfModule>
 <IfDirective H2OutputBuffering>
  H2OutputBuffering off
 </IfDirective> 
 <IfDirective H2WebSockets>
  # web sockets not supported in HTTP/2 under Windows
  <IfModule !mpm_winnt_module>
   H2WebSockets on
  </IfModule>
 </IfDirective>
 H2TLSCoolDownSecs 5 
 H2Direct          on
 H2Push            off
 #H2PushPriority text/css Interleaved 512
 #H2PushPriority text/js  Interleaved 512
 #H2PushPriority application/json Interleaved 
</IfDefine>

<IfModule !macro_module>
 LoadModule macro_module modules/mod_macro.so
</IfModule>
MacroIgnoreEmptyArgs
MacroIgnoreBadNesting

<IfDefine Publish>
 <IfModule !mpm_winnt_module>
  # publish not supported yet under Windows
  # mod_cgid would be better but crashes
  LoadModule cgi_module modules/mod_cgi.so
  #CGIDScriptTimeout 2
  <IfDirective ScriptSock>
   ScriptSock "${AppLibRoot}/cgi"
  </IfDirective>
 </IfModule>
 LoadModule alias_module modules/mod_alias.so
 ScriptAlias "/__restricted/cgi-bin/" "~{scriptDir}"
 <LocationMatch "^/__restricted/(?:cgi-bin/|publish$)>
  Options +ExecCGI +FollowSymLinks
 </LocationMatch>
</IfDefine>

# ------------------------------------------------------------------------------

# This must come after loadfile.conf that loads mod_define
Include conf/common/defines.conf
IncludeOptional conf/machin?/nod?.conf

# General macros
Include conf/common/macros.conf

# Proying handling
Include conf/common/proxy.conf

Options +FollowSymLinks -SymLinksIfOwnerMatch -ExecCGI
AcceptPathInfo off

# Performance/resource ------------------------------------------

# Set keep-alive timeout
KeepAliveTimeout 5
# Unlimited numbers of keep-alive requests (only restricted by time-out)
MaxKeepAliveRequests 0

# Processes & Threads manipulation ---------------------------------------------

# Workers:
#    prefork:   single-thread (Unix) => obsolete
#    worker:    multi-threads (Unix)
#    event:     enhanced version of worker (Unix 2.4+) => default
#    mpm_winnt: Windows => only one master and one listener

# Default hard limits for worker/event:
# processes:           ServerLimit 16
# threads per process: ThreadLimit 64  (Windows: 1920)

# Default soft values for worker/event:
# ThreadsPerChild: 25 (Windows: 64)
#  - High number => lower memory but (a bit) less responsive and more impact
#  - Low  number => more memory, a bit more responsive and better distributed amongst cores
# MaxRequestWorkers (Total threads): ThreadsPerChild * ServerLimit
<IfModule !mpm_winnt_module>
 #MaxRequestWorkers 400
</IfModule>
# processes: MaxRequestWorkers / ThreadsPerChild 
# or use ThreadLimit => more optimised but needs a stop/start to change

# Ramp up/down: inactive threads waiting (event/worker only)
# MinSpareThreads  75
# MaxSpareThreads 250   (0 => MinSpareThreads + ThreadsPerChild)

# To recycle memory after X connections (to one process)
MaxConnectionsPerChild 0
<IfModule mpm_winnt_module>
 # Process creation in Windows is very resource intensive
 # Down time during process replacement => no recycling
 MaxConnectionsPerChild 0
</IfModule>

# Limit resources of external processes (CGI, etc.)
#RLimitCPU seconds|max [seconds|max]
#RLimitMEM bytes|max [bytes|max]
#RLimitNPROC number|max [number|max]

# ---------------------------------------------------------------


<IfModule include_module>
 SSIErrorMsg "Error"
 SSIUndefinedEcho " "
 # Disable execute in SSI
 XBitHack off
</IfModule>

# Set request info into environment variables
SetEnvIf Host "^(.*)$" HOST=$1
SetEnvIf Request_URI "^(.*)$"   Request_URI=$1

# ================== Server info ==================
# To avoid DNS lookup
#ServerName  ~{ServerName}
ServerName  localhost
ServerAdmin ~{ServerEmail}
Use SetEnvEarly IncidentServerName ~{IncidentServerName}
Use SetEnvEarly IncidentServerId   ~{IncidentServerId}

# Overwritten by ModSecurity but must be set to "Full"
ServerTokens Full

# For performance: off by default, if mod_status is enabled, set it to on (automatic)
#ExtendedStatus Off

# ErrorLog: The location of the error log file.
# If you do not specify an ErrorLog directive within a <VirtualHost>
# container, error messages relating to that virtual host will be
# logged here.  If you *do* define an error logfile for a <VirtualHost>
# container, that host's errors will be logged there and not here.
ErrorLog ~{ErrorLog}

# LogLevel: Control the number of messages logged to the error_log.
# Possible values include: debug, info, notice, warn, error, crit,
# alert, emerg.
LogLevel ~{LogLevel}
<IfModule ssl_module>
 # One line per connection => too much
 #LogLevel ssl_module:info
</IfModule>
<IfModule auth_openidc_module>
 LogLevel auth_openidc:error
</IfModule>

<IfModule security2_module>
 # include security settings
 Include conf/common/security/config.conf
 # include security rules
 <IfDefine !noSecurityRules>
  Include conf/common/security/rules.conf
 </IfDefine>

 # Fix Content-Type if needed
 Use FixCommonMimeTypesIncorrect
 
 # Force Content-Type based on previous decision
 Header set Content-Type  %{fix-type}e  env=fix-type 
</IfModule>

DefineStr LogImagesExt    "[.](?:gif|ico|jpe?g|png|svg)$"
DefineStr LogResourcesExt "[.](?:~{FontFileExt}|css|js|axd|swf|(?:Ajax|Prototype)Script)(?:[.]faces)?$"
# Do not log images requests (if specified)
SetEnvIfNocase REQUEST_URI "~{LogImagesExt}"     ~{LogImages}-log
SetEnvIfNocase REQUEST_URI "~{LogResourcesExt}"  ~{LogResources}-log
#Use SecRule  RESPONSE_HEADERS:Content-Type "~{MimeMultiMedia}"  "phase:3,~{nosecaction},t:none,setenv:~{LogImages}-log"
#Use SecRule  RESPONSE_HEADERS:Content-Type "~{MimeJS}"          "phase:3,~{nosecaction},t:none,setenv:~{LogResources}-log"

# Don't log access to robots.txt, favicons.ico, /SecError, ...
SetEnvIfExpr "-n reqenv('PathToIgnore')"                      no-log
SetEnvIfNocase REQUEST_URI "^/_restricted"                   !no-log
SetEnvIfNocase REQUEST_URI "^/[.]well-known/acme-challenge/" !no-log

# ProbeURL included above in PathToIgnore
SetEnvIfNoCase REQUEST_URI "~{ProbeURL_}"  !no-log
SetEnvIfNoCase REQUEST_URI "~{ProbeURL_}"  ~{LogProbe}-log

# localhost set in phase 1
SetEnvIfNoCase localhost .                 no-log

DefineStr BackendStatusFormat "%>s (%{proxy-status}n)"
ErrorLogFormat "[%{c}t] [%-m:%l] [pid %P:tid %T] %7F: %E: [client\ %a] %M% ,\ referer\ %{Referer}i"

DefineStr SSLLogFormat_  "\t"
<IfModule !ssl_module>
 DefineStr SSLLogFormat_  "\t[SSL:%{SSL_PROTOCOL}x]\t"
</IfModule>
# mod_logio.c needed to use %I and %O
DefineStr ioLogFormat_  "[-/%B]"
<IfModule logio_module>
 DefineStr ioLogFormat_  "[%I/%O]"
</IfModule>
DefineStr timeLogFormat_  "%T/%D"
<IfVersion >= 2.4.13>
 DefineStr timeLogFormat_  "%{ms}T"
</IfVersion>
<IfModule log_config_module>
  # Common Log Format (CLF) (%u is sometimes buggy)
  DefineStr LogFormatCommon "%a %l %{WAF_USER}e %t \\\"%r\\\" %>s %b"
  LogFormat "~{LogFormatCommon}" common

  # NCSA combined
  LogFormat "%a %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"" combined

  # Common Log Format (CLF) with request timing
  LogFormat "%a %l %u %t \"%r\" %>s %b %T/%D" common-timed

  #WS2K3 - IIS6 Log Format:
  # =======================
  #Fields: date time s-sitename s-computername s-ip cs-method cs-uri-stem cs-uri-query s-port cs-username c-ip cs-version cs(User-Agent) cs(Cookie) cs(Referer) cs-host sc-status sc-substatus sc-win32-status sc-bytes cs-bytes time-taken
  #
  #date        time     s-sitename     s-computername  s-ip         cs-method      cs-uri-stem                    cs-uri-query   s-port cs-username    c-ip          cs-version    cs(User-Agent)                                         cs(Cookie)   cs(Referer)                        cs-host               sc-status sc-substatus  sc-win32-status  sc-bytes        cs-bytes       time-taken
  #---------- -------- --------------- --------------- ------------ ---------  ---------------------------------- ------------   ------ -----------   -------------  ----------    ---------------------------------------------------   ----------    --------------------------------   ---------------       --------- ------------  ---------------  --------        --------       ----------
  #2005-08-15 06:43:37 MyWebSite       www.approach.be  127.0.0.1      GET       /app1/admin/user-management.html  user=ap502     443      ap208      192.5.5.5       HTTP/1.0     Mozilla/4.0 (compatible; MSIE+6.0; Windows NT 5.0)        -         http://www.approach.be/home.html   www.approach.be        200         0             64               0             496            12578
  # %{%Y-%m-%d %T}t                    %V                  %A          %r                %U                           %q          %p        %u           %a              %H            {User-agent}i                                                           %{Referer}i                      %v                %>s                                                      %B             %D
  # Apache Format as close as possible to WS2K3-IIS6 logs
  # %{%Y-%m-%d   %T}t         Date - Time in format YYYY-MM-DD  HH:mm:ss
  # %V                        The server name according to the UseCanonicalName setting.
  # %A                        Local IP-address
  # \"%{X-Forwarded-For}i\"   The contents of X-forwarded-For header line(s) in the request sent to the server
  # %r                        First line of request
  # %U                        The URL path requested, not including any query string
  # %q                        The query string (prepended with a ? if a query string exists, otherwise an empty string)
  # %p                        The canonical port of the server serving the request
  # %u                        Remote user (from auth; may be bogus if return status (%s) is 401)
  # %a                        Remote IP-address
  # %H                        The request protocol
  # \"%{User-Agent}i\"        The contents of User-Agent: header line(s) in the request sent to the server
  # \"%{Referer}i\"           The contents of Referer:    header line(s) in the request sent to the server
  # %v                        The canonical ServerName of the server serving the request
  # %>s                       Status.
  # %B                        Bytes sent, excluding HTTP headers
  # %D                        The time taken to serve the request, in microseconds
  # \"%{error-notes}n\"       Usually error message that caused a request to fail is contained in the error-notes note
  
  ## Make the log file CSV to use it with LogParser with the following header:
  ## Date,time,Server,Local_,Client_IP,Port,Request,URL_Requested,Query_String,Remote_User,Req_Protocol,User_Agent,Referrer,Server_Name,Status,Bytes_Sent,Time_Taken,Error_Notes
  #
  # Rem: LogParser recognises YYYY-MM-DD HH:mm:ss as Date-Time Stamp
  LogFormat "%{%Y-%m-%d %T}t,%V,%A,%a,\"%{CLIENT-IP}i\",%p,%r,%U,%q,%u,%H,\"%{User-Agent}i\",\"%{Referer}i\",%v,%>s,%B,%D,\"%{error-notes}n\"" WS2K3-IIS6

  # Approach format
  DefineStr LogFormatApp "[%{%Y%m%d-%T}t]\t[%a/%{CLIENT-IP}i]~{SSLLogFormat_}[~{BackendStatusFormat}]\t[t:~{timeLogFormat_}/%{perf}e]\t[%r] [%{User-Agent}i] [h:%{Host}i/ip:%A:%{local}p/user:%{WAF_USER}e] [%{UNIQUE_ID}e] [%{Location}o] ~{ioLogFormat_} (%{compressionRatio}n%%) [B:%{ManagedIPBlocked}e,A:%{ManagedIPBadAuth}e,D:%{ManagedIPDoS}e,id:%{BlockRuleId}e] [%{tid}P]"
  LogFormat "~{LogFormatApp}" Approach

  # Debug format
  DefineStr DebugLogF1 "~{LogFormatApp}"
  DefineStr DebugLogF2 "~{DebugLogF1}"
  DefineStr DebugLogF3 "~{DebugLogF2}"
  <IfModule security2_module>
   DefineStr DebugLogF2 "~{DebugLogF1} ModSec: %{PERF_ALL}M"
  </IfModule>
  <IfModule crashstate_module>
   DefineStr DebugLogF3 "~{DebugLogF2} Crash: %{RequestFailer}n"
  </IfModule>
  LogFormat "~{DebugLogF3}" Debug

  CustomLog ~{AccessLog} ~{AccessLogType} env=!no-log
</IfModule>

# DefaultType: the default MIME type the server will use for a document
# if it cannot otherwise determine one, such as from filename extensions.
# If your server contains mostly text or HTML documents, "text/plain" is
# a good value.  If most of your content is binary, such as applications
# or images, you may want to use "application/octet-stream" instead to
# keep browsers from trying to display binary files as though they are
# text.
<IfModule mime_module>
 # TypesConfig points to the file containing the list of mappings from
 # filename extension to MIME-type.
 TypesConfig conf/common/mime.types

 # AddType allows you to add to or override the MIME configuration
 # file specified in TypesConfig for specific file types.
 AddType application/x-compress .Z
 AddType application/x-gzip .gz .tgz

 # AddEncoding allows you to have certain browsers uncompress
 # information on the fly. Note: Not all browsers support this.
 AddEncoding x-compress .Z
 AddEncoding x-gzip .gz .tgz
</IfModule>

# Modify normal HTTP response behaviour to handle known problems with client implementations
BrowserMatch "Mozilla/2" nokeepalive
BrowserMatch "MSIE 4[.]0b2;" nokeepalive downgrade-1.0 force-response-1.0
BrowserMatch "MSIE 6" downgrade-1.0 force-response-1.0
BrowserMatch "RealPlayer 4[.]0" force-response-1.0
BrowserMatch "(?:Java|JDK)/1[.]0" force-response-1.0
BrowserMatch "Microsoft Data Access Internet Publishing Provider" redirect-carefully
BrowserMatch "^Dreamweaver-WebDAV-SCM1" redirect-carefully
BrowserMatch "^gnome-vfs/1[.]0"         redirect-carefully
BrowserMatch "^WebDAVFS/1.[0123]"       redirect-carefully
BrowserMatch "^WebDrive"                redirect-carefully
BrowserMatch "^XML Spy"                 redirect-carefully
BrowserMatch "MS FrontPage"             redirect-carefully

setenv WAF_CONF_COMMON "~{WAF_CONF_COMMON}"

# timeout (s) after which gracefully shutdown server will exit (0 means never exit)
# Unix only
<IfModule !mpm_winnt_module>
 GracefulShutDownTimeout ~{BackendResponseTimeMax}
</IfModule>

# On some multiprocessor systems, memory-mapping can reduce the perf
EnableMMAP     off 

#AddDefaultCharset ISO-8859-1

# Wait up to X seconds for slow clients requests
TimeOut 30

# Internal paths
Include conf/common/rewrite.conf

# Include macros for all applications
Include conf/common/backend/*.conf
Include conf/common/dev/*.conf
Include conf/common/apps/*.conf
Use MSWebDavExceptions

use DebugSubst global_begin

# Include macros for all customer applications
IncludeOptional conf/company/apps/*.conf

# Ignore some substitutions
Use SubstIgnoreSomeSlashes

# compression config
Include conf/common/compress.conf

# HTTPS parameters
<IfModule ssl_module>
 Include conf/common/ssl.conf
</IfModule>

DocumentRoot ~{DocumentRoot}

<IfDefine Debug>
 Use Debug
</IfDefine>
<IfDefine DebugServer>
 Use DebugServer
 Define Debug 1
</IfDefine>

# For phase 1 rules setting exceptions
<IfDefine noSecurityRules>
 Use NoSecurityRules
</IfDefine>

# To overwrite defines in included files, load the file(s) a second time
Include         conf/site/params.conf
IncludeOptional conf/machin?/nod?.conf
# wildcard mandatory before 2.4.30
IncludeOptional conf/emergenc?/params*.conf
# Variables depending on params.conf
Include conf/common/defines2.conf

# Protocols accepted in all vhosts
Protocols ~{Protocols}

# Default HTTPS vhosts - must be before specific ones
<IfModule ssl_module>
 Use DefaultSSLVhost ~{DefaultSSLVhostPort}
</IfModule>

# Don't proxy local files
Use RootFilesLocal
Use RootFilesLocal_ "~{PathToIgnoreIntern}"

# Default HTTP vhosts - must be before specific ones
Use DefaultVhost ~{DefaultVhostPort}

# Troubleshooting counters
#Use SecRule IP:blocked "@gt %{TX.oldBlocked}" "phase:4,~{nosecaction},severity:ERROR"
#Use SecRule IP:blocked "@gt %{TX.oldBlocked}" "phase:5,~{log},tag:security,severity:ERROR,msg:'Counter increased from %{TX.oldblocked} to %{IP.blocked}'"

# For following requests
#Use SecRule ENV:WAF_USER "^(.{200})"              "phase:5,~{nosecaction},capture,setenv:WAF_USER=%{TX.1}"
Use SecRule ENV:WAF_USER "!@streq %{IP.LastUser}" "phase:5,~{nosecaction},setenv:WAF_USER=%{MATCHED_VAR},setvar:IP.LastUser=%{MATCHED_VAR}"
 
# Store counters in environment variables
Use SecAction "phase:5,~{nosecaction},setenv:ManagedIPBlocked=%{IP.blocked},setenv:ManagedIPBadAuth=%{IP.BadAuth},setenv:ManagedIPDoS=%{IP.dos},setenv:ManagedIPDoS=%{IP.dos}"

# Additional vhosts
Include conf/site/vhosts.conf

# Whitelisted IP are reset
Use SecResetIPCounter "~{IpToNotBlock}"

# Clean-up (global scope in case of blocking in phase 1)
Include conf/common/security/final5.conf
#Include conf/common/final2.conf

# Remove all security rules in same scope
<IfDefine noSecurityRules>
 Use NoSecurityRules 
 <LocationMatch ^>
  Use NoSecurityRules 
 </LocationMatch>
</IfDefine>

TraceEnable off

# --------------------- DEBUG ------------------------
Use DebugSubst global_end
<IfDefine EXTENDEDSTATUS>
 Use DebugPerf
 Warning Config almost loaded ...
</IfDefine>

<IfDefine DETECT>
 DefineStr SecRuleEngine DetectionOnly
</IfDefine>

<IfDefine ModStatus>
 <IfModule !status_module>
  LoadModule status_module modules/mod_status.so
 </IfModule>
 <Location "/_restricted/server-status">
  SetHandler server-status
 </Location>
</IfDefine>
