# Macros and rules defined for Keycloak
# Range: 4005000-4005099
# API description: https://www.keycloak.org/docs-api/21.1.1/rest-api/

DefineStr Keycloak-version 20240507

DefineStr KeyCloakAction "^[a-zA-Z]{0,255}$"
DefineStr KeyCloakAliasSyntax "[~{CharMin} ]{0,50}"
DefineStr KeyCloakBadAuth "You have entered an invalid login or password"
DefineStr KeyCloakRealmSyntax "[^/]+"
# KeyCloakAliasSyntax must be consistent with URL containing alias
DefineStr KeyCloakUserNameSyntax "~{OIDCUserNameSyntax}"

<Macro KeyCloak2OIDC $path>
 Use OpenIDCProvider "^$path/"

 # Don't remap query in URL (redirect_uri=...)
 Use NoRemapURLInQueryExt "^$path/"
 
 # Before OpenIDCProviderUrl to allow parameter before CheckWhiteListArgs in OpenIDCProviderUrl
 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/protocol/openid-connect/auth/?$>
  Use ArgGetWhiteList kc_idp_hint "^~{KeyCloakAliasSyntax}$"
  Use ArgGetWhiteList state       "~{AuthInternalRef_}"
 </LocationMatch>
 Use OpenIDCProviderUrl "^$path/realms/~{KeyCloakRealmSyntax}/protocol/openid-connect/auth/?$" \
                        "^$path/realms/~{KeyCloakRealmSyntax}/protocol/openid-connect/token/?$" \
                        "^$path/realms/~{KeyCloakRealmSyntax}/protocol/openid-connect/userinfo/?$"

 Use UTF8Encoding ^$path/
 
 <Location $path/>
  Use SecWebAppId Keycloak
  Setenv WAF_CONF_APP ~{Keycloak-version}
  Use PackageSoftware
  Use BackendWebWildfly
  Use DBH2
  Use ORM
  
  # Send chunked-encoded requests (no buffering when not needed)
  SetEnv proxy-sendchunks

  Use SetSession        "KEYCLOAK_SESSION(?:_LEGACY)?"
  Use CookieNotHttpOnly "KEYCLOAK_SESSION(?:_LEGACY)?"
  Use AcceptCookieRegex "AUTH_SESSION_ID(?:_LEGACY)?|KC_AUTH_STATE|KC_RESTART|KEYCLOAK_[~{CharMin}]{0,50}|OAuth_Token_Request_State"
  Use SanitizeCookie    "(?:AUTH_SESSION_ID|KEYCLOAK_IDENTITY)(?:_LEGACY)?"
  <IfModule auth_openidc_module>
###   OIDCPassCookies AUTH_SESSION_ID KEYCLOAK_IDENTITY AUTH_SESSION_ID_LEGACY KEYCLOAK_IDENTITY_LEGACY
  </IfModule>
  # These cookies are only used by browsers buggy with the samesite attribute
  Use RemoveCookieExt         AUTH_SESSION_ID_LEGACY    env=!nosamesite
  Use RemoveCookieExt         KEYCLOAK_IDENTITY_LEGACY  env=!nosamesite
  Use RemoveCookieExt         KEYCLOAK_SESSION_LEGACY   env=!nosamesite
  # Above lines usually not effective because we rewrite cookies
  Use SecRule ENV:nosamesite @unconditionalMatch "phase:2,t:none,tag:security,tag:specific,~{skipAfter}:AfterRemoveAllowedCookie"
   Use RemoveAllowedCookie     AUTH_SESSION_ID_LEGACY
   Use RemoveAllowedCookie     KEYCLOAK_IDENTITY_LEGACY
   Use RemoveAllowedCookie     KEYCLOAK_SESSION_LEGACY
  Use SecMarker AfterRemoveAllowedCookie,tag:security,tag:specific
  
  Use RemoveResponseCookieExt AUTH_SESSION_ID_LEGACY    env=!nosamesite
  Use RemoveResponseCookieExt KEYCLOAK_IDENTITY_LEGACY  env=!nosamesite
  Use RemoveResponseCookieExt KEYCLOAK_SESSION_LEGACY   env=!nosamesite

  Use SecAllowQueryInPost
  Use AllowJson

  # Accept all real algorithms (Keycloak is safe with RSA)
  Use JWTAlgo @unconditionalMatch
  
  Use DoNotRemapError 400
 </Location>

 # Some CSS /JS are on one line
 <IfModule substitute_module>
  <LocationMatch $path/.*[.](?:cs|j)s$>
   SubstituteMaxLineLength 4M
  </LocationMatch>
 </IfModule>

 <Location $path/realms/>
  Use ArgGetWhiteList lang     "^[a-zA-Z_]{0,5}$"
  Use ArgGetWhiteList version  "~{AuthInternalRef_}"
  
  #Use CSPallowInternalScript
  #Use CSPallowInternalStyle

  Use SanitizeArg client_secret
  Use SanitizeArg token
 </Location>

 # Initialisation --------------------------------------------------------------
 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/.well-known/openid-configuration$>
  Use PublicStaticConfigWithDot
  Use FilterSubstituteJSON 
 </LocationMatch>

 # Admin ---------------------------------------------------------------
 <LocationMatch ^$path(?:/?$|/admin)>
  # Allow /admin
  Use SecRuleRemoveById 2000184
  Use SecRestrictIpInternal
  Use AllowJson
  Use SecAllowExt "json"
  Use SecAllowTechnicalArgs
  Use SecUrlAllowChars " "
  Use SecArgNameAllowCharacter ":"
 </LocationMatch>
 # UI used by the admin interface
 <Location $path/admin/master/console>
  Use CSPallowInternalScript
  Use CSPallowInternalStyle
 </Location>

 <LocationMatch ^$path/admin/~{KeyCloakRealmSyntax}/console/config$>
  Use FilterSubstituteJSON 
 </LocationMatch>
 <LocationMatch ^$path/admin/~{KeyCloakRealmSyntax}/partialImport$>
  Use SecArgsJsonNbMax 4000
 </LocationMatch>
 <LocationMatch ^$path/admin/realms/~{KeyCloakRealmSyntax}/clients/~{AuthInternalRef__}/certificates/jwt[.]credential$>
  Use SecAllowAllExt
 </LocationMatch>

 <Location $path/(?:health|metrics|welcome)>
  Use SecRestrictIpInternal
  Use AllowAutomatedTools
 </Location>

 # Protocol extensions ---------------------------------------------------------
 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/protocol/openid-connect/certs$>
  Use SecStaticPages
 </LocationMatch>

 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/protocol/openid-connect/login-status-iframe.html(?:/init)?$>
  Use SecAllowDotInUrl
  Use ArgGetWhiteList  client_id    "~{AuthInternalRef_}"
  Use ArgGetWhiteList  version      "^[0-9a-z.]*"
  <If "'%{HTTPS}' == 'on'">
   Use ArgGetWhiteList  origin      "^~{syntax_URL_https_Query}$"
  </If>
  <Else>
   Use ArgGetWhiteList  origin      "^~{syntax_URL_Query}$"
  </Else>
 </LocationMatch>

 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/protocol/openid-connect/logout$>
  Use SecAllowBase64
  Use ArgGetWhiteList client_id                 "~{AuthInternalRef_}"
  Use ArgGetWhiteList id_token_hint             "~{JWTToken_}"
  Use ArgGetWhiteList sid                       "~{AuthUUID_}"
  # Normal case (HTTPS)
  <If "'%{HTTPS}' == 'on'">
   Use ArgGetWhiteList post_logout_redirect_uri "^~{syntax_URL_https_Query}$"
   Use ArgWhiteList    redirect_uri             "^~{syntax_URL_https_Query}$"
  </If>
  # Test environment (HTTP)
  <Else>
   Use ArgGetWhiteList post_logout_redirect_uri "^~{syntax_URL_Query}$"
   Use ArgWhiteList    redirect_uri             "^~{syntax_URL_Query}$"
   Use CSPAllowMixedContent
  </Else>
 </LocationMatch>

 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/protocol/openid-connect/logout/logout-confirm$>
  Use ArgWhiteList client_id     "~{AuthInternalRef_}"
  Use ArgWhiteList confirmLogout "~{KeyCloakAction}"
  Use ArgWhiteList session_code  "~{AuthUUID_}"
  Use ArgWhiteList tab_id        "~{AuthUUID_}"
 </LocationMatch>

 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/protocol/openid-connect/revoke$>
  Use AllowAutomatedTools
  Use ArgWhiteList     client_id       "~{AuthInternalRef_}"
  Use ArgPostWhiteList client_secret   "~{AuthInternalRef_}"
  Use ArgWhiteList     token           "~{JWTToken_}"
  Use ArgWhiteList     token_type_hint "~{OAuthTokenType}"
 </LocationMatch>

 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/protocol/openid-connect/token/?$>
  Use ArgGetWhiteList session_code "~{AuthUUID_}"
  # Password check on /token (grant_type=password)
  Use SecBadAuth "~{KeyCloakBadAuth}"
 </LocationMatch>

 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/protocol/openid-connect/token/>
  Use AllowAutomatedTools
 </LocationMatch>

 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/protocol/openid-connect/token/introspect$>
  Use SecAllowBase64
  Use AllowAutomatedTools
  # client_id & client_secret may be sent in the Authorization header => not mandatory
  Use ArgPostWhiteList    client_id       "~{AuthInternalRef_}"
  Use ArgPostWhiteList    client_secret   "~{AuthInternalRef_}"
  Use ArgPostWhiteListExt token           "~{AuthToken_}"       1 1
  Use ArgPostWhiteList    token_type_hint ~{OAuthTokenType}
 </LocationMatch>

 # Password check, reset, ... --------------------------------------------------
 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/login-actions/>
  Use SecAllowBase64
  Use ArgGetWhiteList     auth_session_id  "^[a-zA-Z0-9-_]*$"
  Use ArgGetWhiteList     client_id        "~{AuthInternalRef_}"
  Use ArgGetWhiteList     execution        "~{AuthUUID_}"
  Use ArgGetWhiteList     kc_idp_hint      "^~{KeyCloakAliasSyntax}$"
  Use ArgGetWhiteList     kc_locale        "^[a-zA-Z-]{0,5}"
  Use ArgGetWhiteList     key              "~{JWTToken_}"
  Use ArgGetWhiteList     skip_logout      "^(?:false|true)$"
  Use ArgPostWhiteList    back             "~{KeyCloakAction}"
  Use ArgPostWhiteList    cancel           "~{KeyCloakAction}"
  Use ArgPostWhiteList    credentialId     "~{AuthUUID_}"
  Use ArgPostWhiteList    email            "^~{syntax_email}$"
  Use ArgPostWhiteList    firstName        "^[~{CharName}]{0,255}$"
  Use ArgPostWhiteList    g-recaptcha-response "^[a-zA-Z0-9-_]*"
  Use ArgPostWhiteList    lastName         "^[~{CharName}]{0,255}$"
  # "Log In" in English, "Connexion" in French => all letters, etc. (+ accents?)
  Use ArgGetWhiteList     session_code     "~{AuthUUID_}"
  Use ArgGetWhiteList     tab_id           "~{AuthUUID_}"
  Use ArgPostWhiteList    login            "^[-a-zA-Z .~{UTF8Letters}]{0,50}$"
  Use ArgPostWhiteList    logout-sessions  "^(?i)o(?:n|off)$"
  Use ArgPostWhiteList    /^t?otp$/        "^[0-9]{0,8}$"
  Use ArgPostWhiteList    /^t?otpSecret$/  "^~{syntax_base64}$"
  Use ArgPostWhiteList    userLabel        "^[~{CharNormal}]{0,255}$"
  Use ArgPostWhiteList    password         "^[~{CharPassword}]{0,~{PasswordLengthMax}}$"
  Use ArgPostWhiteList    password-new     "^[~{CharPassword}]{0,~{PasswordLengthMax}}$"
  Use ArgPostWhiteList    password-confirm "^[~{CharPassword}]{0,~{PasswordLengthMax}}$"
  Use ArgPostWhiteList    rememberMe       "^(?i:off|on)$"
  Use WhiteListUsername 2 ARGS_POST username "~{KeyCloakUserNameSyntax}"
  Use SecBadAuth "~{KeyCloakBadAuth}"
 </LocationMatch>

 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/broker/(?:[^/]+/|after-first-broker-)login$>
  Use ArgGetWhiteListExt  client_id    "~{AuthInternalRef_}" 1 1
  Use ArgGetWhiteList     session_code "~{AuthUUID_}"
  Use ArgGetWhiteList     tab_id       "~{AuthUUID_}"
 </LocationMatch>

 # Authorization code (after authentication done by another OIDC server)
 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/broker/[^/]+/endpoint>
  Use OpenIDCRP
  Use AllowAutomatedTools
 </LocationMatch>

 # Self-care (account info modification)
 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/account>
  Use SecAllowBase64
  Use ArgGetWhiteList     code             "~{AuthToken_}"
  Use ArgGetWhiteList     kc_locale        "^[a-zA-Z-]{0,5}$"
  Use ArgPostWhiteList    action           "^[a-zA-Z-]{0,20}$"
  Use ArgPostWhiteList    credentialId     "~{AuthUUID_}"
  Use ArgPostWhiteList    email            "^~{syntax_email}$"
  Use ArgPostWhiteList    firstName        "^[~{CharNormal}]{0,255}$"
  Use ArgPostWhiteList    lastName         "^[~{CharNormal}]{0,255}$"
  Use ArgPostWhiteList    password         "^[~{CharPassword}]{0,~{PasswordLengthMax}}$"
  Use ArgPostWhiteList    password-confirm "^[~{CharPassword}]{0,~{PasswordLengthMax}}$"
  Use ArgPostWhiteList    password-new     "^[~{CharPassword}]{0,~{PasswordLengthMax}}$"
  Use ArgGetWhiteList     path             "^[a-zA-Z-]{0,20}$"
  Use ArgPostWhiteList    providerId       "^~{KeyCloakAliasSyntax}$"
  Use ArgGetWhiteList     referrer         "^[a-zA-Z-]{0,30}$"
  Use ArgGetWhiteList     referrer_uri     "^~{syntax_URL_https_Query}$"
  Use ArgGetWhiteList     session_state    "~{AuthInternalRef_}"
  Use ArgGetWhiteList     state            "~{AuthInternalRef_}"
  Use ArgPostWhiteList    stateChecker     "~{AuthInternalRef_}"
  Use ArgPostWhiteList    /^t?otp$/        "^[0-9]{0,8}$"
  Use ArgPostWhiteList    /^t?otpSecret$/  "^~{syntax_base64}$"
  Use ArgPostWhiteList    userLabel        "^[~{CharNormal}]{0,255}$"
  Use WhiteListUsername 2 ARGS_POST username "~{KeyCloakUserNameSyntax}"
</LocationMatch>

 <LocationMatch ^$path/realms/~{KeyCloakRealmSyntax}/login-redirect>
  Use SecAllowBase64
  Use ArgGetWhiteList     code             "~{AuthToken_}"
  Use ArgGetWhiteList     error            "^[-a-zA-Z0-9 :._]{0,100}$"
  Use ArgGetWhiteList     path             "^[a-zA-Z-]{0,20}$"
  Use ArgGetWhiteList     referrer         "^[a-zA-Z-]{0,30}$"
  Use ArgGetWhiteList     state            "~{AuthInternalRef_}"
</LocationMatch>

 # For the whole application
 <Location $path/realms/>
  Use ArgPostWhiteList    submitAction     "^[a-zA-Z-]{0,20}$"
  Use CheckWhiteListArgs
 </Location>

 <Location $path/resources>
  Use SecUrlAllowChars "@"
 </Location>
</Macro>

<Macro KeyCloakOIDC>
 Use KeyCloak2OIDC "/auth"
 <Location /auth>
  Use RemapUrl
 </Location>
</Macro>

<Macro KeyCloak2OIDCTestHttpPartners $path>
 <Location $path/realms>
  Use ArgGetWhiteList post_logout_redirect_uri "^~{syntax_URL_Query}$"
  Use ArgWhiteList    redirect_uri             "^~{syntax_URL_Query}$"
  Use CheckWhiteListArgs
  Use CSPAllowMixedContent
 </Location>
</Macro>
<Macro KeyCloakOIDCTestHttpPartners>
 Use KeyCloak2OIDCTestHttpPartners /auth
</Macro>

<Macro KeyCloak2OIDCRealms $realms $path>
 Use SecRuleRemoveById 4005001
 Use SecRuleUrlPhase1 "^$path/realms/(?!(?:$realms)(?:/|$))" 4005001 "msg:'This realm is not allowed'"
</Macro>
<Macro KeyCloakOIDCRealms @realms>
 Use KeyCloak2OIDCRealms  @realms /auth
</Macro>

<Macro KeyCloak2OIDCMetadataURL $proto $server $port $path $realm>
 <IfModule auth_openidc_module>
  OIDCProviderMetadataURL $proto://$server:$port$path/realms/$realm/.well-known/openid-configuration
 </IfModule>
</Macro>
<Macro KeyCloakOIDCMetadataURL $proto $server $port       $realm>
 Use KeyCloak2OIDCMetadataURL  $proto $server $port /auth $realm
</Macro>

<Macro KeyCloak2AdminIP @ip $path>
 <LocationMatch ^$path(?:/?$|/admin)>
  Use SecRestrictIp @ip
 </LocationMatch>
</Macro>
<Macro KeyCloakAdminIP @ip>
 Use KeyCloak2AdminIP  @ip /auth
</Macro>
<Macro KeyCloak2HealthIP @ip $path>
 <LocationMatch ^$path/health>
  Use SecRestrictIp @ip
 </LocationMatch>
</Macro>
<Macro KeyCloak2MetricsIP @ip $path>
 <LocationMatch ^$path/metrics>
  Use SecRestrictIp @ip
 </LocationMatch>
</Macro>

