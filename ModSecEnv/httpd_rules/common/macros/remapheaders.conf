# :: Macros: Remap URL in headers

<Macro RemapURLinHeaders>
 Use Setenv remapUrl 1
</Macro>

<Macro NoRemapURLinHeaders>
 Use UnSetenv remapUrl
 Use AllowInternalIpInLocationHeader
</Macro>

<Macro NoRemapLocalHost>
 Use Setenv noRemapLocalhost 1
 Use TrustHostPhase localhost 2
</Macro>
<Macro RemapLocalHost>
 Use UnSetenv noRemapLocalhost
</Macro>

# :: Change path in HTTP header sent to server
<Macro FixRequestHeaderPathEnv $header $frontServer $frontPort $frontPath $http $backServer $backPort $backPath $env>
 <IfDefine !noHeaderChange>
  # Ports 80/443 are optional for back-end
  <If "$frontPort -eq 80 || $frontPort -eq 443">
   RequestHeader edit* $header "~{encodedHttpx}(?:$frontServer~{EndOfFQDN})(?::$frontPort)?$frontPath" "$http://--NOURLSUBST--$backServer:$backPort--NOURLSUBST--$backPath" env=$env
  </If>
  <Else>
   RequestHeader edit* $header "~{encodedHttpx}(?:$frontServer~{EndOfFQDN}):$frontPort$frontPath"      "$http://--NOURLSUBST--$backServer:$backPort--NOURLSUBST--$backPath" env=$env
  </Else>
 </IfDefine>
 # Because others use <If>
 <If "true">
  RequestHeader edit* $header ":(?:80|443)(?=--NOURLSUBST--|/|$)" "" env=$env
 </If>
</Macro>
<Macro FixRequestHeaderPath  $header $frontServer $frontPort @frontPath $http $backServer $backPort @backPath>
 Use FixRequestHeaderPathEnv $header $frontServer $frontPort @frontPath $http $backServer $backPort @backPath remapUrl
</Macro>
<Macro FixRequestHeaderPathToRelative $header $frontServer $frontPort $frontPath $backPath>
 <IfDefine !noHeaderChange>
  <If "$frontPort -eq 80 || $frontPort -eq 443">
   RequestHeader edit* $header "~{encodedHttpx}(?:$frontServer~{EndOfFQDN})(?::$frontPort)?" "" env=remapUrl
  </If>
  <Else>
   RequestHeader edit* $header "~{encodedHttpx}(?:$frontServer~{EndOfFQDN}):$frontPort"      "" env=remapUrl
  </Else>
  <If "'$frontPath' != '$backPath'">
   <If "'$frontPath' == ''">
    RequestHeader edit* $header "^/"                  "--NOURLSUBST--$backPath/--NOURLSUBST--"    env=remapUrl
   </If>
   <Else>
    RequestHeader edit* $header "^$frontPath(?=/|$)"  "--NOURLSUBST--$backPath--NOURLSUBST--"     env=remapUrl
   </Else>
  </If>
 </IfDefine>
</Macro>
<Macro FixRequestHeaderPathToAbsolute $header @frontPath $http $backServer $backPort>
 Use UnusedParam @frontPath
 <IfDefine !noHeaderChange>
  # Because FixRequestHeaderPathToRelative also uses <If>
  <If "true">
   <If "true">
    RequestHeader edit* $header "^(?:--NOURLSUBST--)?/" "$http://$backServer:$backPort/"                       env=remapUrl
    RequestHeader edit* $header "^$http://$backServer:(?:80|443)/"  "$http://$backServer/"  env=remapUrl
   </If>
  </If>
 </IfDefine>
</Macro>

# :: Change path in HTTP header sent by server
# Doesn't work for auth_openidc_module (runs after mod_headers)
<Macro SubstResponseHeaderPathRaw @header      $from  @to @cond>
 <IfDefine !noHeaderChange>
  Header                     edit* @header "(?i)$from" @to @cond
 </IfDefine>
</Macro>
<Macro SubstResponseHeadersPathRaw @from @to @cond>
 Use SubstResponseHeaderPathRaw access-control-allow-origin    @from @to @cond
 Use SubstResponseHeaderPathRaw Content-Location               @from @to @cond
 Use SubstResponseHeaderPathRaw Location                       @from @to @cond
 Use SubstResponseHeaderPathRaw URI                            @from @to @cond
 # Sharepoint
 Use SubstResponseHeaderPathRaw X-Forms_Based_Auth_Required    @from @to @cond
 Use SubstResponseHeaderPathRaw X-Forms_Based_Auth_Return_Url  @from @to @cond
 # Remove path incorrectly set during substitution
 Header edit access-control-allow-origin "(https?://[^/]+).*" "$1" @cond
</Macro>
<Macro SubstResponseHeadersPath_ $from @to @cond>
 Use SubstResponseHeadersPathRaw "$from(?=~{AbsUrlEnd})" @to @cond
</Macro>
<Macro SubstResponseHeadersPathCond $from $to @cond>
 Use SubstResponseHeadersPath_  "(?<!--NOURLSUBST--)$from" "--NOURLSUBST--$to" @cond
</Macro>
<Macro SubstResponseHeadersPath   @from @to>
 Use SubstResponseHeadersPathCond @from @to env=remapUrl
</Macro>
<Macro SubstResponseHeadersPathAllowNext $from @to @cond>
 Use SubstResponseHeadersPath_  "(?<!--NOURLSUBST--)$from"  @to @cond
</Macro>

# :: Change path in HTTP header sent by server
<Macro FixResponseHeadersPath__   @from $http $frontServer $frontPort $frontPath @cond>
 Use SubstResponseHeadersPathCond @from "$http://--NOURLSUBST--$frontServer:$frontPort--NOURLSUBST--$frontPath" @cond 
</Macro>

# :: Change path in HTTP header sent by server
<Macro FixResponseHeadersPath_ $http $frontServer $frontPort $frontPath $back @cond>
 Use FixResponseHeadersPath__ "~{encodedHttpx}$back" $http $frontServer $frontPort "$frontPath" @cond
</Macro>

# :: Change path in HTTP header sent by server
<Macro FixResponseHeadersPath $http $frontServer $frontPort $frontPath $backServer $backPort $backPath>
 # Doesn't work (yet)
 #Use FixResponseHeadersPath__  "%{WORKER_NAME}e" $http "$frontServer" "$frontPort" "$frontPath"
 <If "$backPort -eq 80 || $backPort -eq 443">
  Use FixResponseHeadersPath__ "~{encodedHttpx}$backServer~{EndOfFQDN}(?::$backPort)?$backPath" $http "$frontServer" "$frontPort" "$frontPath" env=remapUrl
 </If>
 <Else>
  Use FixResponseHeadersPath_  $http "$frontServer" $frontPort "$frontPath" "$backServer:$backPort$backPath" env=remapUrl
 </Else>
 Use SubstResponseHeadersPathAllowNext ":(?:80|443)" "" env=remapUrl
 <Location $frontPath/>
  # if back-end path not empty
  <If "'$backPath' != ''">
   Use SubstResponseHeadersPathCond "(^|=)$backPath(?=~{AbsUrlEnd})" "$1--NOURLSUBST--$frontPath" env=remapUrl
  </If>
  # if back-end path empty
  <Else>
   Use SubstResponseHeadersPathRaw  "(^|=)/" "$1--NOURLSUBST--$frontPath--NOURLSUBST--/" env=remapUrl
  </Else>
  # fix back-end port with front server
  # Because others use <If>
  <If "true">
   Use SubstResponseHeadersPathCond "~{encodedHttpx}(?:$frontServer|~{AdditionalServerNames})~{EndOfFQDN}(?::$backPort)?$backPath" "$http$1--NOURLSUBST--$frontServer--NOURLSUBST--$frontPath" env=remapUrl
  </If>
  <If "$backPort -eq 80 || $backPort -eq 443">
   Use SubstResponseHeadersPathCond "~{encodedHttpx}~{LocalHostRegex}(?::$backPort)?$backPath" "$http$1--NOURLSUBST--$frontServer--NOURLSUBST--$frontPath" "expr=reqenv('remapUrl') != '' && reqenv('noRemapLocalhost') == ''"
  </If>
  <Else>
   Use SubstResponseHeadersPathCond "~{encodedHttpx}~{LocalHostRegex}:$backPort$backPath"      "$http$1--NOURLSUBST--$frontServer--NOURLSUBST--$frontPath" "expr=reqenv('remapUrl') != '' && reqenv('noRemapLocalhost') == ''"
  </Else>
 </Location>
</Macro>

# :: Change host in HTTP header sent by server
<Macro FixResponseHeadersHost $http $frontServer $frontPort $frontPath $backServer>
  Use FixResponseHeadersPath_ $http $frontServer $frontPort $frontPath "$backServer(?::[0-9]+)?"
</Macro>

<Macro ForceResponseHeaderPathAbsolute @header $http>
 <IfDefine !noHeaderChange>
  Header edit @header "^/+"  "$http://%{HOST}e/"
 </IfDefine>
</Macro>

# :: Change path in HTTP headers sent from/to server
<Macro FixHeadersPath @frontHttp @frontServer @frontPort @frontPath @backHttp @backServer @backPort @backPath>
# Use FixRequestHeaderPathEnv         Referer        @frontServer @frontPort @frontPath @backHttp @backServer @backPort @backPath remapOrigin
# Use FixRequestHeaderPathEnv         Origin         @frontServer @frontPort "$"        @backHttp @backServer @backPort ""        remapOrigin
 Use FixRequestHeaderPathToRelative  Authorization  @frontServer @frontPort @frontPath @backPath
 Use FixRequestHeaderPathToRelative  X-MS-ENUMATTS  @frontServer @frontPort @frontPath @backPath
 Use FixRequestHeaderPathToRelative  Destination    @frontServer @frontPort @frontPath @backPath
 Use UnusedParam @backHttp
 #Use FixRequestHeaderPathToAbsolute  Destination    @frontPath @backHttp @backServer @backPort

 Use FixResponseHeadersPath @frontHttp @frontServer @frontPort @frontPath @backServer @backPort @backPath
</Macro>

<Macro IgnoreCookiePath>
 Use SetEnv ignoreCookiePath 1
</Macro>

# :: Change path in HTTP header received from server
<Macro FixServerCookiePath $backPath $frontPath>
 <IfDefine !noCookieRewrite>
  <If "'$frontPath' != '$backPath'">
   Use HeaderAlways2 edit Set-Cookie "^((?<!_acl|waf_|__ut).*);\s*+(?i:Path=$backPath)(?=/?[^;\n]*(?:;|\n|$))"  "$1; Path--NOURLSUBST--=--NOURLSUBST--$frontPath"   env=!ignoreCookiePath
  </If>
  Use HeaderAlways2 edit Set-Cookie  "^((?<!_acl|waf_|__ut).*);\s*+(?i:Path)=/\s*+(?=;|\n|$)"                     "$1; Path--NOURLSUBST--=--NOURLSUBST--$frontPath/"  env=!ignoreCookiePath
  # https://tools.ietf.org/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2
  # Change path to root
  Use HeaderAlways1 edit Set-Cookie "^(?i:__Host-.*;\s*+Path=/)[^ ;]+"  "$1; secure"
  # remove domain
  Use HeaderAlways1 edit Set-Cookie "^(?i:__Host-.*);\s*+Domain=[^ ;]*" "$1"
 </IfDefine>
</Macro>

# :: Delete domain in HTTP header received from server
<Macro FixServerCookieDomain>
 <IfDefine !noCookieRewrite>
  Use HeaderAlways2 edit Set-Cookie ";\s*+(?i:domain=[^;]*)"  ""   env=!ignoreCookiePath
 </IfDefine>
</Macro>

# :: Do not enforce "httponly/secure" cookie
<Macro CookieNot_ $cookie $disallow>
 <IfDefine !noCookieRewrite>
  # RFC 6265: only one cookie per header
  Use HeaderAlways1 edit Set-Cookie "(?i)^($cookie\s*+=.*)[;,]\s*+$disallow\b"  "$1"
 </IfDefine>
</Macro>

# :: Do not enforce "secure" cookie
<Macro CookieNotSecure @cookie>
 Use CookieNot_ @cookie secure
</Macro>

# :: Do not enforce "HttpOnly" cookie
<Macro CookieNotHttpOnly $cookie>
 Use CookieNot_          $cookie httponly
 <IfDefine ExtendedInfo>
  Use SecRule TX:cookieNotHttponly "^(.*,)?(?i)$cookie(,.*)$" "phase:3,t:none,~{nosecaction},capture,setvar:tx.cookieNotHttponly=%{tx.1}%{tx.2}
 </IfDefine>
</Macro>
