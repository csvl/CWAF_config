# :: Macros: Rules related to file upload/download
# -------------------------------------------------------------
# Range: 2200000-2200099

# Syntax: list of extensions, like "ext1,ext2"
<Macro SecAllowDownFileExt $ext>
 Use SecAction  "phase:2,~{nosecaction},setvar:'TX.allowed_downfileext=,%{TX.allowed_downfileext},$ext,'"
</Macro>

# :: Allow all file extensions
<Macro SecAllowAllDownFileExt>
 Use SecAction  "phase:2,~{nosecaction},tag:security,ctl:ruleRemoveById=4002204"
</Macro>
<Macro SecAllowAllDownloadExt>
 Use SecAllowAllDownFileExt
</Macro>

# :: Syntax of upload filenames -----------------------------------------------
 
# Block too many upload files
<Macro SecUploadFileLimit $opt>
 <IfModule security2_module>
  # set MULTIPART_FILE_LIMIT_EXCEEDED
  SecUploadFileLimit $opt
  # This counts the number of ARGS in multipart-encoded forms => too generic?
  Use SecRuleRemoveByID 2200001
  Use SecRuleDeny &FILES "@gt $opt" "phase:2,t:none,id:2200001,ctl:auditLogParts=+IJ,~{status}:413,msg:'Multipart request error: too many files'"
 </IfModule>
</Macro>

# Block upload filename
<Macro SecRuleUpFile_ $pattern $id $action>
 <IfDefine !noSecurityRules>
  Use SecRuleDeny TX:uploadfname  "$pattern"  "phase:2,t:none,t:urlDecode,setenv:upfn=%{TX.uploadfname},~{badUploadMsg},id:$id,$action"
  Use SecRuleDeny FILES           "$pattern"  "phase:2,t:none,t:removePath,setenv:upfn=%{MATCHED_VAR},~{badUploadMsg},id:$id,$action"
 </IfDefine>
 <IfDefine noSecurityRules>
  Use UnusedParam "$pattern $id $action"
 </IfDefine>
</Macro>
<Macro SecRuleUpFile @pattern @id>
 Use SecRuleUpFile_  @pattern @id ""
</Macro>

# :: Allow some file extensions for upload files
#    Syntax: list of extensions, like "ext1,ext2,ext3"
# Warning: this only works if one file; if several ones, this is too permissive
<Macro SecAllowUpFileExt $ext>
 Use SecAction  "phase:2,~{nosecaction},setvar:'TX.allowed_upfileext=,%{TX.allowed_upfileext},$ext,'"
</Macro>
<Macro SecVhostAllowUpFileExt @host $ext>
 Use SecRule REQUEST_HEADERS:Host @host "phase:2,~{nosecaction},setvar:'TX.allowed_upfileext=,%{TX.allowed_upfileext},$ext,'"
</Macro>

<Macro SecAllowUpNoFileExt>
 Use SecRuleRemoveByID 2200005
 Use SecAction "phase:2,~{nosecaction},t:none,tag:security,ctl:ruleRemoveById=2200005"
</Macro>

# Allow all upload filenames
<Macro SecAllowAllUpFileExt>
 Use SecRuleRemoveByID 2002306,2200004,2200005
 Use SecAllowUpNoFileExt
 Use SecAction "phase:2,~{nosecaction},tag:security,t:none,ctl:ruleRemoveById=2200004,ctl:ruleRemoveById=2200005"
</Macro>

# Allow upload of SVG files
<Macro SecAllowSVGUpLoad>
 Use SecRuleRemoveByID 2002306,2002308
</Macro>

# :: Allow Office files with macros
<Macro SecAllowMacroDocFiles>
 Use SecAllowExt        ~{MacroDocFileExt}
 Use SecAllowUpFileExt  ~{MacroDocFileExtCD}
</Macro>

<Macro SecAllowUpEmptyFileName>
 Use Warning "SecAllowUpEmptyFileName is obsolete (no more needed, remove it)"
</Macro>

<Macro SecAllowUpFileNameLength $length>
 Use SecRuleRemoveByID 2200002
 Use SecRuleUpFile  "@gt $length"  "2200002,t:length,msg:'File name too long'"
</Macro>

# :: Allow character set in uploaded filenames
#    Syntax: list or range of characters numbers
<Macro SecAllowUpChars_ $set $id>
 Use SecRuleUpFile  "[^$set~{CharFilename}]"  "$id,msg:'Invalid character in upload file name'"
</Macro>
<Macro SecAllowAllUpChars>
 Use SecRuleRemoveByID 2200003,2002307
</Macro>
<Macro SecAllowUpChars @set>
 Use SecRuleRemoveByID 2200003
 Use SecAllowUpChars_ @set 2200003
</Macro>
# Obsolete (kept for backward compatibility)
<Macro SecAllowCharsetUp @set>
 Use SecAllowUpChars @set
</Macro>

<Macro SecAllowUpMultipleExt>
 Use SecRuleRemoveByID 2002301
</Macro>

<Macro SecAllowAllUpFilenames>
 Use SecAllowAllUpChars
 Use SecAllowUpNoFileExt
 Use SecAllowAllUpFileExt
 Use SecRuleRemoveByID 2002301,2002304
 # 2002304 => beginning with dot
</Macro>

# Not usable inside a location
<Macro SecAllowCharsInUpDownDocs $chars>
 Use SecAllowCharsInBasenameExt "$chars~{CharFilename}" "~{DocFileExt}"
 Use SecAllowUpChars "$chars"
</Macro>

# Not usable inside a location
<Macro SecAllowAllCharsInUpDownDocs>
 Use SecAllowAllCharsInBasenameExt "~{DocFileExt}"
 Use SecAllowAllUpFilenames
</Macro>

<Macro SecAllowMultipleExtInUpDownDocs>
 Use SecAllowUpMultipleExt
 Use SecAllowMultipleExtInUrl
</Macro>

<Macro SecAllowPlusInUpDocs>
 Use SecRuleRemoveByID 2002307
</Macro>

<Macro SecAllowPlusInUpDownDocs>
 Use SecUrlAllowPlus
 Use SecAllowPlusInUpDocs
 #Use SecAllowQueryInPost
</Macro>

<Macro SecAllowUpDownFileExt @ext>
 Use SecAllowUpFileExt   @ext
 Use SecAllowDownFileExt @ext
</Macro>

<Macro ForceDownload $ext>
 Use SecRule TX:BASENAME "[.](?i:$ext)$" "phase:2,~{nosecaction},t:none,setenv:ForceDownload=%{MATCHED_VAR}"
 Header set Content-disposition "attachment; filename=\"%{ForceDownload}e\"" env=ForceDownload
</Macro>

<Macro CheckUpFileExt__ @target $id>
# Use SecRule @target     "!^(?i:~{UsualFileExt}|~{ArchiveFileExt}|xml)$"  "phase:2,id:$id,t:none,t:fileExt,t:lowercase,~{nosecaction},setvar:TX.badUpExt,setvar:TX.upext=%{MATCHED_VAR}"
# Use SecRule @target     "@within %{TX.allowed_upfileext}"                "phase:2,id:$id,t:none,t:fileExt,t:lowercase,~{nosecaction},setvar:!TX.badUpExt"
# Use SecRuleDeny TX:badUpExt @unconditionalMatch                          "phase:2,id:$id,t:none,setenv:upfn=%{MATCHED_VAR},~{badUploadMsg},msg:'Upload filename extension not allowed <%{TX.upext}>'"
 Use SecAction                                                             "phase:2,id:$id,~{nosecaction},setvar:!TX.upext"
 Use SecRule @target     "!^(?i:~{UsualFileExt}|~{ArchiveFileExt}|xml)$"   "phase:2,id:$id,~{nosecaction},chain,t:none,t:fileExt,t:lowercase"
  Use SecRule MATCHED_VARS  "!@within %{TX.allowed_upfileext}"    "t:none,setenv:upfn=%{MATCHED_VAR}"
</Macro>
<Macro CheckUpFileExt_ @target $id1 $id2>
 Use SecAction  "phase:2,id:$id1,~{nosecaction},setvar:!TX.badUpExt,setenv:!upfn"
 Use CheckUpFileExt__ @target $id1
 Use SecRule @target "^[^.]+$"  "phase:2,t:none,id:$id2,~{nosecaction},setenv:!upfn"
 #Use SecRuleDeny @target "^[^.]+$"  "phase:2,t:none,id:$id2,setenv:upfn=%{MATCHED_VAR},~{badUploadMsg},msg:'Upload filename without extension not allowed <%{MATCHED}>'"
</Macro>
<Macro CheckUpFilesExt_>
 Use SecRuleRemoveById              2200004
 Use SecRuleRemoveById                      2200005
 Use CheckUpFileExt_ TX:uploadfname 2200004 2200005
 Use CheckUpFileExt_ FILES          2200004 2200005
 Use SecRuleDeny ENV:upfn "@unconditionalMatch"     "id:2200004,t:none,~{badUploadMsg},msg:'Upload filename extension not allowed <%{ENV.upfn}>'"
</Macro>

# Block PDF containing JS (can be very slow)
<Macro BlockJSinPDF>
 Use SecStreamInBodyInspection On
 # /OpenAction and /AA specify the script or action to run automatically 
 # /JavaScript, /JS, /AcroForm, and /XFA can specify JavaScript to run 
 # Any character may be hexencoded: #xx
 Use SecRuleDeny STREAM_INPUT_BODY "^%PDF-.*<<[^>]*/(?:AA|[a-zA-Z]*Action)\b"   "t:none,tag:Upload"
 #Use SecRuleDeny STREAM_INPUT_BODY "^%PDF-.*<<[^>]*/J(?:S|avaScript)\b" "t:none,tag:Upload"
</Macro>

