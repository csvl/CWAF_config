# :: Macros: Rules related to IP blocking & DoS
# Range: 2000030-2000045

# DoS detection:
#   $minNb = number of requests before effective
#   update_rate = average rate updates per minute since creation
<Macro SecReqMaxRateExt @rate @target $cond>
 Use NotInsideLocation
 <IfDefine !noSecurityRules>
  Use SecRule @target "$cond"   "phase:1,t:none,tag:security,~{skipAfter}:EndSecReqMaxRate"
  Use SecReqMaxRate ~{DoSConnectionRate}
  Use SecRule @target "!$cond"  "phase:1,t:none,tag:security,~{skipAfter}:EndSecReqMaxRate"
  Use SecReqMaxRate @rate
 </IfDefine>
</Macro>

<Macro SecReqMaxRate_ $phase $rate $minNb>
 <IfDefine !noSecurityRules>
  Use SecRule IP:update_counter "@lt $minNb"   "phase:$phase,id:2000040,tag:security,~{skipAfter}:EndSecReqMaxRate"
  Use SecRule IP:update_rate    "@lt $rate"    "phase:$phase,id:2000040,tag:security,~{skipAfter}:EndSecReqMaxRate"
   # Log max nb
   Use SecRule IP:update_rate    "@gt %{GLOBAL.max_update_rate}"    "phase:$phase,id:2000040,tag:security,tag:logging,~{log},setvar:GLOBAL.max_update_rate=%{IP.update_rate},msg:'Global max req rate: %{GLOBAL.max_update_rate}/min'"
   # > allowed
   Use SecAction  "phase:$phase,id:2000040,~{increaseBlockCounter},setvar:IP.dos=+1,setvar:TX.dos_counter,~{drop},msg:'Too many requests (possible DoS Attack)',tag:DoS"
  Use SecMarker EndSecReqMaxRate,tag:security
 </IfDefine>
</Macro>
<Macro SecReqMaxRate @rate>
 Use SecRuleRemoveByID 2000040
 Use SecReqMaxRate_ 1 @rate ~{DoSConnectionNb}
</Macro>

<Macro SecReqMaxRateUA @rate @ua>
 Use SecReqMaxRateExt @rate REQUEST_HEADERS:User-Agent @ua @rate
</Macro>

# Reset IP counter
<Macro SecResetIPCounter_ @pattern $action>
 <IfDefine !noSecurityRules>
  <IfDefine !NoResetCounter>
   Use SecRule ENV:ManagedIP @unconditionalMatch "phase:5,t:none,tag:security,~{skipAfter}:AfterIP"
    Use SecRuleIp  @pattern                      "phase:5,t:none,tag:security,~{nosecaction},setvar:IP.TIMEOUT=0,expirevar:IP.KEY=0,$action"
   Use SecMarker AfterIP,tag:security
  </IfDefine>
 </IfDefine>
</Macro>
<Macro SecResetIPCounter @pattern>
 Use SecResetIPCounter_  @pattern ""
</Macro>

<Macro DeprecCounter_ $id $phase $collection $counter $decrease>
 # TX:deprec_... used to be able to overwrite default values during non-regression tests
 <IfDefine EXTENDEDSTATUS>
  Use SecRule TX:deprec_$collection$counter  @unconditionalMatch "phase:$phase,id:$id,tag:security,t:none,~{skipAfter}:AfterInitCol"
 </IfDefine>
  Use SecAction "phase:$phase,id:$id,~{nosecaction},tag:security,initcol:$collection=none,deprecatevar:$collection.$counter=$decrease,setvar:TX.deprec_$collection$counter"
 <IfDefine EXTENDEDSTATUS>
  Use SecMarker AfterInitCol,tag:security
 </IfDefine>
</Macro>
# Block machines that have been blocked more than X times
<Macro SecRuleBlock_ $id $collection $counter $limit $decrease $msg $phase>
 <IfDefine !noSecurityRules>
  # Lower counter by X every X seconds (expire after 1 h inactivity)
  # deprecatevar must be set even in case of blocking => phase 5
  Use DeprecCounter_ $id 5 $collection $counter $decrease

  # Initialise if not done yet
  Use SecAction "phase:$phase,id:$id,tag:security,~{nosecaction},initcol:$collection=none"
  # Stop processing if collection not initialised
  Use SecRule "$collection:KEY"  "^none$" "phase:$phase,id:$id,tag:security,t:none,~{skipAfter}:EndOfBlock"

  # Stop processing if not enough attacks
  Use SecRule "&$collection:$counter" "@eq 0"      "phase:$phase,id:$id,tag:security,tag:ip_counter,t:none,~{skipAfter}:EndOfBlock"
  Use SecRule "$collection:$counter"  "@le $limit" "phase:$phase,id:$id,tag:security,tag:ip_counter,t:none,~{skipAfter}:EndOfBlock"
   # Block and log
   Use SecAction "phase:$phase,id:$id,t:none,tag:ip_counter,~{denyBlocked},msg:'Too many $msg from this $collection: %{$collection.$counter} (exp=$decrease)',setvar:TX.loggedAsBlocked"
   #,exec:'~{ScriptPath}/log_blocked'
  Use SecMarker EndOfBlock,tag:security

  # Log fact that IP address would have been blocked (was maybe blocked by another rule)
  Use SecRule TX:loggedAsBlocked @unconditionalMatch "phase:5,id:$id,t:none,tag:security,tag:ip_counter,~{skipAfter}:AfterloggedAsBlocked"
   Use SecRule "$collection:$counter"  "@gt $limit"  "phase:5,id:$id,t:none,tag:security,tag:ip_counter,tag:logging,~{log},msg:'Request, if genuine, would have been blocked anyway due to attack counter: $collection.$counter=%{$collection.$counter} (exp=$decrease)'"
  Use SecMarker AfterloggedAsBlocked,tag:security,tag:ip_counter
  
  # Higher time-out if blocked
  Use SecRule "$collection:$counter"  "@ge $limit" "phase:5,id:$id,t:none,tag:security,tag:ip_counter,~{nosecaction},expirevar:$collection.$counter=~{block_timeout}"
 </IfDefine>
</Macro>

<Macro SecRuleBlockIPandSession__ @id         @counter @limit @decrease @msg @phase>
 Use SecRuleRemoveById            @id
 Use SecRuleBlock_                @id IP      @counter @limit @decrease @msg @phase
 #Use SecRuleBlockSession_        @id SESSION @counter @limit @decrease @msg @phase
</Macro>
<Macro SecRuleBlockIPandSession_ $phase @blocked @auth @decrease>
 <IfDefine !noSecurityRules>
  Use SecRuleRemoveByFullTag ip_counter

  # Not applicable to IP management requests
  Use SecRule ENV:ManagedIP @unconditionalMatch "phase:$phase,id:2000032,tag:security,tag:ip_counter,t:none,~{skipAfter}:EndOfIpBlocking"
  Use SecRule ENV:ManagedIP @unconditionalMatch      "phase:5,id:2000032,tag:security,tag:ip_counter,t:none,~{skipAfter}:EndOfIpBlocking"

  # Ignore certain IP
  Use SecRule TX:remote_addr "~{IpToNotBlock}" "phase:$phase,id:2000032,tag:security,tag:ip_counter,t:none,~{skipAfter}:EndOfIpBlocking"
  Use SecRule TX:remote_addr "~{IpToNotBlock}"      "phase:5,id:2000032,tag:security,tag:ip_counter,t:none,~{skipAfter}:EndOfIpBlocking"

  Use SecRuleBlockIPandSession__ 2000041 blocked @blocked @decrease "bad requests"        $phase
  Use SecRuleBlockIPandSession__ 2000042 BadAuth @auth    @decrease "bad authentications" $phase
  Use SecMarker EndOfIpBlocking,tag:security,tag:ip_counter
 </IfDefine>
</Macro>
<Macro SecRuleBlockIPandSession               @blocked @auth @decrease>
 Use SecRuleBlockIPandSession_ ~{block_phase} @blocked @auth @decrease
</Macro>

# Reset counters to original state
<Macro SecDontIncreaseIPCounter @ip>
 <IfDefine !noSecurityRules>
  Use SecRule TX:remote_addr  @ip "phase:5,t:none,~{nosecaction},setvar:!tx.blocked,setvar:!tx.BadAuth"
 </IfDefine>
</Macro>

# Allow max. number of requests
<Macro MaxRequestNb $host $path $max $timeout>
 Use NotInsideLocation
 <IfDefine !noSecurityRules>
  Use SecRule TX:remote_addr  "~{IpToNotBlock}"       "phase:1,tag:security,t:none,~{skipAfter}:AfterMaxRequestNb"
  Use SecRule REQUEST_HEADERS "!$host"                "phase:1,tag:security,t:none,~{skipAfter}:AfterMaxRequestNb"
  Use SecRule TX:url          "!$path"                "phase:1,tag:security,t:none,~{skipAfter}:AfterMaxRequestNb"
   Use SecAction                                      "phase:1,tag:security,~{nosecaction},setvar:'IP.reqnb_$host$path=+1',expirevar:'IP.reqnb_$host$path=$timeout',deprecatevar:'IP.reqnb_$host$path=$max/$timeout'"
   Use SecRuleDeny "IP:'reqnb_$host$path'" "@gt $max" "phase:1,t:none,~{status}:403,msg:'Too many requests <%{MATCHED_VAR}> (possible application-level DoS Attack)'"
  Use SecMarker AfterMaxRequestNb,tag:security
  # deprecatevar only effective in phase 5; must be set even in case of blocking
  Use SecAction  "phase:5,~{nosecaction},tag:security,deprecatevar:'IP.reqnb_$host$path=$max/$timeout'"
 </IfDefine>
</Macro>
