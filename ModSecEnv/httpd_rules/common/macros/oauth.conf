# :: Macros: OAuth
# Range: 2001770-2001779

DefineStr OAuthKey    "[a-zA-Z0-9_]+"
DefineStr OAuthVal    "\x22[^\x22]*\x22"
DefineStr OAuthKeyVal "(?>\s*+~{OAuthKey}\s*+=\s*+~{OAuthVal}\s*+)"

# First 2 parts are captured (header, payload) 
DefineStr JWTToken_   (?:(?=^.{0,8192}$)^(~{syntax_base64})(?:[.](~{syntax_base64}))?(?:[.](~{syntax_base64}))?(?:[.](~{syntax_base64}))?(?:[.](~{syntax_base64}))?)

DefineStr OAuthTokenType "^[-a-zA-Z0-9_]*$"

# Internal ref up can be a signed JWT > 1500
DefineStr AuthInternalRef__       "[-a-zA-Z0-9_+/=@:.]{1,1000}"
DefineStr AuthInternalRef_        "^~{AuthInternalRef__}$"
DefineStr AuthJSON_               "^[{][~{CharNormal}]{1,400}[}]$"
DefineStr AuthUUID_               "^[-a-zA-Z0-9_]{0,64}$"
DefineStr AuthToken_              "~{AuthInternalRef_}|~{JWTToken_}"
DefineStr AuthList_               "^(?:(?:[-a-z_:]{1,20}) ?){1,10}$"

<Macro OAuthKey $key>
 Use SecRule REQUEST_HEADERS:Authorization  "\b$key\s*+=\s*+\x22([^\x22]*)\x22"  "phase:2,t:none,t:urlDecode,capture,~{nosecaction},setvar:TX.OAuth_$key=%{TX.1}"
</Macro>
<Macro OAuthKeySyntax $key $syntax>
 Use OAuthKey $key
 Use SecRule TX:OAuth_$key "!^$syntax$" "phase:2,t:none,tag:EXPLOIT,~{status}:401,~{increaseAuthCounter},msg:'Bad OAuth token format'"
</Macro>
<Macro OAuthUserid $key>
 Use OAuthKey $key
 Use SecRule TX:OAuth_$key "."  "phase:2,~{nosecaction},t:none,setuid:%{MATCHED_VAR},setenv:WAF_USER=%{MATCHED_VAR}"
</Macro>

<Macro OAuth1>
 # Header defined in RFC5849
 #OAuth oauth_token="", oauth_consumer_key="jira%3A14116633", oauth_signature_method="RSA-SHA1", oauth_timestamp="1538886870", oauth_nonce="11ddefda-660c-47db-b16b-64b25a231b5b_3146505895526039", oauth_version="1.0", oauth_signature="url-encoded-base64"
 Use SecRule REQUEST_HEADERS:Authorization  "!^(?i)OAuth\s"  "phase:2,t:none,tag:security,~{skipAfter}:AfterOAuth1"
  Use CustomAuthHeader "^(?i)OAuth\s~{OAuthKeyVal}(?>,~{OAuthKeyVal})*$"
  Use OAuthKeySyntax oauth_consumer_key      "~{AuthInternalRef_}"
  Use OAuthKeySyntax oauth_nonce             "~{AuthInternalRef_}"
  Use OAuthKeySyntax oauth_signature         "~{syntax_base64}"
  Use OAuthKeySyntax oauth_signature_method  "(?i)(?:rsa|hmac)-sha1"
  Use OAuthKeySyntax oauth_timestamp         "[0-9]+"
  Use OAuthKeySyntax oauth_token             "~{AuthToken_}"
  Use OAuthKeySyntax oauth_verifier          "~{AuthInternalRef_}"
  Use OAuthKeySyntax oauth_version           "1[.]0"
  Use OAuthKeySyntax realm                   ".*"
  Use OAuthUserid oauth_consumer_key
 Use SecMarker AfterOAuth1,tag:security
</Macro>

<Macro OAuth2>
 # Header defined in RFC6750
 #Accepted in default rule: Use CustomAuthHeader "^(?i)Bearer\s"
 Use SecRule REQUEST_HEADERS:Authorization  "^(?i)Bearer\s(.*)$"  "phase:2,t:none,~{nosecaction},tag:Auth,capture,setvar:TX.bearer_token=%{TX.1}"
 Use SecRule TX:bearer_token  "^$" "phase:2,t:none,tag:Auth,tag:EXPLOIT,~{status}:401,~{increaseAuthCounter},msg:'Bad OAuth2 token format'"
 Use SanitizeArg client_secret
 Use SanitizeCookie token
 Use SanitizeArg token
</Macro>

<Macro OAuth2MAC>
 # Header defined in RFC6749
 #Ex: MAC id="h480djs93hd8", nonce="274312%3Adj83hs9s", mac="kDZvddkndxvhGRXZhvuDjEWhGeE="
 Use SecRule REQUEST_HEADERS:Authorization  "^!(?i)MAC\s"  "phase:2,t:none,~{skipAfter}:AfterOAuth2MAC,tag:security"
  Use SecAllowBase64
  Use CustomAuthHeader "^(?i)MAC\s~{OAuthKeyVal}(?:,~{OAuthKeyVal})*$"
  Use OAuthKeySyntax id       "~{AuthInternalRef_}"
  Use OAuthKeySyntax nonce    "~{AuthInternalRef_}"
  Use OAuthKeySyntax mac      "(?=^.{0,128}$)^(?:~{syntax_base64})$"
  Use TokenCheckNb ARGS:nonce 0 0
  Use TokenCheckNb ARGS:mac   0 0
  
  Use OAuthKeySyntax kid           "~{AuthInternalRef_}"
  Use OAuthKeySyntax mac_key       "(?=^.{0,128}$)^(?:~{syntax_base64})$"
  Use OAuthKeySyntax mac_algorithm "hmac-sha-(?:1|256)"

 Use SecMarker AfterOAuth2MAC,tag:security
</Macro>

<Macro OAuth2TokenExchange>
 Use AllowAutomatedTools
 Use SecAllowBase64
 Use ArgWhiteList client_assertion "~{JWTToken_}"
 Use ArgWhiteList client_assertion_type "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
 Use ArgWhiteList code            "~{AuthInternalRef_}"
 Use ArgWhiteList code_verifier   "[a-zA-Z0-9-._~]{43,128}"
 Use ArgWhiteList grant_type      "~{AuthList_}"
 Use ArgWhiteList redirect_uri    "^~{syntax_URL_https_Query}$"
 Use ArgWhiteList client_id       "~{AuthInternalRef_}"
 Use ArgWhiteList client_secret   "~{AuthInternalRef_}"
 Use ArgWhiteList refresh_token   "~{AuthToken_}"
 Use ArgWhiteList scope           "~{OIDCScope_}"
 Use ArgWhiteList state           "~{AuthInternalRef_}"
 Use TokenCheckNb ARGS:refresh_token   0 0
 # When grant_type=password
 Use WhiteListUsername 2 ARGS_POST username "~{UserNameSyntax}"
 Use ArgPostWhiteList    password     "^[~{CharPassword}]{0,~{PasswordLengthMax}}$"
 # For Keycloak
 Use ArgWhiteList application_session_state "~{AuthInternalRef_}"
 Use ArgWhiteList client_session_state      "~{AuthInternalRef_}"
 Use ArgWhiteList user_session_state        "~{AuthInternalRef_}"
 # For Facebook (errors)
 Use ArgWhiteList error_code    "^[0-9]{0,10}$"
 Use ArgWhiteList error_message "^[~{CharNormal}]{0,500}$"
 # For Google (errors)
 Use ArgWhiteList error         "^[~{CharMin}]{0,100}$"
 Use CheckWhiteListArgs
 
 # For JS applications
 Use SecAllowAuthCORS
 
 #Use SecBadAuthArg "/^error/" ^
</Macro>

<Macro OAuth2TokenRefresh>
 Use SecAllowBase64
 Use ArgWhiteList client_id       "~{AuthInternalRef_}"
 Use ArgWhiteList expires_in      "[0-9]*"
 Use ArgWhiteList grant_type      "refresh_token"
 Use ArgWhiteList refresh_token   "~{AuthToken_}"
 Use TokenCheckNb ARGS:refresh_token   0 0
 Use ArgWhiteList session_state   "~{AuthInternalRef_}"
 Use ArgWhiteList state           "~{AuthInternalRef_}"
 Use TokenCheckNb ARGS:state 1 1
 Use ArgPostWhiteList scope       "~{OIDCScope_}"
 Use ArgPostWhiteList token_type  ~{OAuthTokenType}
 # For IdentityServer
 Use ArgWhiteList session_state             "~{AuthInternalRef_}"
 # For Keycloak
 Use ArgWhiteList application_session_state "~{AuthInternalRef_}"
 Use ArgWhiteList client_session_state      "~{AuthInternalRef_}"
 Use ArgWhiteList user_session_state        "~{AuthInternalRef_}"
 # Parameters sometimes sent by Microsoft ADFS
 Use ArgWhiteList client-request-id "^~{syntax_GUID}$"
 Use ArgWhiteList id_token          "~{JWTToken_}"

 Use CheckWhiteListArgs
</Macro>

# JWT -------------------------------------------------------------------------
<Macro JWTAlgo $alg>
 Use SecRuleRemoveByID 2001770
 # Forbid none & obsolete algo
 Use SecRuleDeny TX:jwt_alg "none|RSA1_5" "phase:2,t:none,id:2001770,~{status}:400,msg:'Bad JWT token signature algorithm <%{TX.jwt_alg}>',logdata:'%{TX.jwt_token}'"
 # Forbid unregistered algo
 Use SecRuleDeny TX:jwt_alg "!$alg"       "phase:2,t:none,id:2001770,~{status}:400,msg:'Unregistered JWT token signature algorithm <%{TX.jwt_alg}> (Use JWTAlgo)',logdata:'%{TX.jwt_token}'"
</Macro>
<Macro JWTCheck $token>
 Use SecAllowBase64
 Use SecRule "$token" "~{JWTToken_}"   "phase:2,t:none,tag:security,~{nosecaction},capture,setvar:TX.jwt_token=%{TX.0},setvar:TX.jwt_header=%{TX.1},setvar:TX.jwt_payload=%{TX.2},setvar:TX.jwt_sign=%{TX.3}"
 Use Base64Decode TX jwt_header
 Use Base64Decode TX jwt_payload
 # Debugging
 Use ExtendedHeaderSec jwt "jwt_header=%{TX.jwt_header}|jwt_payload=%{TX.jwt_payload}|jwt_sign=%{TX.jwt_sign}"
 
 Use GetJSONValue TX:jwt_header "typ" jwt_typ
 Use SecRuleDeny TX:jwt_typ "!^(?i)(?:AT[+])?JWT$" "phase:2,t:none,~{status}:400,msg:'Bad JWT token type <%{TX.jwt_typ}>',logdata:'%{TX.jwt_token}'"
 
 Use GetJSONValue TX:jwt_header "alg" jwt_alg
 #Only allow symmetric algorithms
 Use JWTAlgo "^HS[0-9]+$"
 
 Use GetJSONValue TX:jwt_payload "exp" jwt_exp
 Use SecRuleDeny TX:jwt_exp "!^[0-9]+$" "phase:2,t:none,~{status}:400,msg:'Bad JWT token exp <%{TX.jwt_exp}>',logdata:'%{TX.jwt_token}'"
 
 Use SecRule TX:jwt_sign "^$"           "phase:2,t:none,tag:security,~{nosecaction},setvar:!TX.jwt_sign"
 Use SecRule &TX:jwt_header "@eq 0"     "phase:2,t:none,tag:security,~{skipAfter}:AfterJWTHeader"
  Use SecRuleDeny &TX:jwt_sign "@eq 0"  "phase:2,t:none,~{status}:400,msg:'No JWT token signature',logdata:'%{TX.jwt_token}'"
 Use SecMarker AfterJWTHeader,tag:security
</Macro>
