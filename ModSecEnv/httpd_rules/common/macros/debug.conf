# :: Debugging, tracing, ...

<Macro Warning @msg>
 #<IfModule warning_module>
  Warning @msg
 #</IfModule>
</Macro>

# Logging ----------------------------------------------------------------------
<Macro LogPathPrefix $path $prefix>
 ErrorLog        "$path/$prefix-error.log"
 CustomLog       "$path/$prefix-access.log" ~{AccessLogType}   env=!no-log
 Use SecAuditLog "$path/security/$prefix-audit.log"
 Use SecDebugLog "$path/security/$prefix-audit.debug"
</Macro>

# Log a message
<Macro LogPhase_ $phase $msg>
 Use SecAction "phase:$phase,~{nosecaction},auditlog,msg:'$msg'"
</Macro>
<Macro LogPhase $phase                           $msg>
 Use LogPhase_ "$phase,severity:DEBUG" "[$phase] $msg"
</Macro>
<Macro LogPhaseExt $phase $action  @msg>
 Use LogPhase     "$phase,$action" @msg
</Macro>

# Log a message
<Macro LogAllPhases @msg>
 Use LogPhase 1 @msg
 Use LogPhase 2 @msg
 Use LogPhase 5 @msg
</Macro>

# Log a message
<Macro Log @msg>
 Use LogPhase 5 @msg
</Macro>

# Execute a rule and log it only once
<Macro RuleLogOnceExt__ $phase @target @pattern $tfn $action $msg $id $tags $col $res>
 # Stop processing if rule is not OK
 Use SecRule @target @pattern          "phase:$phase,id:$id,$tags,$tfn,initcol:'$col=$res',~{skip}:1"
 Use SecAction                         "phase:$phase,id:$id,$tags,~{skip}:1"
 Use SecRule &$col:LogOnce_$id "@eq 0" "phase:$phase,id:$id,$tags,~{log},$action,~{ruleSetEnv},msg:'$msg',setvar:$col.LogOnce_$id=%{TIME_EPOCH},expirevar:$col.LogOnce_$id=~{LogOncePeriod}"
 # Replace above by check if last log was too long ago (must use big int instead of direct comparison)
 # setvar:TX.diff=%{TIME_EPOCH},setvar:TX.diff=-%{RESOURCE.LogOnce_$id}"
 # Use SecRule TX:diff  "@ge ~{LogOncePeriod}" "phase:$phase,id:$id,$tags,~{nosecaction},setvar:!RESOURCE.LogOnce_$id"
</Macro>
<Macro RuleLogOnceExt_              @target @pattern @tfn @action @msg @id @tags @col @res>
 Use RuleLogOnceExt__ ~{Phase5Warn} @target @pattern @tfn @action @msg @id @tags @col @res
</Macro>
<Macro RuleLogOnceExt @target @pattern @tfn @action @msg @id @tags          @res>
 Use RuleLogOnceExt_  @target @pattern @tfn @action @msg @id @tags RESOURCE @res
</Macro>

# Execute a rule and log it only once
<Macro RuleLogOnce  @target @pattern @tfn @action @msg @id @tags>
 Use RuleLogOnceExt @target @pattern @tfn @action @msg @id @tags "url_%{TX.hash_url}"
</Macro>
<Macro LogOncePerUrl @msg @id @tags>
 Use RuleLogOnceExt REMOTE_ADDR @unconditionalMatch "t:none" "severity:INFO" @msg @id @tags "url_%{TX.hash_url}"
</Macro>
<Macro LogOncePerId @msg @id @tags>
 Use RuleLogOnceExt REMOTE_ADDR @unconditionalMatch "t:none" "severity:INFO" @msg @id @tags @id
</Macro>
<Macro LogOncePerApp @msg @id @tags>
 Use RuleLogOnceExt REMOTE_ADDR @unconditionalMatch "t:none" "severity:INFO" @msg @id @tags "%{WEBAPPID}"
</Macro>
<Macro LogOncePerBackend @msg @id @tags>
 Use RuleLogOnceExt REMOTE_ADDR @unconditionalMatch "t:none" "severity:INFO" @msg @id @tags "%{env.WORKER_NAME}"
</Macro>
<Macro RuleLogOncePerIP @msg @id @tags>
 Use RuleLogOnceExt_ REMOTE_ADDR @unconditionalMatch "t:none" "severity:INFO" @msg @id @tags IP "%{REMOTE_ADDR}"
</Macro>

<Macro RuleLogSome_ $col $counter $limit $tag>
 # Log only every X requests ($limit)
 Use SecRule "&TX:'$counter'"  "@eq 0"        "phase:5,tag:security,tag:$tag,~{skipAfter}:AfterLogSomeCheck,t:none"
 Use SecAction                                "phase:5,tag:security,tag:$tag,~{nosecaction},setvar:TX.RuleLogSome=$limit"
 Use SecRule "TX:RuleLogSome"  "@eq 0"        "phase:5,tag:security,tag:$tag,~{skipAfter}:AfterLogSomeCheck,t:none"
  Use SecRule "$col:'$counter'" "!@eq 0"      "phase:5,tag:security,tag:$tag,~{nosecaction},ctl:auditEngine=off"
  Use SecAction                               "phase:5,tag:security,tag:$tag,~{nosecaction},setvar:'$col.$counter=+1'"
  Use SecRule "$col:'$counter'" "@ge $limit"  "phase:5,tag:security,tag:$tag,~{nosecaction},t:none,setvar:'$col.$counter=0'"
  Use SecMarker AfterLogSomeCheck,tag:security,tag:$tag
</Macro>
<Macro RuleLogSome $col $counter $limit>
 Use RuleLogSome_  $col $counter $limit security
</Macro>

<Macro NoLog502>
 Use SecRuleRemoveByFullTag Log502
</Macro>
<Macro Log502 $period>
 Use NoLog502
 Use SecRule RESPONSE_STATUS "^502" "phase:5,t:none,tag:Log502,~{responseWarn},noauditlog,setvar:TX.status502,msg:'No answer from back-end'"
 # Log only every X requests
 Use RuleLogSome_ RESOURCE status502 $period tag:Log502
</Macro>

# Statistical data -------------------------------------------------------------
<Macro StoreStatisticsCounter_ $coll $name>
 Use SecAction "phase:5,t:none,~{nosecaction},initcol:RESOURCE=app_%{TX.hash_app},setvar:RESOURCE.max_$name=+0"
 Use SecRuleIntComp_ $coll %{RESOURCE.max_$name} ",phase:5" ",t:none"
 Use SecRule TX:intcmp "^gt"                    "phase:5,t:none,~{nosecaction},initcol:RESOURCE=app_%{TX.hash_app},setvar:RESOURCE.max_$name=%{MATCHED_VAR}"
</Macro>
<Macro StoreStatisticsCounter @coll>
 Use StoreStatisticsCounter_ @coll @coll
</Macro>
<Macro StoreStatisticsNb $coll>
 Use SecRule &$coll "@gt %{RESOURCE.max_nb_$coll}"  "phase:5,t:none,~{nosecaction},initcol:RESOURCE=app_%{TX.hash_app},setvar:RESOURCE.max_nb_$coll=%{MATCHED_VAR}"
</Macro>
<Macro StoreStatisticsLen $coll>
 Use SecRuleIntComp_ $coll %{RESOURCE.max_len_$coll} ",phase:5" ",t:none"
 Use SecRule TX:intcmp "^gt" "phase:5,t:none,~{nosecaction},initcol:RESOURCE=app_%{TX.hash_app},setvar:RESOURCE.max_len_$coll=%{MATCHED_VAR},t:length"
</Macro>
<Macro StoreStatistics>
 Use SecRule &ENV:allowed4 "@eq 0" "phase:5,t:none,~{skipAfter}:AfterStatistics"
  Use StoreStatisticsNb      ARGS
  Use StoreStatisticsNb      FILES
  Use StoreStatisticsNb      REQUEST_COOKIES
  Use StoreStatisticsLen     ARGS
  Use StoreStatisticsCounter FILES_SIZES
  Use StoreStatisticsLen     REQUEST_COOKIES
  Use StoreStatisticsLen     ARGS_NAMES
  Use StoreStatisticsLen     FILES_NAMES
  Use StoreStatisticsLen     REQUEST_COOKIES_NAMES
  Use StoreStatisticsCounter FILES_COMBINED_SIZE
  Use StoreStatisticsCounter_ TX:req_size REQUEST_BODY_LENGTH
  Use StoreStatisticsCounter RESPONSE_CONTENT_LENGTH
  Use StoreStatisticsCounter ARGS_COMBINED_SIZE
  Use StoreStatisticsCounter FULL_REQUEST_LENGTH
  Use StoreStatisticsCounter_ ~{ARGS_COMBINED_SIZE} args_total_size
 Use SecMarker AfterStatistics
</Macro>

<Macro ExportStatistics_ $phase>
 Use SecAction  "phase:$phase,~{nosecaction},initcol:RESOURCE=%{WEBAPPID},setenv:ManagedRes=%{WEBAPPID},~{ManageResCounterSetenv}"
</Macro>
<Macro ExportStatistics>
 Use ExportStatistics_ 1
 Use ExportStatistics_ 2
</Macro>

# Debugging --------------------------------------------------------------------
<Macro AuditParts $p>
 Use SecAction "phase:5,~{nosecaction},ctl:auditLogParts=$p"
</Macro>

<Macro ExtendedHeaderSec $h $msg>
 <IfDefine EXTENDEDSTATUS>
  Use SecAction "phase:3,~{debug},~{nosecaction},setenv:'$h=$msg'"
  Header always set X-WAF-$h "%{$h}e" "expr=-z resp('X-WAF-$h')"
 </IfDefine>
</Macro>

<Macro LogSlowRules_ $th $msg>
 <IfModule security2_module>
  # Disable rules analysing log
  SecRule PERF_RULES "@ge $th" "phase:5,chain,~{debug},tag:perf,msg:'$msg %{MATCHED_VAR} (%{tx.perf_} micro-seconds)',setvar:tx.perf_=%{MATCHED_VAR}"
   SecRule MATCHED_VARS_NAMES "!:(?:100011|40022|400310|400320[1-5])"
 </IfModule>
</Macro>

<Macro LogPerf $phase>
 <IfModule security2_module>
  #Use SecRuleRemoveByFullTag perf
  Use SecRuleRemoveByFullTag LogPerf$phase
  SecAction "phase:$phase,~{debug},tag:perf,tag:LogPerf$phase,msg:'Perf: %{PERF_ALL}'"
 </IfModule>
</Macro>
<Macro DebugContext $action>
 Use SecRuleRemoveByFullTag DebugContext
 Use SecRule REQUEST_URI_RAW "(?i)[.]~{UsualResFileExt}$" "phase:5,~{nosecaction},tag:DebugContext,t:none,skip:1"
 Use SecAction                                            "phase:5,~{nosecaction},tag:DebugContext,$action,severity:DEBUG"
</Macro>
<Macro DebugPerf>
 <IfModule security2_module>
  SecRulePerfTime ~{SlowRuleTH}
  Use LogPerf 5
  Use LogSlowRules_ ~{SlowRuleTH}     "Slow rule"
  Use LogSlowRules_ ~{VerySlowRuleTH} "Very slow rule"
  Use DebugContext "~{log},msg:'Persistent storage time read (micro-seconds): %{PERF_SREAD}, write: %{PERF_SWRITE}'"
 </IfModule>
</Macro>

<Macro StatusAndTrace>
 Use DebugPerf
 Use StoreStatistics
 ################################Use ExportStatistics
 #SetEnv !no-log
 Use AuditParts "+G"
 # To force display of contextual info
 # (?<!...) is not allowed
 Use DebugContext "severity:DEBUG"
</Macro>

<Macro DebugLocation>
 Use TraceResponseLocation "@unconditionalMatch"
 <IfModule security2_module>
  SecDebugLogLevel 9
  SecDebugLog      "~{SecDebugLog}"
  Use AuditParts "+K"
  SecAction "phase:1,~{nosecaction},setenv:debug"
  SecAction "phase:2,~{nosecaction},setenv:debug"
 </IfModule>
 LogLevel trace5
 #LogLevel trace7
 <IfModule authn_core_module>
  LogLevel authn_core_module:trace8
 </IfModule>
 <IfModule authz_core_module>
  LogLevel authz_core_module:trace8
 </IfModule>
 <IfModule brotli_module>
  LogLevel brotli_module:debug
 </IfModule>
 <IfModule deflate_module>
  LogLevel deflate_module:debug
 </IfModule>
 <IfModule auth_openidc_module>
  LogLevel auth_openidc_module:trace8
 </IfModule>
 <IfModule proxy_balancer_module>
  LogLevel proxy_balancer_module:info
 </IfModule>
 <IfModule slotmem_shm_module>
  LogLevel slotmem_shm_module:info
 </IfModule>
 <IfModule socache_shmcb_module>
  LogLevel socache_shmcb_module:info
 </IfModule>
 <IfModule ssl_module>
  LogLevel ssl_module:info
 </IfModule>
 <IfModule headers_module>
  LogLevel headers_module:trace4
  LogLevel headers_module:warn
 </IfModule>
 <IfModule filter_module>
  LogLevel filter_module:trace8
 </IfModule>
 <IfModule maxminddb_module>
  LogLevel maxminddb_module:warn
 </IfModule>
 <IfModule rewrite_module>
  LogLevel rewrite_module:trace8
 </IfModule>
 <IfModule proxy_module>
  LogLevel proxy_module:trace8
 </IfModule>
 <IfModule proxy_http_module>
  LogLevel proxy_http_module:trace8
 </IfModule>
 <IfModule setenvif_module>
  LogLevel setenvif_module:trace8
 </IfModule>
 Use StatusAndTrace
 <IfDefine DebugServer>
  LogLevel trace8
 </IfDefine>
 <IfModule http2_module>
  LogLevel http2_module:info
 </IfModule>
 <IfDefine DebugModule>
  LogLevel ${DebugModule}_module:trace8
 </IfDefine>
</Macro>

<Macro DebugIP @ip>
 <IfModule security2_module>
  SecDebugLog  "~{SecDebugLog}"
  Use TraceResponse "@unconditionalMatch" @ip
  Use NotInsideLocation
  Use SecRule &TX:trace "@eq 0"  "phase:1,t:none,~{skip}:1"
  Use SecAction "phase:1,~{nosecaction},setenv:debug,ctl:debugLogLevel=5"
 </IfModule>
</Macro>

<Macro SecDebug @ip @path>
 Use NotInsideLocation
 <IfModule security2_module>
  SecDebugLog  "~{SecDebugLog}"
  Use SecRule TX:remote_addr @ip "phase:1,chain,~{nosecaction}"
   Use SecRule TX:url @path "t:none,setenv:debug,ctl:debugLogLevel=9"
 </IfModule>
</Macro>

<Macro Debug_>
 Use DebugLocation
 ErrorLog "~{ErrorLog}.debug"
 <IfModule log_config_module>
  CustomLog ~{AccessLog} Debug
 </IfModule>
</Macro>

<Macro Debug>
 Use Debug_
 Use Warning "*** DEBUG MODE"
</Macro>

<Macro DebugServer>
 Use Debug_
 <IfDefine DebugServer>
  LoadModule dumpio_module modules/mod_dumpio.so
  LogLevel dumpio_module:trace8
  DumpIOInput    On
  # DumpIOOutput On  is incompatible with HTTP 1.0 connections
  DumpIOOutput   On
  Use Warning "*** DEBUG MODE WITH I/O"
 </IfDefine>
</Macro>

# Tracing ----------------------------------------------------------------------
<Macro TracePhase $phase $action>
 Use SecRule TX:trace "@unconditionalMatch" "phase:$phase,tag:logging,tag:Ignore,~{log},t:none,msg:'Tracing ($phase:%{DURATION}), timeout=%{IP.TIMEOUT}, perf (microseconds):<%{PERF_COMBINED}>, IP.blocked=%{IP.blocked}',severity:DEBUG$action"
</Macro>

# Trace a request based on URL & remote IP
<Macro Trace_ @path @ip $part>
 #Use NotInsideLocation
 Use SecRule ENV:no-log  "@unconditionalMatch" "phase:1,t:none,~{skip}:1"
 Use SecRule TX:remote_addr  @ip               "phase:1,t:none,chain,~{nosecaction},severity:DEBUG,msg:'Trace phase1'"
  Use SecRule TX:remote_addr "!127[.]0[.]0[.]1"   "t:none,chain"
   Use SecRule TX:url @path                 "t:none,setvar:TX.trace=1,ctl:auditLogParts=+$part"

 Use TracePhase 1 ""
 Use TracePhase 2 ""
 Use TracePhase 3 ""
 Use TracePhase 4 ""
 Use TracePhase 5 ",logdata:'Perf (microseconds): %{PERF_PHASE1},%{PERF_PHASE2},%{PERF_PHASE3},%{PERF_PHASE4}'"

 #Use SecRule ENV:no-log "@unconditionalMatch" "phase:4,t:none,~{skip}:1"
 #Use SecRule TX:url @path "phase:4,~{log},t:none,chain,msg:'login: <%{USERID}/%{ENV.AUTH_PWD}>'"
 # Use SecRule ENV:AUTH_PWD "@unconditionalMatch" "t:none"
</Macro>
   
<Macro Trace @path @ip>
 Use Trace_  @path @ip "A"
</Macro>
   
<Macro TraceReqHeaders_>
 Use SecRule TX:trace "@eq 1"   "phase:5,tag:logging,tag:Ignore,~{log},chain,t:none,msg:'Request tracing: <%{MATCHED_VAR_NAME}: %{MATCHED_VAR}>',severity:DEBUG"
  Use SecRule REQUEST_HEADERS  @unconditionalMatch ""
</Macro>
<Macro TraceResponse @path @ip>
 Use Trace_          @path @ip "E"
 #Use TraceReqHeaders_
</Macro>
   
<Macro TraceResponseLocation @ip>
 Use SecAction "phase:2,~{nosecaction},setvar:TX.trace=1"
 Use TraceResponse @unconditionalMatch @ip
</Macro>
   
<Macro SendRequestHeader_ $h>
 Use NotInsideLocation
 Use SecRule REQUEST_HEADERS:$h  @unconditionalMatch "phase:1,~{nosecaction},t:none,setenv:orgReqHeader_$h=%{MATCHED_VAR}"
 RequestHeader set X-Org-$h  "%{orgReqHeader_$h}e" env=orgReqHeader_$h
</Macro>
<Macro SendResponseHeader_ $h>
 Use SecRule RESPONSE_HEADERS:$h @unconditionalMatch  "phase:3,~{nosecaction},t:none,setenv:orgRespHeader_$h=%{MATCHED_VAR}"
 Header set X-Org-$h  "%{orgRespHeader_$h}e" env=orgRespHeader_$h
</Macro>
<Macro SendHeaders_>
 Use SendRequestHeader_ Authorization
 Use SendRequestHeader_ Cookie
 Use SendRequestHeader_ Destination
 Use SendRequestHeader_ X-MS-ENUMATTS
 Use SendResponseHeader_ Content-Disposition
 Use SendResponseHeader_ Content-Location
 Use SendResponseHeader_ Location
 Use SendResponseHeader_ URI
</Macro>
<Macro SendResponseHeaders_>
 Use SecRule RESPONSE_HEADERS @unconditionalMatch "phase:3,~{nosecaction},t:none,setenv:'orgRespHeaders=%{env.orgRespHeaders}|%{MATCHED_VAR_NAME}=%{MATCHED_VAR}|'"
 Header always set   X-WAF-Response-Headers "%{orgRespHeaders}e" "expr=-z resp('X-WAF-Response-Headers') && -n reqenv('orgRespHeaders')"
 Header always edit* X-WAF-Response-Headers "RESPONSE_HEADERS:" ""
</Macro>

<Macro LogOrgRespHeader @id $header $env>
 Use SecRule &RESPONSE_HEADERS:$header "@eq 0" "phase:~{Phase5Warn},t:none,tag:security,~{skipAfter}:AfterLogOrgHeader"
 Use SecRule &ENV:$env                 "@eq 1" "phase:~{Phase5Warn},t:none,tag:security,~{skipAfter}:AfterLogOrgHeader"
  Use LogOncePerApp "Original $header: %{RESPONSE_HEADERS.$header}" @id tag:security
 Use SecMarker AfterLogOrgHeader
</Macro>

DefineStr DebugSubstTxt "<title>"
<Macro DebugSubst $msg>
 <Ifdefine DebugSubst>
  Use Substitute "s`~{DebugSubstTxt}`<$msg-1 />~{DebugSubstTxt}`ni"
  Use Substitute "s`~{DebugSubstTxt}`<$msg-2 />~{DebugSubstTxt}`ni"
  Use Log "$msg"
  <Location />
   Use Substitute "s`~{DebugSubstTxt}`<$msg loc1 />~{DebugSubstTxt}`nqi"
   Use Log "$msg loc1"
  </Location>
  <Location />
   Use Substitute "s`~{DebugSubstTxt}`<$msg loc2 />~{DebugSubstTxt}`nqi"
   Use Log "$msg loc2"
  </Location>
 </Ifdefine>
</Macro>

<Macro XWafDebugPhase_ $phase>
 SecRule REQUEST_HEADERS:X-WAF-Debug . "phase:$phase,t:none,~{nosecaction},ctl:debugLogLevel=%{MATCHED_VAR}"
</Macro>
