# :: Macros: Rules related to cookies
# Range: 5000000-5000099

DefineStr CookieDelim1_ "(?:^|\s*+[;,])\s*+"
DefineStr CookieDelim2_ "\s*+[;,]*\s*+"

<Macro EditRequestAllowedCookie $from $to>
 <IfDefine !noCookieRewrite>
  Use SecRule ENV:allowedCookies "^(?i)(.*)(?:$from)(.*)" "phase:2,t:none,tag:security,tag:COOKIE,~{nosecaction},capture,setenv:'allowedCookies=%{TX.1}$to%{TX.2}'"
 </IfDefine>
</Macro>
<Macro EditRequestAllowedCookieStar     @from @to>
 # No * => hard-code to 10 times
 Use EditRequestAllowedCookie @from @to
 Use EditRequestAllowedCookie @from @to
 Use EditRequestAllowedCookie @from @to
 Use EditRequestAllowedCookie @from @to
 Use EditRequestAllowedCookie @from @to
 Use EditRequestAllowedCookie @from @to
 Use EditRequestAllowedCookie @from @to
 Use EditRequestAllowedCookie @from @to
 Use EditRequestAllowedCookie @from @to
 Use EditRequestAllowedCookie @from @to
</Macro>

<Macro EditRequestCookieExt $from $to $star $flag>
 <IfDefine !noCookieRewrite>
  RequestHeader edit$star Cookie "(?i)(?:$from)" "$to" $flag
 </IfDefine>
</Macro>

<Macro EditRequestCookie          @from @to>
 Use EditRequestCookieExt         @from @to * ""
 Use EditRequestAllowedCookieStar @from @to
</Macro>
<Macro EditRequestCookieEarly @from @to>
 Use EditRequestCookieExt @from @to * early
</Macro>

<Macro RemoveAllowedCookie $c>
 Use EditRequestAllowedCookieStar "(?:REQUEST_COOKIES:|~{CookieDelim1_})(?:$c)=[^;,]*" ""
</Macro>
<Macro RemoveAllowedCookies @c>
 Use RemoveAllowedCookie @c
</Macro>

<Macro RemoveCookieExt $c @flag>
 Use EditRequestCookieExt "~{CookieDelim1_}(?:$c)=[^;,]*" "" "*" @flag
</Macro>
<Macro RemoveCookie       @c>
 Use RemoveCookieExt      @c ""
 Use RemoveAllowedCookies @c
</Macro>
<Macro RemoveCookieEarly @c>
 Use RemoveCookieExt @c early
</Macro>

<Macro CleanUpReqCookieEnv_ $from $to $flag>
 <IfDefine !noCookieRewrite>
  RequestHeader edit* Cookie "$from" "$to" $flag
 </IfDefine>
</Macro>
<Macro CleanUpReqCookie_ @from @to>
 Use EditRequestCookieEarly @from @to
 Use CleanUpReqCookieEnv_   @from @to ""
</Macro>

<Macro EditResponseCookieExt $from $to $star $flag>
 <IfDefine !noCookieRewrite>
  Header edit$star Set-Cookie "(?i)(?:$from)" "$to" $flag
 </IfDefine>
</Macro>
<Macro EditResponseCookie @from @to>
 Use EditResponseCookieExt @from @to * ""
</Macro>
<Macro RemoveResponseCookieExt $c @flag>
 Use EditResponseCookieExt "^(?:$c)=.*" "" "" @flag
</Macro>
<Macro RemoveResponseCookie @c>
 Use RemoveResponseExt @c ""
</Macro>

<Macro SecCookieByteRangeExcl $id $range @excl>
 Use SecRuleRemoveByID $id
 #Use SecRuleCookiesExclude  "@validateByteRange 32-95,97-126,128-254,$range"  $id,tag:COOKIE                       "t:~{ascii},msg:'Invalid character (raw) in Cookie <%{MATCHED_VAR_NAME}> (Use SecCookieByteRange)'"      @excl
 #Use SecRuleCookiesExclude  "@validateByteRange 32-95,97-126,128-254,$range"  $id,tag:COOKIE,tag:COOKIE/SqlDecode  "t:~{sqlDecode},msg:'Invalid character (encoded) in Cookie <%{MATCHED_VAR_NAME}> (Use SecCookieByteRange)'"  @excl
 Use SecRuleCookiesExclude  "@validateByteRange 32-95,97-126,128-254,$range"  $id,tag:COOKIE,tag:COOKIE/SqlDecode  "t:~{sqlDecode},multimatch,msg:'Invalid character in Cookie <%{MATCHED_VAR_NAME}> (Use SecCookieByteRange)',logdata:%{MATCHED_VAR}"  @excl
</Macro>

<Macro SecCookieByteRange_ @id @range>
 Use SecCookieByteRangeExcl @id @range "&&&"
</Macro>

<Macro SecCookieByteRange @range>
 Use SecCookieByteRange_ 5000003 @range
</Macro>
<Macro SecCookiesAllowCharset @range>
 Use SecCookieByteRange @range
</Macro>

<Macro SecCookieNameAllowCharacter $char>
 Use SecRule &TX:CheckCookiesNames  "@eq 0"             "phase:2,t:none,id:5000004,tag:COOKIE,tag:security,~{skipAfter}:AfterCookieNameAllowCharacter"
  Use SecRuleDeny "~{cookienames}" "[^$char~{CharMin}]" "phase:2,t:none,id:5000004,tag:COOKIE,tag:SecRuleCookies,msg:'Invalid cookie name <%{MATCHED_VAR_NAME}>'"
 Use SecMarker AfterCookieNameAllowCharacter,tag:security,tag:COOKIE
</Macro>

<Macro SecIgnoreCookie @excl>
 # ???? This disables all existing 5000003 checks => can be used only once => add check
 Use SecCookieByteRangeExcl 5000003  ""  @excl
</Macro>

# Encode/decode a cookie in Hexadecimal
<Macro SafeEncodeCookie $name>
 <IfDefine !noCookieRewrite>
  Use SecRule REQUEST_COOKIES:$name . "phase:2,t:none,t:hexDecode,tag:COOKIE,~{nosecaction},setenv:cookieSafeEncode=$name=%{MATCHED_VAR}"
  Use EditRequestCookieExt "(~{CookieDelim1_})$name\s*+=[^;]+"   "$1%{cookieSafeEncode}e" "" env=cookieSafeEncode
  Use SecRule RESPONSE_HEADERS:Set-Cookie "\b(?i:$name)\s*+=([^;]+)"  "phase:3,chain,t:none,tag:COOKIE,~{nosecaction},capture"
   Use SecRule TX:1 .  "t:none,t:hexEncode,setenv:'cookieSafeEncode=$name=%{MATCHED_VAR}'"
  Header edit Set-Cookie   "~{CookieDelim1_}(?i:$name)\s*+=[^;]+"   "%{cookieSafeEncode}e" env=cookieSafeEncode
 </IfDefine>
</Macro>

<Macro AcceptSetCookie_ $cId>
 Use SecAction "phase:~{Phase5Warn},t:none,~{nosecaction},tag:security,tag:COOKIE,setvar:'TX.allowedCookieNames=%{TX.allowedCookieNames}|(?:$cId)'"
</Macro>

<Macro AddCookieValue_ $cookie $value>
 Use SecAction  "phase:2,~{nosecaction},tag:COOKIE,setenv:'allowedCookies=$cookie=$value;%{ENV.allowedCookies}'"
</Macro>
<Macro AcceptCookie_ $cookie $cId>
 Use SecRule ENV:allowAllCookies @unconditionalMatch "phase:2,tag:security,~{skipAfter}:EndOfAcceptCookie"
  Use SetEnv acceptCookie 1
  # Check if already handled
  Use SecRule "TX:'allowedCookies-$cId'" @unconditionalMatch "phase:2,tag:security,tag:COOKIE,~{skipAfter}:EndOfAcceptCookie"
   Use SecRuleCookie "$cookie" "@validateByteRange 32-95,97-126,128-254"  5000001    "t:none,msg:'Invalid character in Cookie (raw)'"
   Use SecRule "REQUEST_COOKIES:'$cookie'" ^                 "phase:2,t:none,tag:security,tag:COOKIE,~{nosecaction},setvar:'TX.allowedCookies-$cId',setenv:'allowedCookies=%{MATCHED_VAR_NAME}=%{MATCHED_VAR};%{ENV.allowedCookies}'"
  # Check that all returned cookies are allowed
  Use SecRule ENV:allowAllCookies @unconditionalMatch "phase:~{Phase5Warn},tag:security,~{skipAfter}:EndOfAcceptCookie"
   Use AcceptSetCookie_ "$cId"
 Use SecMarker EndOfAcceptCookie,tag:security
</Macro>

<Macro AcceptCookieRegex $regex>
 Use AcceptCookie_ "/^(?i:$regex)$/" "$regex"
</Macro>

<Macro AcceptCookie @cookie>
 Use AcceptCookie_ @cookie @cookie
</Macro>

# Check that all returned cookies are allowed
<Macro CheckCookiesAreAllowed>
 Use SecRule ENV:allowAllCookies @unconditionalMatch     "phase:~{Phase5Warn},t:none,tag:security,~{skipAfter}:CheckSetCookie"
 # Don't check cookie when not in proxying mode (interrupted before end of phase 2)
 Use SecRule &TX:allowed2  "@eq 0"                       "phase:~{Phase5Warn},t:none,tag:security,~{skipAfter}:CheckSetCookie"
 Use SecRule &ENV:allowed4 "@eq 0"                       "phase:5,t:none,tag:security,~{skipAfter}:CheckSetCookie"
  # TX.allowedCookieNames begins with | => add $ before
  Use SecRule RESPONSE_HEADERS:Set-Cookie "^(?!(?i:$%{TX.allowedCookieNames}|~{OIDCSessionCookie}[^=]*)=)([^=]+)="  "phase:~{Phase5Warn},tag:security,t:none,tag:COOKIE,~{nosecaction},capture,setvar:'TX.SetCookie=%{TX.SetCookie};%{TX.1}'"
  Use SecRule TX:SetCookie "^;*(.*)" "phase:~{Phase5Warn},tag:security,t:none,~{nosecaction},capture,setvar:'TX.SetCookie=%{TX.1}'"
  Use RuleLogOnceExt TX:SetCookie @unconditionalMatch "t:none" "~{warn}" "Cookies not enabled: %{TX.SetCookie} (Use AcceptCookie)" 5000002 "tag:security" "%{WEBAPPID}%{TX.SetCookie}"
 Use SecMarker CheckSetCookie,tag:security
</Macro>

<Macro AcceptAllCookies>
 Use SetEnv allowAllCookies 1
 # Remove individual checks on accepted cookies content
 Use SecRuleRemoveByID 5000001,5000002
 # Restore global checks on all cookies name & content
 Use SecCookieNameAllowCharacter ""
 Use SecCookieByteRange ""
</Macro>

<Macro SecIgnoreAllCookies>
 Use SetEnv ignoreAllCookies 1
 Use AcceptAllCookies
 # Disable generic syntax check on name
 Use SecRuleRemoveByID 5000004
 # Disable syntax check on name length
 Use SecRuleRemoveByID 5000204
 # Disable generic syntax check on content
 Use SecRuleRemoveByID 5000003
 # Disable specific checks on content
 Use SecRuleRemoveByID 5000001,5000002
 # Disable all checks on cookies
 #Use SecRuleRemoveByTag COOKIE
</Macro>

<Macro SetCookieEnv_ $cookie $env>
 # Remove cookie
 Use RemoveCookie "$cookie"
 # Create cookie if not existing, then append
 RequestHeader append Cookie ""
 Use EditRequestCookieExt  ",?\s*+$" ";$cookie=%{$env}e" "" env=$env
 <IfDefine emptyWAFHeaders>
  Use EditRequestCookieExt  ",?\s*+$" ";$cookie=" "" env=!$env
 </IfDefine>
 # Clean up
 Use EditRequestCookie  ",\s*+$" ""
</Macro>

<Macro SetCookieEnv $cookie $env>
 Use SetCookieEnv_ "$cookie" "$env"
 # Allow cookie (for internal checks)
 Use AddCookieValue_ "$cookie"   %{ENV.$env}
</Macro>

<Macro DeleteResponseCookieCond $cookie @cond>
 <IfDefine !noCookieRewrite>
  Use HeaderAlways2 edit Set-Cookie "^(?i)$cookie=.*" "" @cond
 </IfDefine>
 Use AcceptSetCookie_ "$cookie"
</Macro>
<Macro DeleteResponseCookie $cookie>
 Use DeleteResponseCookieCond "$cookie" early
 <IfDefine !noCookieRewrite>
  Use HeaderAlways1 edit Set-Cookie "^(?i)$cookie=.*" ""
 </IfDefine>
</Macro>


# Session ----------------------------------------------------------------------

# Check the number of session cookies sent
<Macro CountSessionCookie $sessionId>
 Use NotInsideLocation
 Use SecRule REQUEST_COOKIES:'/(?i)$sessionId/' "." "phase:1,~{nosecaction},tag:COOKIE,t:none,setvar:TX.sessionnb=+1"
</Macro>

# Use sessionid as session identifier
<Macro StoreSessionPhase_ @col @pattern $phase>
 Use SecRule @col @pattern "phase:$phase,~{nosecaction},t:none,capture,setsid:%{TX.1}"
</Macro>
<Macro StoreSessionPhase12_ @col @pattern>
 Use StoreSessionPhase_ @col @pattern 1
 Use StoreSessionPhase_ @col @pattern 2
</Macro>
# $sessionId is a regex without begin/end
<Macro SetSession $sessionId>
 Use AcceptCookieRegex "$sessionId"

 Use StoreSessionPhase12_ TX:BASENAME                  "\b(?i:$sessionId)=([^&;?]+)"
 Use StoreSessionPhase12_ REQUEST_COOKIES:'/^$sessionId$/'  "(.*)"
 Use StoreSessionPhase12_ REQUEST_HEADERS:'/^$sessionId$/'  @unconditionalMatch
 Use SecRule SESSION:user . "phase:1,~{nosecaction},t:none,setuid:%{MATCHED_VAR}"
 Use SecRule SESSION:user . "phase:2,~{nosecaction},t:none,setuid:%{MATCHED_VAR}"
 Use StoreSessionPhase_   RESPONSE_HEADERS:/^Set-Cookie2?$/ "\b(?i:$sessionId)=([^\s;]*)" 3
 Use StoreSessionPhase_   RESPONSE_HEADERS:'/^$sessionId$/' @unconditionalMatch           3

 # Sanitize cookies
 Use SanitizeCookie         "$sessionId"
 Use SanitizeHeader         "/^(?i)$sessionId$/"
 Use SanitizeResponseHeader "/^(?i)$sessionId$/"
</Macro>

# Check sessionid syntax
<Macro CheckSessionId $sessionId @syntax>
 Use NotInsideLocation
 Use SecRule TX:BASENAME       "\b(?i:$sessionId)=([^&;]*)"  "phase:1,~{nosecaction},tag:COOKIE,t:none,setvar:TX.sessionid=%{TX.1},capture"
 Use SecRule COOKIES:/^$sessionId$/ @unconditionalMatch           "phase:1,~{nosecaction},tag:COOKIE,t:none,setvar:TX.sessionname=%{MATCHED_VAR_NAME},setvar:TX.sessionid=%{MATCHED_VAR}"
 Use SecRule TX:sessionid  @syntax  "phase:1,t:none,tag:COOKIE,~{status}:400,~{increaseAuthCounter},tag:Framework,msg:'Invalid sessionid <%{TX.sessionname}=%{TX.sessionid}>'"
</Macro>

<Macro SecSessionId $sessionId $loginUrl>
 # $loginUrl must contain the leading slash
 
 Use LoginPage "$loginUrl"
 Use SetSession $sessionId
 
 # Forbids $sessionId as GET parameter
 # If present in the URL, force it to cookies
# Use SecRuleDeny TX:url     "(?i)\b(?:$sessionId)="  "phase:1,t:none,tag:specific,~{localFile}=/SecError/cookies.html,msg:'sessionid in URL <$sessionId>'"
# Use SecRuleDeny ARGS_NAMES "(?i)^(?:$sessionId)$"   "phase:2,t:none,tag:specific,msg:'sessionid in POST ARG <$sessionId>'"

 # Cookie is mandatory (except in login URL)
 <LocationMatch ^(?i:$loginUrl)/?$>
  Use SecRuleDeny &REQUEST_COOKIES_NAMES:$sessionId "@eq 0"     "phase:2,tag:COOKIE"
  Use SecRuleDeny  REQUEST_COOKIES_NAMES:$sessionId "^$"        "phase:2,tag:COOKIE"

  # Kill session ID token in login URL (early not effective in location)
  Use RemoveCookieEarly "$sessionId"
  Use RemoveCookie      "$sessionId"
 </LocationMatch>
</Macro>

<Macro CheckCookieLength $cookie $len>
 Use SecRuleDeny REQUEST_COOKIES:$cookie  "!^(?:0|$len)$"  "t:none,t:length,tag:COOKIE,~{increaseBlockCounterMax},msg:'Invalid cookie ($cookie) length <%{MATCHED_VAR}/$len> (Use CheckCookieLength)',tag:WhiteList"
</Macro>

# Check standard session cookies syntax
<Macro CheckCookieSyntax $cookie $pattern>
 Use SecRuleDeny REQUEST_COOKIES:$cookie  "!^(?:$pattern)$"  "t:none,tag:COOKIE,~{increaseBlockCounterMax},msg:'Invalid cookie ($cookie) pattern (Use CheckCookieSyntax)',tag:WhiteList"
</Macro>

# Manage cookies SameSite
<Macro CookiesSameSite $flag>
 <IfDefine !noCookieRewrite>
 Header edit Set-Cookie "(?i)(?:;\s*+SameSite\s*+=\s*+[a-z]+)"  ""              env=!AllowCookieWhenComingFromOtherSites
 Header edit Set-Cookie "$"                               "; SameSite=$flag" env=!AllowCookieWhenComingFromOtherSites
  </IfDefine>
</Macro>
<Macro CookieSameSite_ $cookie $flag $condition>
 <IfDefine !noCookieRewrite>
  Header edit Set-Cookie "(?i)((?:^|,)$cookie=.*)(?:;\s*+SameSite\s*+=\s*+[a-z]+)" "$1"                $condition
  Header edit Set-Cookie "(?i)((?:^|,)$cookie=.*)$"                             "$1;SameSite=$flag" $condition
 </IfDefine>
</Macro>
<Macro CookieSameSite @c @flag>
 Use CookieSameSite_  @c @flag env=!AllowCookieWhenComingFromOtherSites
</Macro>

