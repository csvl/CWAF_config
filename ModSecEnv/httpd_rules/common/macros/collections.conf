<Macro CollSize $col $var>
 # Total size: 5 + (name+3)* + (value+3)*
 # Some variables don't match: __KEY, KEY, __name, LAST_UPDATE_TIME => (5+3+20+3) x 3 + 16+3+15+3 = 130   
 Use SecAction                            "phase:5,tag:security,~{nosecaction},setvar:!TX.n_,setvar:TX.$var=150"
 # Names length
 Use SecRule $col:/^/ @unconditionalMatch "phase:5,tag:security,~{nosecaction},t:none,chain"
  Use SecRule MATCHED_VARS_NAMES "^$col:(.*)" "t:none,capture,setvar:TX.n_=%{TX.n_}%{tx.1}"
 Use SecRule TX:n_ @unconditionalMatch    "phase:5,tag:security,~{nosecaction},t:none,t:length,setvar:TX.$var=+%{MATCHED_VAR}"
 # Values length
 Use SecRule $col:/^/ @unconditionalMatch "phase:5,tag:security,~{nosecaction},t:none,t:length,setvar:TX.$var=+6,setvar:TX.$var=+%{MATCHED_VAR}"
 Use SecRule $col:KEY @unconditionalMatch "phase:5,tag:security,~{nosecaction},t:none,t:length,setvar:TX.$var=+1,setvar:TX.$var=+%{MATCHED_VAR}"
 <IfDefine Debug>
  Use Log "$col collection size: %{TX.$var}"
 </IfDefine>
</Macro>

<Macro CollRemoveEmptyEntries $coll>
 Use SecRule $coll:/^/ "^$" "phase:5,t:none,~{nosecaction},setvar:!%{MATCHED_VAR_NAME}"
</Macro>

# Clean-up collections matching a condition
<Macro DeleteCol    @target @pattern $col>
 Use SecRule        @target @pattern "phase:5,t:none,~{nosecaction},setvar:$col.__expire_KEY=0"
</Macro>
<Macro DontWriteCol @target @pattern $col>
 Use SecRule        @target @pattern "phase:5,t:none,~{nosecaction},setvar:!$col.KEY,setvar:!$col.__KEY,setvar:!$col.__name"
</Macro>
<Macro DontWriteInvalidCol $col>
 Use DontWriteCol $col:KEY "^none$" $col
 # Also remove empty entries
 Use CollRemoveEmptyEntries $col
</Macro>

# Truncate entry in a collection key
<Macro TruncCollVar_ $col $var $len>
 Use SecRule $col:$var "^(.{$len})" "phase:5,t:none,~{nosecaction},tag:security,capture,setvar:$col.$var=%{tx.1}"
 Use SecRule $col:$var "^$"         "phase:5,t:none,~{nosecaction},tag:security,setvar:!$col.$var"
</Macro>

# Normally should be 1008, but some overhead is missing
# Tried with 1000, but still too big (1008) => 990 to be sure
DefineStr MaxCollSize 990

# Shorten IP collection if needed
<Macro TruncIpCol_     $var $len>
 Use CollSize IP ip_size
 Use SecRule TX:ip_size "@lt ~{MaxCollSize}" "phase:5,t:none,tag:security,~{skipAfter}:AfterCollSizeIP"
  Use TruncCollVar_ IP $var $len
</Macro>
<Macro TruncGlobalCol_ $var $len>
 Use CollSize GLOBAL gl_size
 Use SecRule TX:gl_size "@lt ~{MaxCollSize}" "phase:5,t:none,tag:security,~{skipAfter}:AfterCollSizeGlobal"
  Use TruncCollVar_ IP $var $len
</Macro>
<Macro TruncColls>
 # IP
 <IfDefine EXTENDEDSTATUS>
  Use SecAction "phase:5,~{nosecaction},setvar:!IP.LastUser,setvar:!IP.BadAuth,setvar:!IP.dos,setvar:!IP.monitor_ip,setvar:!IP.ReqNb,setvar:!IP.VulnScan"
 </IfDefine>
 <IfDefine UACache>
  Use TruncIpCol_ knownUA 400
  Use TruncIpCol_ knownUA 200
  Use TruncIpCol_ knownUA   0
</IfDefine>
 Use TruncIpCol_ 404     400
 Use TruncIpCol_ 404     200
 Use TruncIpCol_ 404       0
 # Remove complete collection in case it's still too big (normally 1008)
 Use CollSize IP ip_size
 Use DontWriteCol TX:ip_size "@gt ~{MaxCollSize}" IP
 Use SecMarker AfterCollSizeIP,tag:security
 # GLOBAL
 <IfDefine ExtendedInfo>
  Use TruncGlobalCol_ cookieNotHttpOnly     150
  Use TruncGlobalCol_ cookieNotSamesite     150
  Use TruncGlobalCol_ cookieNotSamesiteNone 150
  Use TruncGlobalCol_ cookieNotHttpOnly       0
  Use TruncGlobalCol_ cookieNotSamesite       0
  Use TruncGlobalCol_ cookieNotSamesiteNone   0
 </IfDefine>
 Use TruncGlobalCol_ unknownResponseHeader  100
 # Remove complete collection in case it's still too big (normally 1008)
 Use CollSize GLOBAL gl_size
 Use DontWriteCol TX:gl_size "@gt ~{MaxCollSize}" GLOBAL
 Use SecMarker AfterCollSizeGlobal,tag:security
</Macro>

# Cleanup empty counter
<Macro CleanupCounter $coll $key>
 <IfDefine !EXTENDEDSTATUS>
  Use SecRule $coll:$key "^0?$" "phase:5,t:none,~{nosecaction},setvar:!$coll.$key"
 </IfDefine>
 <IfDefine !noSecurityRules>
  <IfDefine !Throttling>
   Use SecRule $coll:$key "@unconditionalMatch" "phase:5,t:none,~{nosecaction},setvar:TX.notempty_$coll"
  </IfDefine>
 </IfDefine>
</Macro>

# Cleanup empty counters
# In case all variables are empty or 0, the key is removed (unless throttling is activated)
<Macro CleanupCounters>
 <IfDefine !noSecurityRules>
  Use CleanupCounter IP blocked
  Use CleanupCounter IP BadAuth
  Use CleanupCounter IP dos
  Use CleanupCounter IP LastUser
  Use CleanupCounter IP ReqNb
  ###Use CleanupCounter SESSION blocked
  ###Use CleanupCounter SESSION BadAuth
  <IfDefine !EXTENDEDSTATUS>
   <IfDefine !Throttling>
    Use SecRule &TX:notempty_IP      "@eq 0" "phase:5,~{nosecaction},t:none,initcol:IP=none,setvar:IP.TIMEOUT=0,expirevar:IP.KEY=0"
    ###Use SecRule &TX:notempty_SESSION "@eq 0" "phase:5,~{nosecaction},t:none,initcol:SESSION=none,setvar:SESSION.TIMEOUT=0,expirevar:SESSION.KEY=0"
   </IfDefine>
  </IfDefine>
 </IfDefine>
 Use TruncColls
</Macro>
