# :: Macros: CSP

<Macro NoCSPChange>
 Use SecAction "phase:2,~{nosecaction},setenv:noCSPChange"
 Use SecAction "phase:3,~{nosecaction},setenv:noCSPChange"
</Macro>

<Macro NoCSP>
 Use SecAction "phase:2,~{nosecaction},setenv:noCSPheader,setenv:AllowHttpAndHttpsFrames"
</Macro>

<Macro CSPUnSet @header @cond>
 <IfDefine !noCSPheader>
  Use HeaderUnsetCond @header @cond
 </IfDefine>
</Macro>

<Macro CSPSet @value>
 <IfDefine !noCSPheader>
  Header set ~{CspHeader}      @value  env=!noCSPChange
  Header set ~{CspHeaderDebug} @value  env=!noCSPChange
 </IfDefine>
</Macro>

<Macro CSPSetDefault @value>
 Use CSPSet @value
</Macro>

<Macro CSPEditDebug $from $to>
 Header add x-debug-cspedit "$from***$to"
</Macro>
<Macro CSPEdit $from @to>
 <IfDefine !noCSPheader>
  Header edit ~{CspHeader}      "(?i)$from" @to  env=!noCSPChange
  Header edit ~{CspHeaderDebug} "(?i)$from" @to  env=!noCSPChange
 </IfDefine>
</Macro>

<Macro CSPEditMultiple_ $from @to @cond>
 <IfDefine !noCSPheader>
  Header edit* ~{CspHeader}      "(?i)$from" @to  @cond
  Header edit* ~{CspHeaderDebug} "(?i)$from" @to  @cond
 </IfDefine>
</Macro>
<Macro CSPEditMultiple @from @to>
 Use CSPEditMultiple_ @from @to env=!noCSPChange
</Macro>

<Macro CSPAddDirective $directive $loc>
 Use CSPEdit  ";\s*+$directive( )\s*+|$" ";$directive $loc ~{cspSelf}$1"
</Macro>

<Macro CSPAddDirectiveHttpAndHttps @directive $site>
 Use CSPAddDirective @directive "http://$site https://$site"
 Use CSPAllowMixedContent
</Macro>

<Macro CSPAllowEvalInScript>
 Use EmptyMacro
 #Use CSPAddDirective script-src "'unsafe-eval'"
</Macro>

<Macro CSPAllowFrameIn3rdParty $sites>
 <IfDefine !noCSPheader>
  Setenv AllowFrameIn3rdParty
  Use CookiesSameSite None
  Use CSPAddDirective frame-ancestors "$sites"
  # To forbid a frame-ancestor to change "document.domain"
  Header append "Feature-Policy" "document-domain 'self'"

  # Skip the rest if we already have a match
  Use SecRule ENV:frame_opt @unconditionalMatch "phase:2,t:none,~{skipAfter}:CheckAfterWildCardRef"

   # Remove protocol from site if "*"
   Use SecAction "phase:2,~{nosecaction},setvar:'TX.frame_site=$sites',setvar:TX.frame_ref=%{ENV.referer}"
   Use SecRule TX:frame_site "^[*]$"  "phase:2,t:none,~{nosecaction},setvar:TX.frame_ref=%{ENV.referer_host}"

   # Disable HTTPS check on referer page if frame is not in HTTPS
   Use SecRule &ENV:HTTPS_                  "@eq 0"   "phase:2,~{skipAfter}:CheckWildCardRef"
   # Disable HTTPS check if explicitely allowed to mix HTTP & HTTPS
   Use SecRule ENV:AllowHttpAndHttpsFrames  "@eq 1"   "phase:2,~{skipAfter}:CheckWildCardRef"
    # Don't change header if calling page is not in HTTPS
    Use SecRule ENV:referer "!^https" "phase:2,t:none,~{skipAfter}:CheckAfterWildCardRef"
   Use SecMarker CheckWildCardRef
    # Store URI of referer's site
    Use SecRule TX:frame_ref  "@within $sites"   "phase:2,setenv:'frame_opt=%{ENV.referer}/',~{skipAfter}:CheckAfterWildCardRef,~{skipAfter}:CheckAfterWildCardRef"
    # Store (wilcard) URI of referer's site
    Use SecRule TX:frame_ref  "@wildcard $sites" "phase:2,setenv:'frame_opt=%{ENV.referer}/',~{nosecaction}"
  Use SecMarker CheckAfterWildCardRef
 </IfDefine>
</Macro>
<Macro AllowFrameIn3rdParty @sites>
 Use CSPAllowFrameIn3rdParty @sites
</Macro>

<Macro CSPAllowFrameInAll3rdParties>
 <IfDefine !noCSPheader>
  Use CSPAllowFrameIn3rdParty "*"
  Use CSPAllowHttpAndHttpsFrames
  # Useless?
  Use DisableFrameOptions
 </IfDefine>
</Macro>
<Macro AllowFrameInAll3rdParties>
 Use CSPAllowFrameInAll3rdParties
</Macro>

<Macro CSPAllowFrameFrom3rdParty @sites>
  #Use CSPAddDirective child-src @sites
  Use CSPAddDirective frame-src @sites
</Macro>
<Macro AllowFrameFrom3rdParty @sites>
 Use CSPAllowFrameFrom3rdParty @sites
</Macro>

<Macro CSPAllowHttpAndHttpsFrames>
 Use CSPAllowMixedContent
 Use SecAction "phase:2,~{nosecaction},setenv:AllowHttpAndHttpsFrames"
</Macro>
<Macro AllowHttpAndHttpsFrames>
 Use CSPAllowHttpAndHttpsFrames
</Macro>

<Macro CSPAllowObjectFrom3rdParty @sites>
  Use CSPAddDirective object-src @sites
</Macro>
<Macro AllowObjectFrom3rdParty @sites>
 Use CSPAllowObjectFrom3rdParty @sites
</Macro>

<Macro CSPAllow3rdPartyScript @sites>
 Use CSPAddDirective script-src @sites
</Macro>
<Macro CSPAllow3rdPartyScriptHttpAndHttps @site>
 Use CSPAddDirectiveHttpAndHttps script-src @site
</Macro>

<Macro CSPAllow3rdPartyStyle @sites>
 Use CSPAddDirective style-src @sites
</Macro>
<Macro CSPAllow3rdPartyStyleHttpAndHttps @site>
 Use CSPAddDirectiveHttpAndHttps style-src @site
</Macro>

<Macro CSPAllow3rdPartyFont @sites>
 Use UnusedParam @sites
 #Use CSPAddDirective font-src @sites
</Macro>
<Macro CSPAllow3rdPartyFontHttpAndHttps @site>
 Use UnusedParam @site
 #Use CSPAddDirectiveHttpAndHttps font-src @site
</Macro>

# Allow hot linking of images, ...
<Macro CSPAllowImages @sites>
 Use CSPAddDirective img-src   @sites
 Use CSPAddDirective media-src @sites
</Macro>
<Macro CSPAllowNoImages>
 Use CSPEdit " ((?:img|media)-src\s+[^;*]*)[*]" "$1'self'"
</Macro>
<Macro CSPAllowAllImages>
 Use CSPEdit "\s*+((?:img|media)-src) [^;]+"   "$1 *"
</Macro>
# Obsolete
<Macro CSPAllowHotLinking @sites>
 Use CSPAllowImages @sites
</Macro>
<Macro CSPAllowAllHotLinking>
 Use CSPAllowAllImages
</Macro>

# Allow web sockets connections
<Macro CSPAllowJSConnect @sites>
 Use CSPAddDirective connect-src @sites
</Macro>

# Allow internal scripts
<Macro CSPAllowInternalScript>
 Use CSPAddDirective script-src "'unsafe-inline'"
 #CSPDebugUnsafe
</Macro>

# Do Not Log External Scripts (ex: e-mails)
<Macro DoNotLogExternalScripts $url>
 Use NotInsideLocation
 Use SecAction "phase:1,~{nosecaction},setvar:TX.DoNotLogExternalScripts=%{TX.DoNotLogExternalScripts},$url"
</Macro>

# Disallow internal scripts
<Macro CSPNoInternalScript>
 Use CSPEditMultiple  "(script-src[^;]+)'unsafe-inline'"  "$1"
</Macro>

# Allow internal styles
<Macro CSPallowInternalStyle>
 Use CSPAddDirective style-src "'unsafe-inline'"
 #CSPDebugUnsafe
</Macro>

# Disallow internal styles
<Macro CSPNoInternalStyle>
 Use CSPEditMultiple  "(style-src[^;]+)'unsafe-inline'"  "$1"
</Macro>

# Allow mixed content (HTTP resource in HTTPS page)
<Macro CSPAllowMixedContent>
 Use CSPEditMultiple  ";?\s*+(?:block-all-mixed-content|upgrade-insecure-requests) *;?"  ";"
</Macro>

<Macro CSPIgnoreWarning @pattern>
 Use SecRule TX:url "^/!report/|/csp-report$" "phase:5,t:none,chain,~{nosecaction}"
  Use SecRule REQUEST_BODY  @pattern "t:none,ctl:auditEngine=off"
</Macro>

<Macro CSPAllow3rdPartyResources @site>
 Use CSPAllow3rdPartyScript    @site
 Use CSPAllow3rdPartyStyle     @site
 Use CSPAllow3rdPartyFont      @site
 Use CSPAllowImages            @site
 Use CSPAllowFrameFrom3rdParty @site
 Use CSPAllowJSConnect         @site
</Macro>

# Support deprecated syntax still needed for CSP 1.0
<Macro CSPCopyTarget_ $src $target>
 Use CSPEdit  "\b$src ([^;]+)"  "$src $1; $target $1"
</Macro>

<Macro CSPMergeLocation_ $loc>
 # location1 ...not; location1
 Use CSPEditMultiple  "(?i)\s+($loc)( [^;]*)? \1(?=[ ;]|$)"   " $1$2"
</Macro>
# 3 times for some locations, even more manually for 'self'
<Macro CSPMergeLocations_ @loc>
 Use CSPMergeLocation_ @loc
 Use CSPMergeLocation_ @loc
 Use CSPMergeLocation_ @loc
</Macro>
<Macro CSPMergeLocations>
 #Use CSPMergeLocations_ "'self'"
 Use CSPMergeLocations_ "about:"
 #Use CSPMergeLocations_ "blob:"
 Use CSPMergeLocations_ "~{cspSelf}"
 Use CSPMergeLocations_ "~{cspSelf}"
 Use CSPMergeLocations_ "~{cspSelf}"
 Use CSPMergeLocations_ "~{cspSelf}"
 Use CSPMergeLocations_ "~{cspSelf}"
 Use CSPMergeLocations_ "~{cspSelf}"
 Use CSPMergeLocations_ "\b(?:http|ws)s?://[^; ]+"
 Use CSPMergeLocations_ "\b(?:http|ws)s?://[^; ]+"
 Use CSPMergeLocations_ "\b(?:http|ws)s?://[^; ]+"
 Use CSPMergeLocations_ "\b(?:http|ws)s?://[^; ]+"
 Use CSPMergeLocations_ "\b(?:http|ws)s?://[^; ]+"
 Use CSPMergeLocations_ "\b(?:http|ws)s?://[^; ]+"
 Use CSPMergeLocations_ "\b(?:http|ws)s?://[^; ]+"
 Use CSPMergeLocations_ "\b(?:http|ws)s?://[^; ]+"
 Use CSPMergeLocations_ "\b(?:http|ws)s?://[^; ]+"
 Use CSPMergeLocations_ "data:"
 Use CSPMergeLocations_ "'unsafe-eval'"
 Use CSPMergeLocations_ "'unsafe-inline'"
</Macro>

<Macro CSPMergeDirective_ $directive>
 Use CSPEdit  "(^|;)\s*+$directive\s+([^;]*);(.*;)?\s*+$directive\s+([^;]*);?"  "$1$directive $2 $4;$3"
 # Allow about: for adblockers => no, disable the logging of this CSP instead
 #Use CSPEdit  "(^|;)\s*+$directive\s+"  "$1$directive about: "
</Macro>

<Macro CSPMergeDirectives>
  Use CSPMergeDirective_ "base-uri"
  Use CSPMergeDirective_ "connect-src"
  Use CSPMergeDirective_ "default-src"
  Use CSPMergeDirective_ "form-action"
  Use CSPMergeDirective_ "frame-ancestors"
  Use CSPMergeDirective_ "object-src"
  Use CSPMergeDirective_ "plugin-types"
  Use CSPMergeDirective_ "sandbox"
  Use CSPMergeDirective_ "script-src"
  Use CSPMergeDirective_ "style-src"
  Use CSPMergeDirective_ "font-src"
  Use CSPMergeDirective_ "img-src"
  Use CSPMergeDirective_ "media-src"
</Macro>

<Macro SecurityHeaderSSLOnly @header $token>
 <IfDefine !noCSPheader>
  Header edit @header "(?<=$token) http://[^ ;]+" "" "expr=reqenv('noCSPChange') != '1' && reqenv('AllowHttpAndHttpsFrames') != '1'"
 </IfDefine>
</Macro>

<Macro CleanUpSecurityHeader @header>
 <IfDefine !noCSPheader>
  # CSP is only needed on HTML pages but any file (image, robots.txt) could be interpreted as HTML and used as base frame
  #Header unset @header     env=!HTML
  Header edit* @header "(\b(?:http|ws)s?://[^/]+):(?:80|443)\b"  "$1"
 </IfDefine>
</Macro>

<Macro CleanUpCSPHeader @header>
 <IfDefine !noCSPheader>
  Use HeaderUnsetCond @header "expr=reqenv('noCSPChange') != '1' && reqenv('noCSPheader') == '1'"
  Use CleanUpSecurityHeader @header
  # optimisation (deprecated)
  Use CSPEdit  "\bframe-ancestors [*][^;]*"   "frame-ancestors *"
 </IfDefine>
 <IfDefine noCSPheader>
  Use HeaderUnset @header
 </IfDefine>
</Macro>

<Macro ReportHeaderDebug @header>
 Header edit @header "report-to=" "report-only=" "expr=reqenv('noCSPChange') != '1' && reqenv('debugCSP') == '1'"
</Macro>

<Macro CSPCleanUp>
 Use SecRule &ENV:detection "@eq 1" "phase:3,~{nosecaction},setenv:debugCSP,setenv:CSPReportOnly"
 Use CSPUnSet ~{CspHeader}       "expr=reqenv('noCSPChange') != '1' && reqenv('CSPReportOnly') == '1'"
 Use CleanUpCSPHeader ~{CspHeader}
 Use CleanUpSecurityHeader Reporting-Endpoints
 # Both headers are set => disable debug if not needed
 Use CSPUnSet         ~{CspHeaderDebug}  "expr=reqenv('noCSPChange') != '1' && reqenv('debugCSP') != '1'"
 Header edit          ~{CspHeaderDebug} ";?\s*+upgrade-insecure-requests\s*+;?"  ";"
 Use CleanUpCSPHeader ~{CspHeaderDebug}

 Use CleanUpSecurityHeader X-Frame-Options

 # Reporting API
 Use ReportHeaderDebug Content-Security-Policy
 Use ReportHeaderDebug Cross-Origin-Embedder-Policy
 Use ReportHeaderDebug Cross-Origin-Opener-Policy

 Use CSPMergeDirectives
 Use CSPMergeLocations
 Use CSPEditMultiple  " {2,}"   " "
 Use CSPEditMultiple  "(?: ;|; )"   ";"
</Macro>

<Macro CSPReport>
 Use SecAction "phase:3,~{nosecaction},setenv:debugCSP"
 Header edit ~{CspHeaderDebug} " /csp$" " /debug/csp$"
</Macro>

<Macro CSPReportOnly>
 Use CSPReport
 Use SecAction "phase:3,~{nosecaction},setenv:CSPReportOnly"
</Macro>

<Macro CSPDebugUnsafe>
 Use CSPReport
 Header edit*  ~{CspHeaderDebug} "\s*+'unsafe-inline'\s*+" " "
 Header edit*  ~{CspHeaderDebug} "\s*+'unsafe-eval'\s*+" " "
 Header edit   ~{CspHeaderDebug} "/!report/csp" "/!report/debug/csp"
 Header edit   ~{CspHeaderDebug} "/csp-report$" "/debug/csp-report"
</Macro>

# Allow to communicate to pop-up with window.postMessage()
<Macro AllowNewWindows>
 Warning Macro AllowNewWindows is obsolete
 #<IfDefine !noCSPheader>
 # Header set Cross-Origin-Opener-Policy "same-origin-allow-popups; report-to=coop" env=!noCSPChange
 #</IfDefine>
</Macro>

# CORS
<Macro SecAllowCORSOrigin $origin>
 Use SecAction "phase:2,~{nosecaction},setenv:'allowCORS=%{ENV.allowCORS}|$origin',setenv:!ignoreCORS"
</Macro>
<Macro SecAllowHttpCORSOrigin>
 <IfDefine !noCORSheader>
  Use SetenvSec allowCORSProtocol "https?"
 </IfDefine>
</Macro>
<Macro SecAllowCORSAllOrigins>
 <IfDefine !noCORSheader>
  Use SecAllowCORSOrigin "*"
  Use SecAllowHttpCORSOrigin
  Use SecAction "phase:2,~{nosecaction},setenv:'allowCORS=*',setenv:!ignoreCORS"
 </IfDefine>
</Macro>
<Macro SecIgnoreCORS>
 <IfDefine !noCORSheader>
  #Use SecAllowCORSOrigin "-"
  Use SecAction "phase:2,~{nosecaction},setenv:ignoreCORS,setenv:allowAuthCORS"
 </IfDefine>
</Macro>

<Macro SecAllowAuthCORS>
 <IfDefine !noCORSheader>
  Use SecRuleRemoveById 4002210
  Use SecAction "phase:2,~{nosecaction},setenv:allowAuthCORS"
 </IfDefine>
</Macro>

<Macro SecNoCORSWarning>
 Use SecRuleRemoveById 4002209,4002211
</Macro>

<Macro SecNoReferrerPolicy>
 Use SecAction "phase:2,~{nosecaction},setenv:noReferrerPolicy"
</Macro>

