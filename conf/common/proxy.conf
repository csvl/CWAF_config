# ::-----------------------------------------------------------------------
# :: Proxy general settings
# ::-----------------------------------------------------------------------

# :: Suppress forward proxying
ProxyRequests Off

# :: Overwrite errors coming from servers with new ones generated by the proxy
# Cannot be disabled by location, only vhosts => not compatible with Web Services
#ProxyErrorOverride On

# Always send Content-Length instead of chunked (safer)
Setenv proxy-sendcl

# Wait up to X seconds for slow servers answers
ProxyTimeOut ~{BackendResponseTimeMax}

# ::-----------------------------------------------------------------------
# :: Sends public hostname to back-end server,
# ::  to let it think its own address is the external one.
# :: This is useful if the application uses the hostname to built a path
# ::  (like building URL to embed in e-mail messages)
Use ProxyPreserveHost On
#ProxyVia On

# Forbid index
Header set X-Robots-Tag "noindex"  env=!allow_SE

# Send client info to back-end Web server
RequestHeader set    Client-IP           %{CLIENT-IP}e
RequestHeader set    X-Originating-IP    %{CLIENT-IP}e
RequestHeader set    X-Proxy-Remote-Addr %{CLIENT-IP}e
RequestHeader set    X-Real-IP           %{CLIENT-IP}e
RequestHeader set    X-Remote-Addr       %{CLIENT-IP}e
RequestHeader set    X-Remote-IP         %{CLIENT-IP}e
RequestHeader set    X-Client-Port       %{REMOTE_PORT}e
RequestHeader set    X-Client-Port       %{CLIENT-PORT}e  env=CLIENT-PORT
# early to send to loopback in case of error proxying => included in REQUEST_HEADERS
#RequestHeader set    ~{IPAddressHeader}  %{CLIENT-IP}e early
# To be overwritten for HTTPS
RequestHeader set    X-Forwarded-Proto   http
RequestHeader set    X-Forwarded-Port    %{VHOST-PORT}e  env=VHOST-PORT
# If no correlation header is used
RequestHeader SetIfEmpty X-Correlation-ID "~{UNIQUE_ID}"
RequestHeader edit*      X-Correlation-ID "[(]null[)]" ""
RequestHeader SetIfEmpty X-Request-ID     "~{UNIQUE_ID}"
RequestHeader edit*      X-Request-ID     "[(]null[)]" ""

# Done by mod_proxy, but not always ...
# If we add it manually, it sometimes is duplicated or added in request headers
#RequestHeader append X-Forwarded-For    %{CLIENT-IP}e
#RequestHeader append X-Forwarded-Host   %{HOST}e
#RequestHeader append X-Forwarded-Server "~{IncidentServerName}"

# For internal processing
RequestHeader set    WAF-Remote-IP   %{CLIENT-IP}e  env=!localhost
RequestHeader set    WAF-Unique-id   "~{UNIQUE_ID}" env=!localhost
RequestHeader set    WAF-Unique-id   "expr=%{req_novary:WAF-Unique-id}" "expr=-n reqenv('WAF-Unique-id') && -n reqenv('localhost')"
RequestHeader edit*  WAF-Unique-id   "[(]null[)]" ""

# RFC 7239 - could add list from X-Forwarded-For & ~{IPAddressHeader}: for=...,for=...
RequestHeader append   Forwarded  "By=~{IncidentServerName}.~{IncidentServerId};For=%{CLIENT-IP}e;Host=%{HOST}e;Proto=http"
RequestHeader edit     Forwarded  "Proto=http\b"  "Proto=https"  env=HTTPS_
# Done by mod_remoteip: RequestHeader set X-Forwarded-By   ...

# Send reverse proxy (external) URL to back-end Web server
RequestHeader set  X-Proxy-Request "http://%{HOST}e%{Request_URI}e"
RequestHeader edit X-Proxy-Request "^http:"  "https:"  env=HTTPS_
RequestHeader set  X-Forwarded-Prefix "%{Request_URI}e"

# Add geo info to headers
<Macro SetRequestHeaderGeo @header $tag>
 Use SetHeaderEnvSecure    @header $tag
 RequestHeader unset       @header env=unsetWafheaders
</Macro>
Use SetRequestHeaderGeo X-country       geo_country_code
Use SetRequestHeaderGeo X-country_name  geo_country_name
Use SetRequestHeaderGeo X-city          geo_city
Use SetRequestHeaderGeo X-zip           geo_zip
UndefMacro SetRequestHeaderGeo

<IfDefine EXTENDEDSTATUS>
 Use SecRule RESPONSE_HEADERS:'/^(?i)(?!X-WAF)/' @unconditionalMatch "phase:3,t:none,~{nosecaction},setenv:'backheaders=%{ENV.backheaders}, %{MATCHED_VAR_NAME}:%{MATCHED_VAR}'"
 Use SetHeaderEnv X-WAF-Backend-Headers backheaders
 Header edit  X-WAF-Backend-Headers "^,\s*+"             ""
 Header edit* X-WAF-Backend-Headers "RESPONSE_HEADERS:" ""
 Use SetHeaderEnv X-WAF-Backend-path     backend
 Use SetHeaderEnv X-WAF-Backend-fullpath backend_fullpath
 Use SetHeaderEnv X-WAF-Backend-status   backstatus
 Use SetHeaderEnv X-WAF-Backend-worker   WORKER_NAME
 # early to send to loopback in case of error proxying
 Setenv WAF_EXTENDEDSTATUS 1
</IfDefine>

# Response headers: %2f -> /
<Macro SubstResponseHeaderPath2F @header>
 <IfDefine !noHeaderChange>
  Header edit* @header "[%]2[fF]" "/" env=remapUrl
 </IfDefine>
</Macro>
Use SubstResponseHeaderPath2F access-control-allow-origin
Use SubstResponseHeaderPath2F Content-Location
Use SubstResponseHeaderPath2F Location
Use SubstResponseHeaderPath2F URI
Use SubstResponseHeaderPath2F X-Forms_Based_Auth_Required
Use SubstResponseHeaderPath2F X-Forms_Based_Auth_Return_Url

<IfDefine !NOSSL>
 # ------------- SSL config for proxy connection to back-end --------------
 SSLProxyEngine on
 SSLProxyVerify require
 SSLProxyVerifyDepth 4
 SSLProxyProtocol     ~{SSLProtocol}
 SSLProxyCipherSuite  "~{SSLCipherSuite}"

 <IfDefine !NoDefaultCertif>
  # Server Certificate + Private Key (PEM encoded)
  SSLProxyMachineCertificateFile  ~{SSLDir}/server.pem
 </IfDefine>
 # Back-end servers Certificate Authority certificates (PEM encoded)
 SSLProxyCACertificateFile ~{SSLDir}/backend-trusted-list.pem
 
 # Default: Check back-end user certificate against CN/Alt-name & expiration date
 #SSLProxyVerify none
 #SSLProxyCheckPeerName   off
 #SSLProxyCheckPeerExpire off
</IfDefine>

<IfModule auth_openidc_module>
 OIDCSSLValidateServer on
 OIDCValidateIssuer    on
</IfModule>
