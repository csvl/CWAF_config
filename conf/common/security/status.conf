# ModSecurity rules for Status remapping and checking
# ---------------------------------------------------------------
# Range: 2100100-2109599 (to code status codes in id)

# Done in phase 3 to potentially remap status to another one
# Does not work => could be done in phase 5

# Check response status only if not blocked in phase 2
SecRule &TX:allowed2 "@eq 0" "phase:3,t:none,tag:security,~{skipAfter}:EndOfStatusCheck"

# Ignore authentication required with no authentication provided
SecRule RESPONSE_STATUS "^401"  "phase:3,t:none,chain,tag:security,tag:Status,~{skipAfter}:EndOfStatusCheck"
 SecRule RESPONSE_HEADERS:WWW-Authenticate "@unconditionalMatch"  chain
  SecRule &REQUEST_HEADERS:Authorization "@eq 0" ""
  
# Count 401 (authentication failures) as an attack only if it's an HTML page
SecRule RESPONSE_HEADERS:Content-Type "^application/x?html" "phase:3,t:none,chain,id:2101401,tag:security,tag:Auth,~{skipAfter}:EndOfStatusCheck,~{log},tag:Status,msg:'Bad authentication (from back-end) <%{USERID}>'"
 SecRule RESPONSE_STATUS "^401"                           "t:none,~{increaseAuthCounter},setenv:noRemapStatus"

# Count 403 (authorisation failures) as an attack
SecRule RESPONSE_STATUS "^403"  "phase:3,id:2101403,t:none,~{skipAfter}:EndOfStatusCheck,~{warn},tag:Status,~{increaseBlockCounter},msg:'Unauthorised (from back-end)',setenv:noRemapStatus"

# Remap error status -----------------------------------------------------------

# Don't remap error status for SOAP & JSON when providing content
SecRule RESPONSE_HEADERS:Content-Type "(?i:json|xml)" "phase:3,tag:security,~{nosecaction},t:none,msg:'SOAP/JSON error from back-end - do not remap',ctl:ruleRemoveById=2101100-2101599,ctl:auditLogParts=+E"
SecRule ENV:resp_js                   "@eq 1"         "phase:3,tag:security,~{nosecaction},t:none,msg:'Fetch error from back-end - do not remap',ctl:ruleRemoveById=2101100-2101599"

<IfDefine !NoRemapError>
 <Macro RemapError__ $error $newerr $action>
  SecRule RESPONSE_STATUS "^$error"  "phase:3,t:none,id:2101$error,tag:Status,~{statusResp}:$newerr,~{noIncreaseBlockCounter},msg:'Error from back-end ($error) - blocking content'$action,tag:Status,setenv:denied,setenv:remapStatus"
  # For detection mode (avoid double entry)
  SecRule RESPONSE_STATUS "^$error"  "phase:3,t:none,id:2101$error,tag:Status,~{skipAfter}:AfterBackStatus,tag:security"
  # When not remapped, log only (and increase counter sometimes)
  Use SecRuleRemoveByID 2102$error
  Use SkipAfterOnSuccess_ 3 2101$error,tag:security AfterBackStatus
   SecRule RESPONSE_STATUS "^$error"  "phase:3,id:2102$error,tag:security,tag:Status,t:none,~{log},msg:'Error from back-end (not remapped)'$action,setenv:noRemapStatus"
   SecAction                          "phase:3,id:2102$error,tag:security,tag:Status,~{nosecaction},setenv:!denied"
  Use SecMarker AfterBackStatus,tag:security
 </Macro>
 <Macro RemapError_ $error $newerr @action>
  Use SecRuleRemoveByID 2101$error
  Use RemapError__  $error $newerr @action
 </Macro>
 <Macro RemapError $error>
  Use RemapError_ $error  $error ",~{increaseBlockCounter}"
 </Macro>

 Use RemapError  400
 Use RemapError  405
 Use RemapError__ 408 500 ""
 Use RemapError__ 500 400 ",~{increaseBlockCounter}"

 # Count 404 (page not found) as an attack (except on fonts, images, ...)
 SecRule RESPONSE_STATUS "!^404"           "phase:3,id:2101404,t:none,tag:security,~{skipAfter}:EndOfStatus404"
 SecRule TX:noblock "^1"                   "phase:3,id:2101404,t:none,tag:security,~{skipAfter}:EndOfStatus404"
 # If exactly same request some time ago, don't increase counter
 SecRule IP:404 "%{TX.hash_host-ua-url},"  "phase:3,id:2101404,t:none,tag:security,~{skipAfter}:EndOf404Attack"
  Use RemapError__ 404 404 ",~{increaseBlockCounter},msg:'File not found on back-end',setvar:tx.add404"
  SecAction                                "phase:3,id:2101404,t:none,tag:security,~{skipAfter}:EndOfStatus404"
 SecMarker EndOf404Attack
 # If exactly same request some time ago, don't increase counter
 Use RemapError__ 404 404 ",msg:'File not found on back-end, not first time'"

 Use SecRule &TX:add404 "@eq 0"                        "phase:5,id:2101404,tag:security,t:none,~{skipAfter}:EndOfStatus404"
 Use SecRule IP:404 "@contains %{TX.hash_host-ua-url}" "phase:5,id:2101404,tag:security,t:none,~{skipAfter}:EndOfStatus404"
  Use SecAction                                        "phase:5,id:2101404,tag:security,~{nosecaction},setvar:'IP.404=%{TX.hash_host-ua-url},%{IP.404}'"
 SecMarker EndOfStatus404

 # Unusual status
 Use LogUntrappedStatuses
</IfDefine>

SecMarker EndOfStatusCheck

