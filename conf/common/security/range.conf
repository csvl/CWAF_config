# ModSecurity rules for Range header
# ---------------------------------------------------------------
# Range: 2000500-2000509

SecRule &REQUEST_HEADERS:'/^(?i:(?:Request-)?Range)$/' "@eq 0" "phase:2,t:none,tag:security,tag:Protocol,~{skipAfter}:AfterRange"
 # Syntax limited to 95 MB (100 GB if enabled, but range comparison cannot always be done)
 DefineStr rangeSyntax     (?:\s*+(?:[0-9]{1,8}-[0-9]{0,8}|[0-9]{0,8}-[0-9]{1,8})\s*+)
 DefineStr bigRangeSyntax  (?:\s*+(?:[0-9]{1,12}-[0-9]{0,12}|[0-9]{0,12}-[0-9]{1,12})\s*+)
 DefineStr rangeSyntaxDeny "~{status}:416,tag:Protocol"
 Use SecRuleDeny REQUEST_HEADERS:'/^(?i:(?:Request-)?Range)$/' "!^(?:bytes\s*+=~{bigRangeSyntax}(?>,~{bigRangeSyntax})*)?$" "phase:2,t:none,~{rangeSyntaxDeny},id:2000501,msg:'Range: invalid syntax'"
 Use SecRuleDeny REQUEST_HEADERS:'/^(?i:(?:Request-)?Range)$/' "!^(?:bytes\s*+=~{rangeSyntax}(?>,~{rangeSyntax})*)?$"       "phase:2,t:none,~{rangeSyntaxDeny},id:2000502,msg:'Range: requesting a file block bigger than 95 MB (Use AllowHugeRanges)'"
 Use SecRuleDeny REQUEST_HEADERS:'/^(?i:(?:Request-)?Range)$/' "[=,]\s*+0-.*,0-"                                            "phase:2,t:none,~{rangeSyntaxDeny},msg:'Range: several times same range'"
 Use SecRuleDeny REQUEST_HEADERS:'/^(?i:(?:Request-)?Range)$/' "[=,]\s*+0-,[0-9]"                                           "phase:2,t:none,~{rangeSyntaxDeny},msg:'Range: Overlapping'"

 # Int comparison only supports up to 15 728 639 => only compare lower than that
 SecRule REQUEST_HEADERS:Range "\b([0-9]+)-([0-9]+)\b"  "phase:2,tag:security,tag:Protocol,t:none,id:2000500,capture,~{nosecaction},setvar:TX.r1=%{TX.1},setvar:TX.r2=%{TX.2}"
 Use SecRuleGTBig TX:r1 %{TX.r2}  "2000500" "~{status}:416,msg:'Range: 2nd value lower than 1st'"
 #SecRule TX:r1 @unconditionalMatch                                              "phase:2,tag:Protocol,t:none,id:2000500,tag:security,t:length,~{nosecaction},setvar:tx.r1l=%{MATCHED_VAR}"
 #SecRule TX:r2 @unconditionalMatch                                              "phase:2,tag:Protocol,t:none,id:2000500,tag:security,t:length,~{nosecaction},setvar:tx.r2l=%{MATCHED_VAR}"
 #SecRule TX:r2l "@lt %{TX.r1l}"                                                 "phase:2,tag:Protocol,t:none,id:2000500,~{rangeSyntaxDeny},msg:'Range: 2nd value lower than 1st'"
 #SecRule TX:r2l "@lt 8"                                                         "phase:2,tag:Protocol,t:none,id:2000500,tag:security,~{skipAfter}:AfterBigRange"
 #SecRule TX:r2l "@gt 8"                                                         "phase:2,tag:Protocol,t:none,id:2000500,tag:security,~{skipAfter}:AfterRange"
 #SecRule TX:r2 "!^[1][0-5][0-7][0-2][0-8][0-6][0-3][0-9]$"                      "phase:2,tag:Protocol,t:none,id:2000500,tag:security,~{skipAfter}:AfterRange"
 #SecMarker AfterBigRange,tag:security,tag:Protocol
 #SecRule TX:r2 "@lt %{TX.r1}"                                                   "phase:2,tag:Protocol,t:none,id:2000500,~{rangeSyntaxDeny},msg:'Range: 2nd value lower than 1st'"

 # Limit number of ranges (DoS) -------------------------------------------------
 # If more than XXX overlapping ranges then remove header to serve the whole file
 #MaxRangeOverlaps ~{MaxRange}
 # Remove "Range" header for PDF files (can go up to at least 34 but maybe more), otherwise block
 SecRule TX:EXT "^(?i:pdf)$" "phase:2,t:none,tag:security,tag:Protocol,~{skipAfter}:EndOfRange"
  # Block if more than 100?
  Use SecRuleDeny REQUEST_HEADERS:Range "(?:,[^,]*){100}" "phase:2,t:none,~{rangeSyntaxDeny},msg:'Range: Too many ranges'"
 SecMarker EndOfRange,tag:security,tag:Protocol
 SecRule REQUEST_HEADERS:Range "(?:,[^,]*){~{MaxRange}}" "phase:2,t:none,~{nosecaction},tag:security,tag:Protocol,setenv:removeRange"
SecMarker AfterRange,tag:security,tag:Protocol

RequestHeader unset Range env=removeRange
# Old header (Netscape) accepted by Apache but not standard
RequestHeader unset Request-Range
