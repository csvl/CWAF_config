# ::-----------------------------------------------------------------------
# :: Macros definitions
# ::-----------------------------------------------------------------------

# parameters substitution:
#    $param is replaced by the bare value without quotes
#    @param is replaced by the value between double quotes


<Macro NotInsideLocation>
 # Just to ensure it's not used inside a location
 TraceEnable off
</Macro>

<Macro Substitute @s>
 <IfModule substitute_module>
  Substitute @s
 </IfModule>
</Macro>

# Manipulate HTTP header even for redirect, etc.
<Macro HeaderAlwaysClean @header>
 # Obfuscate binary characters
 Use EditHeader @header "[\x00-\x1f\x7f]" "*"
 # Remove false positives |-ruleid|ruleid|
 Use EditHeader @header  "(?:^|[|]+)-([^|]+)[|]+\\g{1}(?:[|]+|$)"      "|"
 Use EditHeader @header  "(?:^|[|]+)-([^|]+)[|]+\\g{1}(?:[|]+|$)"      "|"
 Use EditHeader @header  "(?:^|[|]+)-([^|]+)[|]+\\g{1}(?:[|]+|$)"      "|"
 # Remove false positives |ruleid|-ruleid|
 Use EditHeader @header  "(?:^|[|]+)([^|]+)[|]+-\\g{1}(?:[|]+|$)"      "|"
 Use EditHeader @header  "(?:^|[|]+)([^|]+)[|]+-\\g{1}(?:[|]+|$)"      "|"
 Use EditHeader @header  "(?:^|[|]+)([^|]+)[|]+-\\g{1}(?:[|]+|$)"      "|"
 # Remove doubles |ruleid|ruleid|
 Use EditHeader @header  "(?:^|[|]+)([^|]+)[|]+(?:\\g{1}(?:[|]+|$))+"  "|$1|"
 Use EditHeader @header  "(?:^|[|]+)([^|]+)[|]+(?:\\g{1}(?:[|]+|$))+"  "|$1|"
 Use EditHeader @header  "(?:^|[|]+)([^|]+)[|]+(?:\\g{1}(?:[|]+|$))+"  "|$1|"
 # Remove false positives |-ruleid|
 Use EditHeader @header  "(?:^|[|]+)-[0-9]+(?:[|]+|$)"                 "|"
 Use EditHeader @header  "(?:^|[|]+)-[0-9]+(?:[|]+|$)"                 "|"
 Use EditHeader @header  "(?:^|[|]+)-[0-9]+(?:[|]+|$)"                 "|"
 # Remove ||
 Use EditHeader @header  "[|]{2,}"                               "|"
 # Remove | at the begin
 Use EditHeader @header  "^\s*+[|]\s*+"                            ""
 # Remove | at the end
 Use EditHeader @header  "\s*+[|]\s*+$"                            ""
 Use EditHeader @header "[(]null[)]" ""
</Macro>
<Macro HeaderUnsetCond @header @cond>
 Header always unset   @header @cond
 Header        unset   @header @cond
</Macro>
<Macro HeaderUnset   @header>
 Header always unset @header
 Header        unset @header
</Macro>
<Macro HeaderUnsetIfInternal_ @header>
 # Passed (OK)
 #Use HeaderUnsetCond @header env=allowed4
 # Sub-request
 Use HeaderUnsetCond @header env=localhost
 Use HeaderUnsetCond @header env=loopback
 Use HeaderUnsetCond @header env=EnforceLocalURL
 #Use HeaderUnsetCond @header "expr= %{HANDLER} == 'text/html'"
 Use HeaderUnsetCond @header "expr= -T %{IS_SUBREQ}"
 Use HeaderUnsetCond @header "expr= -T %{IS_SUBREQ}"
 Use HeaderUnsetCond @header "expr= %{REQUEST_STATUS} =~ /^30~[12]/"
</Macro>

<Macro HeaderAlways $cmd @header @v>
 Header always      $cmd @header @v
 Header onsuccess   $cmd @header @v
</Macro>
<Macro HeaderAlways1 @cmd @header @v @p1>
 Header always       @cmd @header @v @p1
 Header onsuccess    @cmd @header @v @p1
</Macro>
<Macro HeaderAlways2 @cmd @header @v1 @p1 @p2>
 Header always       @cmd @header @v1 @p1 @p2
 Header onsuccess    @cmd @header @v1 @p1 @p2
</Macro>

<Macro AllowIpInLocationHeader>
 Use SetEnv AllowIpInLocationHeader 1
</Macro>
<Macro AllowInternalIpInLocationHeader>
 Use AllowIpInLocationHeader
 Use SetEnv AllowInternalIpInLocationHeader 1
</Macro>

# Set userid into session & cookie
<Macro DisableUserTracking>
  SetEnv DisableUserTracking 1
</Macro>

<Macro WriteWAFCookie>
 <IfDefine !noWafCookie>
  Use SecRule ENV:wafCookie . "phase:2,~{nosecaction},t:none,~{hashShort},setenv:wafInfo=%{MATCHED_VAR}"
  # Permanent cookie (forbidden by GDPR) => ; expires=Thu, 31-Dec-3020 23:59:59 GMT
  # Session cookie
  Header add Set-Cookie  "waf_info=%{wafInfo}e; Path=/"  env=wafInfo
 </IfDefine>
</Macro>

# Session cookie (permanent cookie forbidden by European ePrivacy Directive)
<Macro SetWAFCookie $name>
 <IfDefine !noWafCookie>
  Use SecRule &ENV:HTML  "@eq 0"          "phase:3,t:none,setenv:!waf_cookie_$name,~{skipAfter}:AfterSetCookieName"
  Use SecRule ENV:DisableUserTracking  .  "phase:3,t:none,setenv:!waf_cookie_$name,~{skipAfter}:AfterSetCookieName"
   Use SecRule ENV:$name  "!^[(]null[)]"  "phase:3,t:none,~{nosecaction},setenv:cookie_$name"
  Use SecMarker AfterSetCookieName,tag:security

  Header add  Set-Cookie  "$name=%{$name}e; Path=/; httponly"  env=cookie_$name
  # Permanent cookie (forbidden by GDPR) => ; expires=Thu, 31-Dec-2020 23:59:59 GMT
 </IfDefine>
</Macro>

# Erase cookie from browser
<Macro EraseCookie $name $cond>
 Header set Set-Cookie "$name=;expires=Tue, 15 Nov 1994 08:12:31 GMT" $cond
</Macro>

# Set userid into session & cookie
<Macro SetCookieUserid>
 Use SetWAFCookie waf_user
 Use SetWAFCookie waf_cn
 #Use WriteWAFCookie
</Macro>

<Macro ObfuscateEtag>
 Use SecRule RESPONSE_HEADERS:Etag @unconditionalMatch "phase:3,~{nosecaction},t:none,t:md5,t:hexEncode,setenv:ETAG=%{MATCHED_VAR}"
 Header set Etag "%{ETAG}e"  env=ETAG
</Macro>

<Macro Banner $env>
 SecContentInjection On
 Use SecRule RESPONSE_CONTENT_TYPE ^text/html "phase:3,~{nosecaction},append:'<div style=\"position: absolute; top: 20px; margin-left: auto; margin-right: auto; text-align: center; width:100%;\"><table width=100%><tr><td bgcolor=red style=\"color:white; text-align: center; font-size:150%;\"><b>&nbsp;*** $env environment ***&nbsp;</b></td></tr></table></div>'"
# Use RemapURL
# Substitute "s`<body([^>]*>)`<--NOURLSUBST--body$1<table width=100%><tr><td bgcolor=red style='color:white; text-align: center; font-size:150%;'><b>\&nbsp;*** $env environment ***\&nbsp;</b></td></tr></table>`i"
</Macro>

<Macro SecObsolete_ @target $pattern $msg>
 Use NotInsideLocation
 Use SecRule ENV:PathToIgnore @unconditionalMatch  "phase:1,t:none,tag:specific,~{skipAfter}:AfterObsoleteLocation"
  Use SecRule @target  "(?i)$pattern"  "phase:1,t:none,tag:specific,setvar:'TX.obsolete_$pattern',ctl:auditLogParts=-CEGI,~{localFile}=/SecError/obsolete.html,~{noErrorHeader},msg:'Obsolete $msg'"
  Use RuleLogSome IP "obsolete_$pattern" 100
 Use SecMarker AfterObsoleteLocation
</Macro>

<Macro SecObsoleteLocation @pattern>
 Use SecObsolete_ TX:url   @pattern location
</Macro>

<Macro SecObsoleteHost                 @pattern>
 Use SecObsolete_ REQUEST_HEADERS:Host @pattern location
</Macro>

<Macro IE7Compat>
  BrowserMatch "MSIE (?:[89]|[1-7][0-9])"      ie8plus
  BrowserMatch "Trident/(?:[789]|[1-6][0-9])"  ie8plus
  BrowserMatch "Edge/"                         ie8plus
  Header set  X-UA-Compatible  "IE=EmulateIE7" env=ie8plus
</Macro>

<Macro AllowRobotsTagHeader>
  SetEnv AllowRobotsTagHeader 1
</Macro>

# Check for entry pages (cf. forceful browsing)
# Origin contains the site that triggered the request, followed by redirected ones if any
<Macro CheckEntryPages>
 Use SecRule &REQUEST_HEADERS:Origin "@eq 0"                                     "phase:2,t:none,~{skipAfter}:AfterCheckEntryPages,tag:security,tag:Anti-CSRF"
 Use SecRule  REQUEST_HEADERS:Origin "^(?:null)?$"                               "phase:2,t:none,~{skipAfter}:AfterCheckEntryPages,tag:security,tag:Anti-CSRF"
 Use SecRule  REQUEST_HEADERS:Origin "^https?://(?:~{TrustedLocations})(?::|$)"  "phase:2,t:none,~{skipAfter}:AfterCheckEntryPages,tag:security,tag:Anti-CSRF"
  Use SecRuleDeny REQUEST_HEADERS:Origin "!^https?://%{REQUEST_HEADERS.Host}$"   "phase:2,t:none,tag:Anti-CSRF,~{status}:404,~{decreaseBlockCounter},msg:'Request from another site not allowed (CSRF attack on user?)'"
 Use SecMarker AfterCheckEntryPages,tag:security,tag:Anti-CSRF
</Macro>
<Macro SetEntryPage>
 Use SecRuleRemoveByFullTag Anti-CSRF
</Macro>

<Macro EditHeader @h @pat @target>
 RequestHeader      edit* @h @pat @target
 <IfDefine ClientStatus>
  Use HeaderAlways1 edit* @h @pat @target
 </IfDefine>
</Macro>

<Macro SetHeaderEnv $h $env>
 RequestHeader set   $h "%{$env}e" env=$env
 <IfDefine EXTENDEDSTATUS>
  # For ErrorDocument, headers not processed => processed in sub-phase where VAR becomes REDIRECT_VAR
  Header        set $h "%{REDIRECT_$env}e" "expr=-z resp('$h') && reqenv('REDIRECT_$env') != '' && reqenv('$env') == ''"
  Header always set $h "%{$env}e"          "expr=-z resp('$h') && reqenv('REDIRECT_$env') == '' && reqenv('$env') != ''"
 </IfDefine>
 Use HeaderAlwaysClean $h
</Macro>
<Macro SetHeaderEnvSecure @h @env>
 RequestHeader unset      @h early
 Use SetHeaderEnv         @h @env
</Macro>

# Add SSL info in request headers
<Macro CopySSLEnv $env>
 RewriteOptions InheritBefore
 #RewriteCond %{REQUEST_URI} "!^/SecError(?:Res)?/"
  RewriteCond %{ENV:$env}  "^$"
   RewriteCond %{SSL:$env}  .
    RewriteRule ^  -  [E=$env:%{SSL:$env},DPI]
</Macro>
<Macro SetSSLHeaderEnv  @h @env>
 Use CopySSLEnv            @env
 Use SetHeaderEnvSecure @h @env
</Macro>

# -------------------------------------
<Macro SetEnv $var $value>
 # As Setenv cannot modify a var
 UnsetEnv $var
 SetEnv $var "$value"
</Macro>
<Macro SetEnvEarly $var $value>
 SetEnvIf Request_URI ^ $var=$value
</Macro>
<Macro SetEnvCGI $var $value>
 SetEnvIf Request_URI ^ $var=$value
</Macro>
<Macro SetEnvRew $var $value>
 RewriteOptions InheritBefore
 RewriteRule ^ - [E=$var:$value,NE,DPI]
</Macro>
<Macro SetEnvSec $var $value>
 Use SecAction "phase:1,~{nosecaction},setenv:'$var=$value'"
 Use SecAction "phase:2,~{nosecaction},setenv:'$var=$value'"
</Macro>

<Macro UnsetEnv $var>
 UnsetEnv $var
</Macro>
<Macro UnsetEnvEarly $var>
 SetEnvIf Request_URI ^ !$var
</Macro>
<Macro UnsetEnvCGI $var>
 SetEnvIf Request_URI ^ !$var
</Macro>
<Macro UnsetEnvRew $var>
 RewriteOptions InheritBefore
 RewriteRule ^ - [E=!$var,NE,DPI]
</Macro>
<Macro UnsetEnvSec $var>
 UnsetEnv $var
 SetEnvIf Request_URI ^ !$var
</Macro>

<Macro DisableNosniff>
 <IfDefine !noSecurityHeader>
  Use HeaderUnset "X-Content-Type-Options"
 </IfDefine>
</Macro>

<Macro DisableXSSFilter>
 <IfDefine !noSecurityHeader>
  Use HeaderUnset "X-XSS-Protection"
 </IfDefine>
</Macro>

<Macro DisableFrameOptions>
 Use CSPUnset X-Frame-Options            env=!noCSPChange
 #Use CSPUnset Cross-Origin-Opener-Policy env=!noCSPChange
</Macro>

<Macro DisableSecurityHeaders>
 Use DisableNosniff
 Use DisableXSSFilter
 Use DisableFrameOptions
 Use NoCSP
 Use SecIgnoreCORS
 Use SecNoReferrerPolicy
</Macro>

<Macro AliasLocal $alias $target>
 Use NotInsideLocation
 Use SecRule TX:url "^$alias(?:/.+)?$" "phase:1,t:none,~{nosecaction},setenv:locationOK"
 # Suppress query string as it's local
 RewriteOptions InheritBefore
 RewriteRule "^$alias(/.+)?$" "$target$1?" [NE,NS,DPI,PT]
</Macro>

<Macro Alias $alias $target>
 Use SecRuleEngineUrl Off "^$alias(?:/.+)?$"
 RewriteOptions InheritBefore
 RewriteRule "^$alias(/.+)?$" "%{REQUEST_SCHEME}://%{HTTP_HOST}:%{SERVER_PORT}$target$1" [NE,NS,P,E=InternalProxy,DPI]
 <Location $alias>
  RequestHeader unset X-Forwarded-Host
  RequestHeader unset X-Forwarded-Port
  RequestHeader unset X-Forwarded-Proto
 </Location>
 #RewriteRule "^$alias(/.*)$" "$target$1" [NE,NS,DPI,PT]
</Macro>

<Macro Redirect_ $alias $target $flags>
 Use SecRuleEngineUrl Off "^$alias(?:/.+)?$"
 RewriteOptions InheritBefore
 RewriteRule "^$alias(/.+)?$" "$target$1" [NE,NS,R=tmp,L,$flags,DPI]
</Macro>
<Macro RedirectStatus @alias @target $status>
 Use Redirect_        @alias @target "R=$status"
</Macro>
<Macro Redirect     @alias @target>
 Use RedirectStatus @alias @target tmp
</Macro>
<Macro RedirectPerm @alias @target>
 Use RedirectStatus @alias @target permanent
</Macro>


# Fix MIME types ---------------------------------------------------------------
<Macro FixMimeTypeExt $ext $type>
 <IfModule mime_module>
  AddType "$type" "$ext"
 </IfModule>
 # more flexible mechanism
 RewriteOptions InheritBefore
 RewriteRule "[.](?:$ext)$" - [E=fix-type:$type,NE,DPI]
</Macro>

<Macro FixCommonMimeTypesExt>
 Use FixMimeTypeExt "htm"   "text/html"
 Use FixMimeTypeExt "html"  "text/html"
 Use FixMimeTypeExt "xml"   "text/xml"
 
 Use FixMimeTypeExt "css"   "text/css"
 #Could return JSON: Use FixMimeTypeExt "js"    "application/javascript"

 Use FixMimeTypeExt "gif"   "image/gif"
 Use FixMimeTypeExt "jpg"   "image/jpeg"
 Use FixMimeTypeExt "jpeg"  "image/jpeg"
 Use FixMimeTypeExt "png"   "image/png"
 Use FixMimeTypeExt "svg"   "image/svg+xml"
 Use FixMimeTypeExt "svgz"  "image/svg+xml"

 # To validate befoe forcing
 #Use FixMimeTypeExt "otf"   "font/otf"
 #Use FixMimeTypeExt "ttf"   "font/ttf"
 #Use FixMimeTypeExt "woff"  "font/woff"
 #Use FixMimeTypeExt "woff2" "font/woff2"
 # collections take parameters => don't overwrite: font/sfnt font/collection

 Use FixMimeTypeExt "pdf"   "application/pdf"

 Use FixMimeTypeExt "doc"   "application/msword"
 Use FixMimeTypeExt "docx"  "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
 Use FixMimeTypeExt "ppt"   "application/vnd.ms-powerpoint"
 Use FixMimeTypeExt "pptx"  "application/vnd.openxmlformats-officedocument.presentationml.presentation"
 Use FixMimeTypeExt "xls"   "application/vnd.ms-excel"
 Use FixMimeTypeExt "xlsx"  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"

 Use FixMimeTypeExt "odg"   "application/vnd.oasis.opendocument.graphics"
 Use FixMimeTypeExt "odp"   "application/vnd.oasis.opendocument.presentation"
 Use FixMimeTypeExt "ods"   "application/vnd.oasis.opendocument.spreadsheet"
 Use FixMimeTypeExt "odt"   "application/vnd.oasis.opendocument.text"
</Macro>

<Macro FixMimeTypeIncorrect @type1 $type2>
 # This will not work until 2.4.7
 Use SecRule RESPONSE_HEADERS:Content-Type @type1 "phase:3,~{nosecaction},setenv:'fix-type:$type2'"
</Macro>

<Macro FixCommonMimeTypesIncorrect>
 Use FixMimeTypeIncorrect "application/js" "application/javascript"
</Macro>

# Specific rules ---------------------------------------------------------------
<Macro SecEmailSubject $arg>
 Use SecDisableNL "$arg"
 Use SecRuleDeny ARGS:$arg "\b(?:b?cc|to):" "phase:2,t:~{shellDecode},msg:'e-mail injection'"
</Macro>

# Back-end time-out ------------------------------------------------------------
<Macro BackEndTimeOut @t>
 ProxyTimeOut @t
</Macro>

<Macro AllowAcunetix>
 Use SecRuleRemoveByID 2000682-2000683
</Macro>

<Macro SecNoCheckResponse>
 Use SecResponseBodyAccess      Off
 Use SecStreamOutBodyInspection Off
 Use SecRuleRemoveByFullTag ARGS_Resp
 Use SecRuleRemoveByFullTag ResponseBodyAccess
 Use SecRuleRemoveByTag     ^Output
 Use SecAction "phase:2,~{noResponseBodyAccess}"
</Macro>

<Macro SecCheckResponse>
 Use SecResponseBodyAccess On
 Use SecRuleRemoveByFullTag ResponseBodyAccess
 Use SecAction "phase:2,~{ResponseBodyAccess}"
</Macro>

<Macro ObsoleteSecFramework $fw>
 Use Warning "Sec$fw is obsolete, use $fw"
 Use $fw
</Macro>

<Macro GlobalTimeOut @t>
 # Wait up to X seconds for clients requests, but also for some back-end connections (this should be changed)
 TimeOut @t
 
 # Wait up to X seconds for back-end server response
 ProxyTimeOut @t

 # timeout (s) after which gracefully shutdown server will exit (Unix only)
 <IfModule !mpm_winnt_module>
  GracefulShutDownTimeout @t
 </IfModule>
</Macro>

# Invalid Headers
<Macro InvalidRequestHeader_ $h $action>
 Use SecRuleDeny REQUEST_HEADERS_NAMES:'$h'|!REQUEST_HEADERS_NAMES:'~{IgnoredHeaders_}' @unconditionalMatch "phase:2,tag:SecRuleHeaders,tag:ForbiddenRequestHeader,t:none,~{status}:400,msg:'Invalid header',logdata:%{MATCHED_VAR},$action"
 #RequestHeader unset $h early
</Macro>
<Macro InvalidRequestHeader @h>
 Use InvalidRequestHeader_  @h "tag:security"
</Macro>

# Some forward proxies add X-Forwarded-... & X-Correlation-ID
DefineStr ProxyRequestHeaders_ /^(?i:Front-End-Https$|(?:X-)?WAF-|X-(?:Proxy-|SSL(?:-(?:CLIENT-VERIFY|SESSION-ID))?$))/
<Macro InvalidProxyRequestHeaders>
 # Headers only set by known front-end
 Use InvalidRequestHeader_ "~{ProxyRequestHeaders_}" "phase:1,tag:ReqHeaderProxy"
</Macro>

# Normally redefined later
<Macro iOS_oneIcon>
 RewriteRule "apple-touch-icon-.*-precomposed.png" "apple-touch-icon-precomposed.png" [DPI,PT]
</Macro>

# OCSP Stapling
<Macro SSLUseStapling @switch>
 <IfDefine !NOSSL>
  SSLUseStapling @switch 
 </IfDefine>
</Macro>

<Macro ApplicationInvalidRequest_ $host @coll @pattern>
 Use NotInsideLocation
 Use SecRule REQUEST_HEADERS:Host "!$host" "phase:1,t:none,tag:security,tag:Ignore,~{skip}:1"
 Use SecRule @coll @pattern                "phase:1,t:none,~{stop404},msg:'Application bug: invalid URL',tag:Ignore"
</Macro>

<Macro ApplicationInvalidUrl    @host        @url>
 Use ApplicationInvalidRequest_ @host TX:url @url
</Macro>

<Macro ApplicationInvalidRequest @host              @req>
 Use ApplicationInvalidRequest_  @host REQUEST_LINE @req
</Macro>

Include conf/common/macros/*.conf
