#  General setup for the SSL virtual host
<IfModule ssl_module>
 #   SSL Engine Switch:
 #   Enable/Disable SSL for this virtual host.
 SSLEngine on
 
 #   SSL Engine Options:
 #   Set various options for the SSL engine.
 #   o FakeBasicAuth:
 #     Translate the client X.509 into a Basic Authorisation.  This means that
 #     the standard Auth/DBMAuth methods can be used for access control.  The
 #     user name is the `one line' version of the client's X.509 certificate.
 #     Note that no password is obtained from the user. Every entry in the user
 #     file needs this password: `xxj31ZMTZzkVA'.
 #   o ExportCertData:
 #     This exports two additional environment variables: SSL_CLIENT_CERT and
 #     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
 #     server (always existing) and the client (only existing when client
 #     authentication is used). This can be used to import the certificates
 #     into CGI scripts.
 #   o StdEnvVars:
 #     This exports the standard SSL/TLS related `SSL_*' environment variables.
 #     Per default this exportation is switched off for performance reasons,
 #     because the extraction step is an expensive operation and is usually
 #     useless for serving static content. So one usually enables the
 #     exportation for CGI and SSI requests only.
 #   o StrictRequire:
 #     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
 #     under a "Satisfy any" situation, i.e. when it applies access is denied
 #     and no other module can change it.
 #   o OptRenegotiate:
 #     This enables optimized SSL connection renegotiation handling when SSL
 #     directives are used in per-directory context. 
 
 SSLOptions +StrictRequire +OptRenegotiate
 # When not in debug mode, don't export these varaiables unless needed
 <IfDefine EXTENDEDSTATUS>
  SSLOptions +StdEnvVars +ExportCertData
 </IfDefine>
 
 # Add SSL info in request headers
 <Macro SetSSLHeaderToBackend @h @v>
  Use SetSSLHeaderEnv         @h @v
  RequestHeader unset         @h env=unsetWafheaders
 </Macro>
 Use SetSSLHeaderToBackend SSL_CLIENT_S_DN                SSL_CLIENT_S_DN              
 Use SetSSLHeaderToBackend X-SSL-CLIENT-S-DN              SSL_CLIENT_S_DN
 Use SetSSLHeaderToBackend SSL_CLIENT_CERT                SSL_CLIENT_CERT
 Use SetSSLHeaderToBackend X-SSL-CLIENT-CERT              SSL_CLIENT_CERT
 Use SetSSLHeaderToBackend SSL_SESSION_ID                 SSL_SESSION_ID
 Use SetSSLHeaderToBackend X-SSL-SESSION-ID               SSL_SESSION_ID
 Use SetSSLHeaderToBackend SSL_CLIENT_VERIFY              SSL_CLIENT_VERIFY
 Use SetSSLHeaderToBackend X-SSL-CLIENT-VERIFY            SSL_CLIENT_VERIFY
 Use SetSSLHeaderToBackend SSL_CLIENT_M_SERIAL            SSL_CLIENT_M_SERIAL
 Use SetSSLHeaderToBackend X-SSL-CLIENT-M-SERIAL          SSL_CLIENT_M_SERIAL
 Use SetSSLHeaderToBackend SSL_CLIENT_S_DN_serialNumber   SSL_CLIENT_S_DN_serialNumber
 Use SetSSLHeaderToBackend X-SSL-CLIENT-S-DN-serialNumber SSL_CLIENT_S_DN_serialNumber
 Use SetSSLHeaderToBackend SSL_USERID                     USER_NAME
 UndefMacro SetSSLHeaderToBackend

 # Fix hexa encoding
 #Use SecRule REQUEST_HEADERS:SSL_CLIENT_S_DN  "(.*)"  "phase:2,~{nosecaction},t:none,t:escapeSeqDecode,capture,setenv:SSL_CLIENT_S_DN=%{TX.1},msg:'<%{ENV.SSL_CLIENT_S_DN}>'"
 
 # Disable ARGS during TLS Renegotiation
 # This cannot be overwritten in further location !?!
 # Cannot be set in global scope either
 #<Location />
 #SSLRenegBufferSize 0
 #</Location>
 
 # Increase initial values to allow CRL download (headers) and renegotiation (also body)
 <IfModule reqtimeout_module>
  RequestReadTimeout ~{RequestReadTimeoutTLS}
 </IfModule>
</IfModule>
