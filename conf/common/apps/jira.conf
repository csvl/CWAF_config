# ModSecurity rules for Confluence
# ---------------------------------------------------------------
# Range: 6000040-6000059


#"Content-type: application/json" but not JSON body ---------------------------------------
# body="dummy=true"
DefineStr jira_badJson_api1 "issues/[0-9]+/(?:voters|watchers)"
# body="business"
DefineStr jira_badJson_api2 "browse-project/project-type/active"
#body="fr_FR"
DefineStr jira_badJson_api3 "mypreferences"
DefineStr jira_badJson_rest_api  "rest/api/[0-9.]+/(?:~{jira_badJson_api1}|~{jira_badJson_api2}|~{jira_badJson_api3})"
# body="PASS" if end of URL is "/status" or body="{code} a table {code}" if the end of url is "/actualresult"
# various URL observed /rest/raven/1.0/testrun/(9595)?/steps/(588[45])?/(actualresult|status)
DefineStr jira_badJson_rest_raven "rest/(?:raven|tzdetect)/[0-9.]+/"
DefineStr jira_badJson "(?:~{jira_badJson_rest_raven}|~{jira_badJson_rest_api})"

<Macro Jira_Proxy_ $(ssl) @frontServer $frontPath @protocol $backServer $backPort @backPath $DB>
 Use Proxy$(ssl)Ext @frontServer "$frontPath" @protocol "$backServer" $backPort @backPath
 Use SecWebAppId Jira
 #Use RemapURLAbsoluteDefaultPort performed in macros below
 Use UTF8Encoding "^$frontPath/"

 Use Atlassian "$frontPath"

 # Allow HTML & technical terms in the description, JQL, etc.
 Use SecRuleIgnoreTargetsByTagUrl "^$frontPath/" security "ARGS:body,ARGS:comment,ARGS:customfield_10003,ARGS:description,ARGS:form.description,ARGS:jql,ARGS:jqlContext,ARGS:labels,ARGS:query,ARGS:summary"
 
 # Bug: unencoded & in parameter "query"
 Use SecRule TX:url "^$frontPath/rest/" "phase:1,t:none,chain,~{nosecaction}"
  Use SecRule ARGS_GET_NAMES:query @unconditionalMatch "t:none,ctl:ruleRemoveById=2000020-2000021,ctl:ruleRemoveById=2002905,ctl:ruleRemoveById=2003061-2003099,ctl:ruleRemoveById=4003715,ctl:ruleRemoveById=4003732,ctl:ruleRemoveById=5000211"

 <Location $frontPath/>
  Use SecWebAppId Jira
  Use DB$DB
  
  Use DisableParanoidMode

  #Filename or directory name user dependent in url used as parameter 
  
  Use AcceptAllCookies
  
  Use CSPallowInternalScript
  Use CSPallowInternalStyle
  Use DisableNosniff
  
  # Several ARGS contain JSON
  Use SecAllowJsonInArgs

  # Several ARGS contain |
  Use SecAllowPipeInArgs

  # Allow Jira to check widget availability using Apache-HttpClient
  Use AllowJavaHttpClient
  
  Use SecURLAllowAllChars
  Use SecAllowAllExt
  #Use SecAllowCharsInUpDownDocs ",!"
  Use SecAllowQueryInPost
  Use SecArgNameAllowCharacter "$;:>\x5b\x5d "
  Use SecAllowTechnicalArgs
  Use AllowJson
  Use SecIgnoreCORS
  
  Use SecArgsNbMax    1000
  Use SecArgSizeMax 200000

  Use SecUploadFileLimit 20
  
   # JQL syntax is used a bit everywhere with ()
   Use SecRuleRemoveById 2000363
 </Location>
 
 <LocationMatch ^$frontPath/(?:servicedesk/customershim/)?secure/attachment/>
  Use SecAllowPlusInUpDownDocs
 </LocationMatch>
 
 #<LocationMatch ^$frontPath/download/(?:contextbatch/js/[a-zA-Z,-_.]+/batch.js|resources/)>
  #Use SecUrlAllowChars ":,"
 #</LocationMatch>
 
 <LocationMatch ^$frontPath/rest/(?:internal/[0-9]+/AttachTemporaryFile|servicedesk/[0-9]+/servicedesk/customer/comment/tempfile)$>
  Use SecAllowContentType "application/octet-stream|text/xml"
  # Content-type should be text/xml, but sometimes it's application/octet-stream => XML is auto-detected
  Use NoXMLAutodetect "^application/octet-stream"
  Use AllowXML
 </LocationMatch>

 <LocationMatch ^$frontPath/(?:issue|secure|servicedesk)/>
  Use SecAllowPipeInArgs
 </LocationMatch>
 
 <Location $frontPath/rest/api>
  Use SecArgNameAllowEmpty
 </Location>
 
 # CVE-2021-43942: CSRF
 <LocationMatch ^$frontPath/rest/collectors/1.0/template/custom>
  Use CheckEntryPages
 </LocationMatch>

 <Location $frontPath/rest/jira-mail-plugin>
  Use SecAllowJsonInArgs
  Use SecAllowBackSlash
 </Location>
 
 # CVE-2022-26135
 <Location rest/nativemobile/[0-9.]+/batch$>
  Use SecRuleArg requests.location "!^/" "~{status}:400,msg:'CVE-2022-26135'"
 </Location>
 
 <Location $frontPath/s/> 
  Use SecUrlAllowChars ":~,"
 </Location>
 
 <Location $frontPath/secure/>
  Use SecAllowJsonInArgs
  # Allow ../ in arg returnurl
  Use SecRuleRemoveById 2000111,2000113
  Use SecAllowBackSlash
 </Location>
 
 <Location $frontPath/plugins/servlet/gadgets>
  Use SecAllowJsonInArgs
  Use SecAllowURL
  Use AllowFrameFrom3rdParty "https://marketplace.atlassian.com"
 </Location>

 # HTML to PDF convertor
 <Location $frontPath/plugins/servlet/jeditor_pdf_converter>
  Use SecArgSizeMax 500000
 </Location>

 <LocationMatch ^$frontPath/~{jira_badJson}>
  Use SecRequestBodyAccess Off
 </LocationMatch>
</Macro>

<Macro Jira_Pg_Proxy @frontServer @frontPath @protocol @backServer @backPort @backPath>
 Use Jira_Proxy_ ""  @frontServer @frontPath @protocol @backServer @backPort @backPath "PostGres"
</Macro>

<Macro Jira_Pg_ProxySSL @frontServer @frontPath @protocol @backServer @backPort @backPath>
 Use Jira_Proxy_  SSL  @frontServer @frontPath @protocol @backServer @backPort @backPath "PostGres"
</Macro>

<Macro Jira_My_Proxy @frontServer @frontPath @protocol @backServer @backPort @backPath>
 Use Jira_Proxy_ ""  @frontServer @frontPath @protocol @backServer @backPort @backPath "MySql"
</Macro>

<Macro Jira_My_ProxySSL @frontServer @frontPath @protocol @backServer @backPort @backPath>
 Use Jira_Proxy_  SSL   @frontServer @frontPath @protocol @backServer @backPort @backPath "MySql"
</Macro>

DefineStr JiraApiRestUrl_ "(?:/rest/(?:servicedesk)?api)"
<Macro JiraApi_Proxy @ssl @frontServer $frontPath @protocol @backServer @backPort @backPath $DB>
 Use SecRuleUrlPhase1 "!^~{JiraApiRestUrl_}/" 6000040 "msg:'This path is not allowed'"
 Use Jira_Proxy_     @ssl @frontServer "$frontPath" @protocol @backServer @backPort @backPath $DB
 Use SecWebAppId Jira-api
 Use SecAuditLog "~{SecLog}/../jira-api_audit.log"
 Use AllowAutomatedTools
 Use WebAPI
</Macro>
<Macro JiraApiRead_Proxy @ssl @frontServer @frontPath  @protocol @backServer @backPort @backPath $DB>
 Use JiraApi_Proxy       @ssl @frontServer @frontPath  @protocol @backServer @backPort @backPath $DB
 Use SecRuleDeny REQUEST_METHOD "!^(?:GET|HEAD)$" "t:none,msg:'Invalid method'"
</Macro>
