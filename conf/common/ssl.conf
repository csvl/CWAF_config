##
##  SSL Global Context
##
##  All SSL configuration in this context applies both to
##  the main server and all SSL-enabled virtual hosts.
##

#
#   Some MIME-types for downloading Certificates and CRLs
#
AddType application/x-x509-ca-cert .crt
AddType application/x-pkcs7-crl    .crl

#   Inter-Process Session Cache:
#   Configure the SSL Session Cache: First the mechanism 
#   to use and second the expiring timeout (in seconds).
LoadModule socache_shmcb_module modules/mod_socache_shmcb.so
# Using TLS session tickets without restarting the web server frequently (e.g. daily) compromises perfect forward secrecy
SSLSessionTickets off
SSLSessionCache         shmcb:logs/ssl_scache(~{SSLSessionCacheSize})
SSLSessionCacheTimeout  ~{SSLSessionTimeout}

# OCSP
# Client certificate validation
SSLOCSPEnable ~{UseOCSP}
# Connection time-out
SSLOCSPResponderTimeout          30
# Recheck each hour
SSLOCSPResponseMaxAge          3600
# Allow 10 min time skew
SSLOCSPResponseTimeSkew         600

# Server OCSP stapling
Use SSLUseStapling on
# Connection time-out
SSLStaplingResponderTimeout       30
# Keep (valid) responses for 5 days
SSLStaplingStandardCacheTimeout 432000
# Allow 1h time skew
SSLStaplingResponseTimeSkew     3600
# Recheck each hour
#SSLStaplingStandardCacheTimeout 3600
# In case of revocated/blocked, recheck each minute
SSLStaplingErrorCacheTimeout      60
# Only one response at a time (unless multiple certificates) => 10 KB
SSLStaplingCache       shmcb:logs/ocsp_scache(20480)
# Don't send errors to clients
SSLStaplingReturnResponderErrors off
SSLStaplingFakeTryLater          off

#   Semaphore:
#   Configure the path to the mutual exclusion semaphore the
#   SSL engine uses internally for inter-process synchronization. 
 #Mutex default

#   Pseudo Random Number Generator (PRNG):
#   Configure one or more sources to seed the PRNG of the 
#   SSL library. The seed data should be of good random quality.
#   WARNING! On some platforms /dev/random blocks if not enough entropy
#   is available. This means you then cannot use the /dev/random device
#   because it would lead to very long connection times (as long as
#   it requires to make more entropy available). But usually those
#   platforms additionally provide a /dev/urandom device which doesn't
#   block. So, if available, use this one instead. Read the mod_ssl User
#   Manual for more details.
SSLRandomSeed startup builtin
SSLRandomSeed connect builtin
<IfModule !mpm_winnt_module>
 SSLRandomSeed startup file:/dev/urandom 2048
 # Too slow to use on each connection: SSLRandomSeed connect file:/dev/urandom 2048
</IfModule>

# Allow insecure renegotiation (compatibility with most browsers)
# SSLInsecureRenegotiation on

<IfDefine !NoDefaultCertif>
 # Server Certificate + Private Key (PEM encoded)
 # If key is encrypted, password is prompted at each restart
 SSLCertificateFile       ~{SSLDir}/server.pem
 # Certificate chain (PEM encoded, ordered - ending with root)
 SSLCertificateChainFile  ~{SSLDir}/chain.pem
</IfDefine>

# Clients Certificate Authority certificates (PEM encoded)
SSLCACertificateFile ~{SSLDir}/client-trusted-list.pem

#   Certificate Revocation Lists (CRL for client authentication - PEM encoded)
#   Note: Inside SSLCARevocationPath you need hash symlinks
#         to point to the certificate files. Use the provided
#         Makefile to update the hash symlinks after changes.
#SSLCARevocationPath conf/common/ssl/crl
#SSLCARevocationFile conf/common/ssl/crl.pem

# Protocols, ciphers, ...

#   SSL Cipher Suite: ciphers that the client is permitted to negotiate.
SSLHonorCipherOrder on
SSLProtocol    ~{SSLProtocol}
SSLCipherSuite "~{SSLCipherSuite}:~{AdditionalSSLCipherSuite}"

# Client certificate verification depth.
# Depth is a number which specifies how deeply to verify the certificate
# issuer chain before deciding the certificate is not valid.
SSLVerifyDepth  4

<IfDefine Approach>
 Use SSLUseStapling off
</IfDefine>

