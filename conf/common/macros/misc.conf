# Calculate a hash of resource as it could contain /
<Macro HashRes $phase $(var) $(val)>
 Use SecAction                                  "phase:$phase,~{nosecaction},t:none,setvar:'TX.hash_$(var)=$(val)'"
 Use SecRule TX:hash_$(var) @unconditionalMatch "phase:$phase,~{nosecaction},t:none,~{hashShort},setvar:TX.hash_$(var)=%{MATCHED_VAR}"
</Macro>

# Hash if longer than 30
<Macro HashIfNeeded @var $phase>
 Use SecAction "phase:$phase,~{nosecaction},t:none,setvar:!TX.t_"
 Use SecRule @var @unconditionalMatch "phase:$phase,~{nosecaction},t:none,setvar:TX.t_=%{MATCHED_VAR_NAME}_%{MATCHED_VAR}"
 Use SecRule TX:t_ "@gt 30"             "phase:$phase,chain,t:none,t:length,~{nosecaction}"
  Use SecRule TX:t_ @unconditionalMatch  "t:none,~{hashShort},setvar:TX.t_=%{MATCHED_VAR}"
</Macro>

<Macro UnsetResponseHeader $h>
 Use HeaderUnset "$h"
 #Use SecAction "phase:3,~{nosecaction},setvar:!RESPONSE_HEADER:$h"
</Macro>

<Macro FixHostEnvInResponseHeader @h>
 Header edit* @h " https?://[%][{]HOST[}]e " " "
</Macro>

<Macro Base64Decode $coll $var>
 Use SecRule $coll:$var "^(.*)$" phase:2,t:none,~{nosecaction},capture,t:base64Decode,setvar:$coll.$var=%{TX.1}"
</Macro>

<Macro CheckJSONSyntax @target>
 Use SecRuleDeny @target "!^\s*+[{]"   "t:none,~{status}:400,msg:'Bad JSON format',logdata:%{MATCHED_VAR}"
</Macro>

<Macro GetJSONValue @target $key $var>
 Use SecAction "phase:2,~{nosecaction},setvar:!TX.$var"
 Use CheckJSONSyntax @target
 Use SecRule @target "\x22$key\x22\s*+:\s*+\x22([^\x22]*+)\x22"   "phase:2,t:none,capture,setvar:TX.$var=%{TX.1},~{skip}:1"
 Use SecRule @target "\x22$key\x22\s*+:\s*+([^,\s}]*+)[,\s}]"     "phase:2,t:none,capture,setvar:TX.$var=%{TX.1},~{nosecaction}"
 Use ExtendedHeaderSec $var "$var=%{TX.$var}"
</Macro>

<IfModule maxminddb_module>
 <Macro GeoAnonDB @path>
  MaxMindDBFile ANON_DB @path
  MaxMindDBEnv geo_anon          ANON_DB/is_anonymous
  MaxMindDBEnv geo_anon_vpn      ANON_DB/is_anonymous_vpn
  MaxMindDBEnv geo_hosting       ANON_DB/is_hosting_provider
  MaxMindDBEnv geo_public_proxy  ANON_DB/is_public_proxy
  MaxMindDBEnv geo_tor           ANON_DB/is_tor_exit_node
  SecAction "phase:2,~{nosecaction},setvar:tx.geo_anon=%{ENV:geo_anon}%{ENV:geo_anon_vpn}%{ENV:geo_public_proxy}%{ENV:geo_tor}"
 </Macro>
</IfModule>

<Macro AuthHeader401 $value>
 Header add WWW-Authenticate "$value" "expr=%{REQUEST_STATUS} = 401"
</Macro>

<Macro NoBackendCertifCheck>
 SSLProxyVerify none
 SSLProxyCheckPeerName   off
 SSLProxyCheckPeerExpire off
</Macro>

<Macro CertifFile $name>
 SSLCertificateFile       ~{SSLDir}/$name.pem
 SSLCertificateKeyFile    ~{SSLDir}/$name.pem
 SSLCertificateChainFile  ~{SSLDir}/$name.pem
</Macro>

<Macro CertifDir $name>
 SSLCertificateFile      ~{SSLDir}/$name/server.pem
 SSLCertificateChainFile ~{SSLDir}/$name/chain.pem
 SSLCertificateKeyFile   ~{SSLDir}/$name/server.pem
</Macro>

<Macro AllowResponseXHeader $h>
 Use SecRule RESPONSE_HEADERS:'/^X-(?:$h)$/' @unconditionalMatch "phase:3,~{nosecaction},setvar:'TX.AllowXHeader=%{TX.AllowXHeader}|$h'"
</Macro>
# Obsolete
<Macro AllowXHeader @h>
 Use AllowResponseXHeader @h
</Macro>

<Macro UnsetResponseXHeaderCond $h @cond>
 Use AllowResponseXHeader "$h"
 Header unset "X-$h" @cond
</Macro>
<Macro UnsetResponseXHeader $h>
 Use AllowResponseXHeader "$h"
 Header unset "X-$h"
</Macro>

<Macro SkipMSVersions $phase $version $marker>
 Use SecRule &ENV:ModSecVersion "@eq 0"     "phase:$phase,t:none,~{skipAfter}:$marker"
 Use SecRule  ENV:ModSecVersion "^$version" "phase:$phase,t:none,~{skipAfter}:$marker"
</Macro>

<Macro SecAllowSlowRequest>
 <IfModule reqtimeout_module>
  RequestReadTimeout ~{RequestReadTimeout} body=0
 </IfModule>
</Macro>

<Macro DontLog_ @target @pattern>
 Use SecRule @target @pattern "phase:5,~{nosecaction},ctl:debugLogLevel=0,ctl:auditEngine=off"
</Macro>
<Macro AllowScanner $name>
 Use SecRuleRemoveByTag   "$name"
 Use DontLog_ TX:vulnscan "^(?i)$name"
</Macro>
<Macro DontLogIp @ip>
 Use DontLog_ TX:remote_addr @ip
</Macro>

<Macro CheckHeaderIp $name>
 Use SecRuleHeader "$name" "!^(?:~{syntax_ip}|(?i)unknown)(?>\s*+,\s*+(?>~{syntax_ip}|(?i)unknown))*\s*+$"  "phase:1,t:none,tag:Protocol,msg:'Invalid IP in header',logdata:%{MATCHED_VAR}"
</Macro>
