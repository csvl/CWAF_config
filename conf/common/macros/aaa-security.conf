# :: Macros: mod_security2 directives, so no syntax error when disabled
# Range: 5000400-5000499

<Macro SecRuleEngine @switch>
 <IfModule security2_module>
  SecRuleEngine @switch
 </IfModule>
</Macro>

<Macro SecRequestBodyAccess @switch>
 <IfModule security2_module>
  SecRequestBodyAccess @switch
 </IfModule>
</Macro>

<Macro SecResponseBodyAccess @switch>
 <IfModule security2_module>
  SecResponseBodyAccess @switch
 </IfModule>
</Macro>

<Macro SecStreamInBodyInspection @opt>
 <IfModule security2_module>
  SecStreamInBodyInspection @opt
 </IfModule>
</Macro>

<Macro SecStreamOutBodyInspection @opt>
 <IfModule security2_module>
  SecStreamOutBodyInspection @opt
 </IfModule>
</Macro>

<Macro SecContentInjection @opt>
 <IfModule security2_module>
  SecContentInjection @opt
 </IfModule>
</Macro>

<Macro SecAuditLog @opt>
 <IfModule security2_module>
  SecAuditLog @opt
 </IfModule>
</Macro>

<Macro SecDebugLog @opt>
 <IfModule security2_module>
  SecDebugLog @opt
 </IfModule>
</Macro>

<Macro SecUploadKeepFiles @opt>
 <IfModule security2_module>
  SecUploadKeepFiles @opt
 </IfModule>
</Macro>

<Macro SecRule @var @pattern @action>
 <IfModule security2_module>
  SecRule @var @pattern @action
 </IfModule>
</Macro>

<Macro SecAction @action>
 <IfModule security2_module>
  SecAction @action
 </IfModule>
</Macro>

<Macro SecMarker @id>
 <IfModule security2_module>
  SecMarker @id
 </IfModule>
</Macro>

<Macro SecArgumentsLimit $max>
 <IfModule security2_module>
  <IfDirective SecArgumentsLimit>
   SecArgumentsLimit $max
  </IfDirective>
 </IfModule>
</Macro>

<Macro SecRequestBodyLimit $max>
 <IfModule security2_module>
  <IfDefine !noSecurityRules>
   SecRequestBodyLimit $max
   # For DetectionOnly, as it can never trigger in blocking mode
   SecRuleRemoveByID 5000402
   Use SecRuleGTBig FILES_COMBINED_SIZE $max 5000402 "msg:'Total request body size exceeded (Use SecRequestBodyNoFilesLimit)',logdata:'%{MATCHED_VAR}/$max'"
  </IfDefine>
  <IfDefine noSecurityRules>
   Use UnusedParam "$max"
  </IfDefine>
 </IfModule>
</Macro>

<Macro SecRequestBodyNoLimit>
 <IfModule security2_module>
  SecRequestBodyAccess off
  SecRequestBodyLimit 1
  SecRequestBodyLimitAction ProcessPartial
  # Disable check on INBOUND_DATA_ERROR
  SecRuleRemoveByID 1000109
 </IfModule>
</Macro>

<Macro SecRequestBodyNoFilesLimit $max>
 <IfModule security2_module>
  SecRequestBodyNoFilesLimit $max
  SecAction "phase:2,t:none,~{nosecaction},setvar:TX.ReqBodyNoFilesSizeMax=$max"
  #SecRule REQBODY_PROCESSOR JSON "phase:1,~{nosecaction},t:none,ctl:requestBodyLimit=$max"
 </IfModule>
</Macro>

<Macro SecRuleRemoveByID @id>
 <IfModule security2_module>
  SecRuleRemoveByID @id
 </IfModule>
</Macro>

<Macro SecRuleRemoveByIdAfterBefore $id>
 Use SecRuleRemoveByID $id
 Use SecAction "phase:2,~{nosecaction},ctl:ruleRemoveById=$id"
</Macro>

<Macro SecRuleRemoveByTag $tag>
 <IfModule security2_module>
  SecRuleRemoveByTag "(?i)(?:$tag)"
 </IfModule>
</Macro>

<Macro SecRuleRemoveByFullTag $tag>
 Use SecRuleRemoveByTag "^(?:$tag)$"
</Macro>

<Macro SecRuleUpdateTargetByTag $tag  @target>
 <IfModule security2_module>
  SecRuleUpdateTargetByTag "(?i:$tag)" @target
 </IfModule>
</Macro>

<Macro SecRuleUpdateTargetById @id @target>
 <IfModule security2_module>
  SecRuleUpdateTargetById      @id @target
 </IfModule>
</Macro>

# $target may NOT be a list
<Macro SecRuleIgnoreTargetById_ $id $target>
 Use SecRuleUpdateTargetById $id "!$target"
 Use SecAction "phase:1,~{nosecaction},tag:security,ctl:'ruleRemoveTargetById=$id;$target'"
</Macro>
<Macro SecRuleIgnoreTargetById @id @target>
 Use NotInsideLocation
 Use SecRuleIgnoreTargetById_  @id @target
</Macro>
# Same but $target may contain /regex/ or target1|target2
# Needs macro expansion in msre_action_ctl_execute() => not yet usable
<Macro SecRuleIgnoreTargetRegexById__ $id $target>
 Use SecRule $target @unconditionalMatch "phase:1,t:none,tag:security,~{nosecaction},ctl:'ruleRemoveTargetById=$id;%{MATCHED_VAR_NAME}'"
</Macro>
<Macro SecRuleIgnoreTargetsRegexByIdUrl $url @tag @target>
 Use SecRule TX:URL "!$url" "phase:1,t:none,tag:security,~{skipAfter}:AfterIgnoreTargetByIdUrl"
  Use SecRuleIgnoreTargetRegexById__         @tag @target
 Use SecMarker AfterIgnoreTargetByIdUrl,tag:security
</Macro>

# $tag is a regex
# $target may also be a list
# $target may not exist yet (ARGS:name)
<Macro SecRuleIgnoreTargetsByTag__ $tag $target>
 Use NotInsideLocation
 Use SecAction "phase:1,t:none,tag:security,~{nosecaction},ctl:'ruleRemoveTargetByTag=$tag;$target'"
</Macro>
# Same but $target may contain /regex/
<Macro SecRuleIgnoreTargetRegexByTag__ $tag $target>
 Use SecRule $target @unconditionalMatch "phase:1,t:none,tag:security,~{nosecaction},ctl:'ruleRemoveTargetByTag=$tag;%{MATCHED_VAR_NAME}'"
</Macro>
<Macro SecRuleIgnoreTargetsByTagUrl $url @tag @target>
 Use SecRule TX:URL "!$url" "phase:1,t:none,tag:security,~{skipAfter}:AfterIgnoreTargetByTagUrl"
  Use SecRuleIgnoreTargetsByTag__       @tag @target
 Use SecMarker AfterIgnoreTargetByTagUrl,tag:security
</Macro>
<Macro SecRuleIgnoreTargetsRegexByTagUrl $url @tag @target>
 Use SecRule TX:URL "!$url" "phase:1,t:none,tag:security,~{skipAfter}:AfterIgnoreTargetByTagUrl"
  Use SecRuleIgnoreTargetRegexByTag__        @tag @target
 Use SecMarker AfterIgnoreTargetByTagUrl,tag:security
</Macro>

# $target may NOT be a list
<Macro SecRuleIgnoreTargetByTag  @tag   $target>
 Use NotInsideLocation
 Use SecRuleUpdateTargetByTag    @tag "!$target"
 Use SecRuleIgnoreTargetsByTag__ @tag  "$target"
</Macro>
<Macro SecRuleIgnoreTargetByFullTag    $tag    @target>
 Use SecRuleIgnoreTargetByTag     "^(?:$tag)$" @target
</Macro>

<Macro IgnoreTargets_ $phase $(col) $var $tag>
  Use SecRule $(col)_NAMES:'$var' @unconditionalMatch "phase:$phase,t:none,~{nosecaction},ctl:'ruleRemoveTargetByTag=$tag;%{MATCHED_VAR_NAME}',ctl:'ruleRemoveTargetByTag=$tag;$(col):%{MATCHED_VAR}'"
</Macro>
<Macro IgnoreTargets   @col @var $tag>
  Use NotInsideLocation
  Use IgnoreTargets_ 1 @col @var $tag
  Use IgnoreTargets_ 2 @col @var $tag
</Macro>

<Macro SecRuleUpdateActionById $id @action>
 Use SecRuleUpdateActionById   $id @action
</Macro>

# Doesn't work for chained rules (to be fixed)
# Doesn't work for mutiples rules sharing one id
# Only works in same scope as original rule
<Macro SecRuleDetectionOnly  @id>
 Use SecRuleUpdateActionById @id "~{log},logdata:'To be fixed in application',setvar:!tx.blocked,setvar:!tx.BadAuth"
</Macro>

<Macro SecWebAppId $id>
 <IfModule security2_module>
  SecWebAppId "$id"
  Use SecAction  "phase:1,~{nosecaction},setenv:'WebAppId=$id'"
  Use SecAction  "phase:2,~{nosecaction},setenv:'WebAppId=$id'"
 </IfModule>
</Macro>

<Macro SecRequestBodyProcessor @method @url $prc>
 Use NotInsideLocation
 <IfModule security2_module>
  SecRule REQUEST_METHOD @method  "phase:1,chain,t:none,~{nosecaction}"
   SecRule TX:url @url  "t:none,ctl:requestBodyProcessor=$prc"
 </IfModule>
</Macro>
