# :: Macros: Exceptions to rules

#:: Disable 1 ModSecurity rule for one host, location, arg/cookie/header
#:: must be used in global scope - see https://github.com/SpiderLabs/ModSecurity/issues/89
<Macro SecDisableRuleTargetId @host @url $target $id>
 Use NotInsideLocation
 Use SecRule REQUEST_HEADERS:Host @host "phase:1,~{nosecaction},chain"
  Use SecRule TX:url @url "ctl:ruleRemoveTargetById=$id;$target"
</Macro>
<Macro SecDisableRuleTarget @host @url $target>
 Use NotInsideLocation
 Use SecRule REQUEST_HEADERS:Host @host "phase:1,~{nosecaction},chain"
  Use SecRule TX:url @url "ctl:ruleRemoveTargetByTag=security;$target"
</Macro>
<Macro SecDisableRuleExt    @host @url @target @id>
 Use SecDisableRuleTargetId @host @url @target @id
</Macro>

#:: Disable 1 ModSecurity rule for one arg (or regex)
<Macro SecDisableRuleArg $arg @id>
 Use UnusedParam "$arg"
 Use SecRuleRemoveByID @id
 # If not in same location as rule: error and stop loading
 # 'Updating target by ID with no ruleset in this context'
 #Use SecRuleIgnoreTargetById_ @id "ARGS:$arg"
</Macro>

#:: Disable 1 ModSecurity rule for one arg (or regex)
<Macro SecDisableRuleTargetByTag $item @tag>
 Use UnusedParam "$item"
 # bug: https://github.com/SpiderLabs/ModSecurity/issues/89
 #Use SecRuleUpdateTargetByTag @tag "!$item"
 Use SecRuleRemoveByTag  @tag
</Macro>
<Macro SecDisableRuleTargetFullTag @arg $tag>
 Use SecDisableRuleTargetByTag @arg "^(?i:$tag)$"
</Macro>

#:: Disable 1 ModSecurity rule for one arg (or regex)
<Macro SecDisableRuleArgByTag $arg @tag>
 Use SecDisableRuleTargetByTag "ARGS:$arg" @tag
</Macro>
<Macro SecDisableRuleArgByFullTag $arg @tag>
 Use SecDisableRuleTargetFullTag "ARGS:$arg" @tag
</Macro>


#:: Disable 1 ModSecurity rule for one cookie (or regex)
<Macro SecDisableRuleCookieByTag $arg @tag>
 Use SecDisableRuleTargetByTag "COOKIES:$arg" @tag
</Macro>
<Macro SecDisableRuleCookieByFullTag $arg @tag>
 Use SecDisableRuleTargetFullTag "COOKIES:$arg" @tag
</Macro>

#:: Disable 1 ModSecurity rule for one header (or regex)
<Macro SecDisableRuleHeaderByTag $h @tag>
 Use SecDisableRuleTargetByTag "REQUEST_HEADERS:$h" @tag
</Macro>
<Macro SecDisableRuleHeaderByFullTag $h @tag>
 Use SecDisableRuleTargetFullTag "REQUEST_HEADERS:$h" @tag
</Macro>

<IfDefine OptimParsing>
 #:: Disable rules by tag based on a pre-check
 #    $name     may be a regex 
 #    $disabled may be a regex 
 # For collections 
 <Macro SecDisableTagCon_ $phase $(coll) $name @target $tag $disabled>
  Use SecRule @target @unconditionalMatch "phase:$phase,t:none,chain,~{nosecaction},tag:security,tag:$tag"
   Use SecRule MATCHED_VARS_NAMES "!^(?:$name)$" "t:none,ctl:'ruleRemoveTargetByTag=^(?i:$disabled)$;$(coll):%{MATCHED_VAR}'"
 </Macro>
 <Macro SecDisableTagConditionallyExt_ $phase $(coll) @target $tag @condition $tfn $disabled>
  Use SecAction                           "phase:$phase,~{nosecaction},tag:security,tag:$tag,setvar:!tx.optim$(coll)$tag"
  Use SecRule @target @condition          "phase:$phase,~{nosecaction},tag:security,tag:$tag,pass,t:none,$tfn,multiMatch,setvar:'tx.optim$(coll)$tag=%{tx.optim$(coll)$tag}|%{MATCHED_VAR_NAME}'"
  Use SecDisableTagCon_   $phase $(coll) "%{tx.optim$(coll)$tag}" @target $tag $disabled
 </Macro>
 # For non-collections 
 <Macro SecDisableTagConditionallyVar_ $phase $(target) $tag @condition $tfn $disabled>
  Use SecAction                                         "phase:$phase,~{nosecaction},tag:security,tag:$tag,setvar:!tx.optim$(target)$tag"
  Use SecRule $(target) @condition                      "phase:$phase,~{nosecaction},tag:security,tag:$tag,pass,t:none,$tfn,multiMatch,setvar:'tx.optim$(target)$tag=$(target)'"
  Use SecRule &TX:optim$(target)$tag "@eq 0"            "phase:$phase,~{nosecaction},tag:security,tag:$tag,t:none,ctl:'ruleRemoveTargetByTag=^(?i:$disabled)$;$(target)'"
 </Macro>

 <Macro SecDisableTagConditionallyExt                                                      $tag                          @condition @tfn $disabled>
  <IfDefine !BypassOptimHeader$tag>
   Use SecDisableTagConditionallyExt_ 1,tag:SecRuleHeaders REQUEST_HEADERS "~{reqHeaders}" $tag                          @condition @tfn $disabled
  </IfDefine>
  Use SecDisableTagConditionallyExt_  1,tag:SecRuleCookies REQUEST_COOKIES "~{cookies}"    $tag,tag:COOKIE               @condition @tfn $disabled
  Use SecDisableTagConditionallyExt_  2,tag:SecRuleArgs    ARGS            "~{args}"       $tag,tag:ARGS,tag:SecRuleArgs @condition @tfn $disabled
  <IfDefine !noXML>
   # Parse XML body only
   Use SecRule &ENV:req_xml "@eq 0"    "phase:2,t:none,tag:security,tag:$tag,~{skipAfter}:AfterXMLBodyCheck"
    # In case STREAM_INPUT_BODY is not populated, check REQUEST_BODY
    Use SecRule STREAM_INPUT_BODY "^$" "phase:2,t:none,tag:security,tag:$tag,~{skipAfter}:AfterStreamBodyCheck"
     Use SecDisableTagConditionallyVar_  2 STREAM_INPUT_BODY $tag @condition @tfn $disabled
     Use SecAction                     "phase:2,t:none,tag:security,tag:$tag,~{skipAfter}:AfterXMLBodyCheck"
    Use SecMarker AfterStreamBodyCheck,tag:security,tag:$tag
    Use SecDisableTagConditionallyVar_  2 REQUEST_BODY       $tag @condition @tfn $disabled
  </IfDefine>
  Use SecMarker AfterXMLBodyCheck,tag:security,tag:$tag
 </Macro>

 <Macro SecDisableTagConditionally  $tag @condition @tfn>
  Use SecDisableTagConditionallyExt $tag @condition @tfn $tag
 </Macro>
</IfDefine>

#:: Disable arg content check
<Macro SecDisableContentCheck>
 #Use SecRuleRemoveByID 2000200-2008899
 Use SecRuleRemoveByFullTag "ARGS|ARGS_Resp|XML"
</Macro>

#:: Disable arg content check
<Macro SecDisableContentCheckArg $arg>
 Use UnusedParam $arg
 Use SecDisableContentCheck
 Use Warning "SecDisableContentCheckArg disables all rules => Use SecDisableRuleExt"
 # bug: https://github.com/SpiderLabs/ModSecurity/issues/89: only works in same scope
 #Use SecRuleUpdateTargetByTag  "ARGS"       "!ARGS:$arg"
 #Use SecRuleUpdateTargetByTag  "ARGS_Resp"  "!ARGS:$arg"
</Macro>

# :: Allow some file extensions with arguments
#    Syntax: regex of extensions, like "ext1|ext2|ext(3|4)"
<Macro SecAllowFileArg $ext>
 Use SecRule TX:EXT "^(?i:$ext)$"   "phase:2,tag:security,~{nosecaction},t:none,ctl:ruleRemoveById=2002409"
</Macro>

# :: Allow all file extensions with arguments
<Macro SecAllowAllFileArg>
 Use SecRuleRemoveByID 2002409
 Use SecAction "phase:2,~{nosecaction},tag:security,ctl:ruleRemoveById=2002409"
</Macro>

# :: Allow empty arguments names
<Macro SecArgNameAllowEmpty>
 Use SecRuleRemoveByID 2002904
</Macro>

# :: Allow all characters in arguments
<Macro SecArgsAllowAllChars>
 Use SecAllowBackSlash
 Use SecAllowHashInArgs
 Use SecAllowPipeInArgs
 Use SecRuleRemoveByID 2000213,3000001,3000008,4003341,4003342
 Use SecArgsAllowUnicode
</Macro>

# :: Allow character set in arguments
#    Syntax: list or range of characters number
<Macro SecArgsAllowCharset__ $id $set $tfn>
 # Allow only normal printable characters and accented in arguments
 #  9 = tab
 # 10 = LF
 # 13 = CR
 # 32-126: printable characters
 Use SecRuleDeny "~{args}" "@validateByteRange 9,10,13,32-126,$set"  "phase:2,msg:'Invalid character in arg (Use SecArgsAllowCharset/SecArgsAllowUnicode)',capture,logdata:'%{MATCHED_VAR_NAME}=...%{TX.1}...%{TX.2}%{TX.3}',t:$tfn,id:$id,tag:ARGS,tag:SecRuleArgs,setvar:TX.InvalidBytes=%{MATCHED_VAR}"
</Macro>
<Macro SecArgsAllowCharset_ @id @set>
 Use SecArgsAllowCharset__  @id @set  "none,msg:'Invalid (bare) character in arg (Use SecArgsAllowCharset/SecArgsAllowCharsetUnicode/SecArgsAllowUnicode)'"
 #Use SecArgsAllowCharset__  @id @set  "~{cssDecode},msg:'Invalid (encoded) character in arg (Use SecArgsAllowCharset/SecArgsAllowUnicode)'"
</Macro>

# :: Allow character set in arguments
#    Syntax: list or range of characters number
<Macro SecArgsAllowCharset @set>
 Use SecRuleRemoveByID    3000001
 Use SecArgsAllowCharset_ 3000001 @set
</Macro>

# 128-254: extended characters
# Non-UTF-8 Unicode: first char = 0
# UTF-8 punctuation: 2010-201F, 2026, 2030-2037
# UTF-8 emoji: F09F9A80-F09F9BBA,f09fa488-f09fa7bf
<Macro SecArgsAllowCharsetUnicode $set>
 Use SecRuleRemoveByID  3000001
 # For UTF-8
 Use SecRule &TX:UTF8_ENCODING_USED "@eq 0" "phase:2,id:3000001,tag:security,tag:ARGS,~{skipAfter}:AfterCharsetUtf8"
  Use SecArgsAllowCharset_  3000001   "16-31,128-255,$set"
 Use SecMarker AfterCharsetUtf8,tag:security,tag:ARGS
 # For non UTF-8
 Use SecRule &TX:UTF8_ENCODING_USED "@eq 1" "phase:2,id:3000001,tag:security,tag:ARGS,~{skipAfter}:AfterCharsetNotUtf8"
  Use SecArgsAllowCharset_  3000001 "0,16-31,128-255,$set"
 Use SecMarker AfterCharsetNotUtf8,tag:security,tag:ARGS
</Macro>

<Macro SecArgsAllowUnicode>
 Use SecArgsAllowCharsetUnicode 32
</Macro>

# Allow ARGS encoded with %u...
<Macro SecArgsAllowMSUnicode>
 Use SecRuleRemoveByID 2002902,2002936
 Use SecArgsAllowUnicode
</Macro>

# Allow several arguments with same name ("<SELECT multiple")
<Macro SecAllowMultipleChoices>
 Use BlockMultipleParams ~{ArgsNbSameName}
</Macro>

# Allow query args in POST
<Macro SecAllowQueryInPost>
 Use SecRuleRemoveByID 2002923
</Macro>

<Macro SecAllowHashInArg @arg>
 Use SecDisableRuleArg @arg  4003341-4003342
</Macro>

<Macro SecAllowHashInArgs>
 Use SecRuleRemoveByID 4003341,4003342
</Macro>

<Macro SecAllowPipeInArgs>
 Use SecRuleRemoveByID 2000201
</Macro>
<Macro SecAllowPipeInArg @arg>
 Use SecDisableRuleArg @arg 2000201
</Macro>

<Macro SecAllow2SlashesInArgs>
 Use SecRuleRemoveByID 2000109,2000442
</Macro>

# Ignore 404 errors (Page not found)
<Macro SecIgnorePageNotFound>
 Use DoNotTrapError 404
</Macro>

# Allow CGI access
<Macro AllowCGI>
 Use SecAllowExt "cgi"
 Use SecRuleRemoveByID 2000204
</Macro>

# Allow --
<Macro SecAllowTwoDashesArg @arg>
 Use SecDisableRuleArg @arg  2000899
 Use SecDisableRuleArg @arg  2003112
</Macro>

<Macro SecAllowTwoDashes>
 Use SecRuleRemoveByID 2000899,2003112
</Macro>

# Allow HTML code for one arg
<Macro SecAllowHTMLArg @arg>
 Use SecAllowURLArg       @arg
 Use SecAllowXMLArg       @arg
 Use SecAllowTwoDashesArg @arg
 Use SecAllowHashInArg    @arg
 
 Use SecDisableRuleArg @arg  2000011-2000013
 Use SecDisableRuleArg @arg  2000001-2000002
 Use SecDisableRuleArg @arg  2000201
 Use SecDisableRuleArg @arg  2000111
 Use SecDisableRuleArg @arg  2000113
 Use SecDisableRuleArg @arg  2000234
 Use SecDisableRuleArg @arg  2000300-2000499
 Use SecDisableRuleArg @arg  2000815
 Use SecDisableRuleArg @arg  2000822
 Use SecDisableRuleArg @arg  2000840
 Use SecDisableRuleArg @arg  2000847-2000848
 Use SecDisableRuleArg @arg  4003341
 Use SecDisableRuleArg @arg  2000863
 Use SecDisableRuleArg @arg  2000853
 Use SecDisableRuleArg @arg  2000855
 Use SecDisableRuleArg @arg  2003126
 Use SecDisableRuleArg @arg  2000868
 Use SecDisableRuleArg @arg  2000891-2000893
 Use SecDisableRuleArg @arg  2000885
 Use SecDisableRuleArg @arg  2001217
 Use SecDisableRuleArg @arg  2002109
 Use SecDisableRuleArg @arg  2001654
 Use SecDisableRuleArg @arg  2003013-2003016
 Use SecDisableRuleArg @arg  2003073
 Use SecDisableRuleArg @arg  4003107
 # to allow %content% (server-side content)
 Use SecDisableRuleArg @arg  2000723

 Use SecDisableRuleArgByFullTag @arg "Calculation|DBAll|PATH|SQL|XSS"
</Macro>

# Allow HTML code
<Macro SecAllowHTML>
 Use AllowBasicHTML
 Use SecAllowURL
 Use SecAllowCalculation
 Use SecAllowTwoDashes
 Use SecRuleRemoveByID 2000001-2000002,2000011-2000013,2000201,2000111,2000113,2000234,2000300-2000499,2000815,2000840,2000853,2000855,2000858,2000863,2000868,2000885,2000886,2000899,2000891-2000893,2001217,2002109,2001654,2002101,2003012,2003073,2003126,4003107
 Use SecAllowUpFileExt "htm,html"
 Use SecAllowCalculation
 Use SecRuleRemoveByFullTag "DBAll|SQL|XSS"
</Macro>

# Allow simple tags
<Macro AllowBasicTags>
 Use SecRuleRemoveByID 2000340,2000893
</Macro>
# Allow simple HTML tags
<Macro AllowBasicHTML>
 Use AllowBasicTags
 Use SecAllowHTMLEntity
 Use SecRuleRemoveByFullTag libSQLi
 Use SecRuleRemoveByFullTag libXSSi
 # Allow value=
 Use SecRuleRemoveByID 2000391
 # For styles ----------
 # Allow sequence of single & double quotes
 Use SecRuleRemoveByID 2000885
 # Allow '; (style)
 Use SecRuleRemoveByID 2003115
 # Allow :# (style)
 Use SecRuleRemoveByID 2000382
 # Allow comments <!--
 Use SecRuleRemoveByID 2000429
</Macro>
# Allow all unknown tags
<Macro AllowUnknownTags>
 Use AllowBasicTags
 # Allow unknown tags also
 Use SecRuleRemoveByID 2000317
</Macro>
<Macro SecAllowHTMLStyle>
 Use AllowBasicHTML
 # Allow <style>
 Use SecRuleRemoveByID 2000402
</Macro>

# Allow all unknown JS event handlers
<Macro AllowUnknownJSEvents>
 Use SecRuleRemoveByID 2000430,2000445
</Macro>

# Allow ${
<Macro SecAllowDollarCurlyBrace>
 Use SecRuleRemoveByID 4003113,2000455
</Macro>

# Allow HTML template
<Macro SecAllowHTMLTemplate>
 Use SecAllowHTML
 # ${...}
 Use SecAllowDollarCurlyBrace
 # $(
 Use SecRuleRemoveByID 2001217
 # Various templates
 Use SecRuleRemoveByID 2000452,2000455,2000473
  # <?
  # included in SecAllowHTML??? Use SecRuleRemoveById 2000301
</Macro>

# Allow Mail template
<Macro SecAllowMailTemplate>
 Use SecRuleRemoveByID 2000235
</Macro>

# Allow regular expression
<Macro SecAllowRegex>
 Use SecRuleRemoveByID 2000001,2000002
 Use SecAllowPipeInArgs
 # combination of parenthesis & pipe
 Use SecRuleRemoveByID 2000868
 # Allow caret
 Use SecRuleRemoveByID 2000222
 # Allow <...
 Use SecRuleRemoveByID 2000340
</Macro>

<Macro SecAllowBackSlash_>
 Use SetEnv AllowBackSlash 1
 Use SecRuleRemoveByID 2000218,4001001
</Macro>

# Allow Unix-like escaping \" \r ...
<Macro SecAllowBackSlashEscaping>
 Use SecAllowBackSlash_
 # \r \n \"
 Use SecRuleRemoveByID 2000327
 Use SecRuleRemoveByID 4001001
 # Allow c:\...
 Use SecRuleRemoveByID 2000711
</Macro>

# Allow Windows paths with backslash
<Macro SecAllowWindowsPath>
 Use SecAllowBackSlashEscaping
 # \uhexa or\hexa
 Use SecRuleRemoveByID 2002106
 Use SecRuleRemoveByID 2000363
 # \x...
 Use SecRuleRemoveByID 2000449
 # \ at end of line
 Use SecRuleRemoveByID 2000863
</Macro>

# Allow \ everywhere
<Macro SecAllowBackSlash>
 Use SecAllowWindowsPath
</Macro>

# Allow HTML character entities
<Macro SecAllowHTMLEntity>
 Use SecRuleRemoveByID 2000001,2000002,2000369,2000370,2000822
</Macro>

# :: Allow Content-type
<Macro SecAllowContentType $type>
 Use SecRule TX:allow_ContentType @unconditionalMatch             "phase:2,tag:security,t:none,~{skip}:2"
  Use SecRule REQUEST_HEADERS:Content-Type "^(?i:$type) *(?:;|$)" "phase:2,tag:security,t:none,~{nosecaction},setvar:TX.allow_ContentType"
  # For Multipart (checked later on each header)
  Use SecAction                                                   "phase:2,tag:security,t:none,~{nosecaction},setvar:'TX.allowedCT=$type|%{TX.allowedCT}'"
</Macro>
# :: Allow all Content-type
<Macro SecAllowAllContentType>
 Use SecAction "phase:2,tag:security,~{nosecaction},setvar:TX.allow_ContentType,setvar:TX.allow_all_ContentType"
</Macro>

# Base64 (RFC 4648): alphanum + / _ (padding: = or ==)
DefineStr Base64RuleTags_ "^Base64|^SHORT$|SQL"
<Macro SecAllowBase64>
 Use SecRuleRemoveByTag ~{Base64RuleTags_}
</Macro>

<Macro SecAllowBase64Arg @arg>
 Use SecDisableRuleArgByTag @arg ~{Base64RuleTags_}
</Macro>

<Macro SecAllowBase64InHeaders>
 Use SecRuleRemoveByID 2000118
 Use SecDisableRuleHeaderByFullTag "/./" "SHORT|libSQLi|libXSSi|SQL"
</Macro>
 
<Macro SecAllowBase64InCookies>
 Use SecRuleRemoveByID 2000110,2000430,2001471
 Use SecDisableRuleCookieByFullTag "/./" "SHORT|libSQLi|libXSSi|SQL"
</Macro>

# Allow certificates and rsa key in pem format
<Macro SecAllowPemInArgs>
 Use SecRuleRemoveByID 4002243
 Use SecAllowBase64
</Macro>

# Allow Path names
<Macro SecAllowPath>
 Use SecRuleRemoveByFullTag PATH
</Macro>
<Macro SecAllowPathInUrl>
 Use SecRuleRemoveByFullTag PathUrl
</Macro>

# Allow Path names
<Macro SecAllowPathArg @arg>
 Use SecDisableRuleArgByFullTag @arg PATH
</Macro>

# Restrict path names
<Macro SecRestrictedURLArg $arg $path>
 Use SecRuleDeny "ARGS:'$arg'"  "!^(?i:$path)$"  "phase:2,t:none,t:normalisePathWin,msg:'Invalid application path'"
 Use SecAllowPathArg "$arg"
</Macro>

# Allow URL (in args & cookies)
<Macro SecAllowURL>
 Use SecRuleRemoveByID 2000108,2000109,2000120-2000121,2000849,2000867,2000892,2000893,2001201,2001202
 # /cc- but deactivate several other checks
 Use SecRuleRemoveByFullTag PATH
</Macro>

# Allow file:// & smb:// (in args & cookies)
<Macro SecAllowFileURL>
 Use SecRuleRemoveByID 2000109,2000110,2000118,2000130
</Macro>

# Allow tcp:// & others (in args & cookies)
<Macro SecAllowRemoteProtocol>
 Use SecRuleRemoveByID 2000109,2000110,2000116,2000118,2000120-2000121,2000411,2001201
</Macro>

# Allow URL for one arg
<Macro SecAllowURLArg @arg>
 Use SecDisableRuleArg @arg 2000108-2000110
 Use SecDisableRuleArg @arg 2000411
 Use SecDisableRuleArg @arg 2000849
 Use SecDisableRuleArg @arg 2000867
 Use SecDisableRuleArg @arg 2000892-2000893
 Use SecDisableRuleArg @arg 2001201-2001202
 # /cc- but deactivate several other checks
 Use SecDisableRuleArgByFullTag @arg PATH
</Macro>

# Allow URL
<Macro SecAllowURLInHeaders>
 Use SecRuleRemoveByID 2000118,2000119
</Macro>

# Allow URL
<Macro SecAllowURLInCookies>
 Use SecRuleRemoveByID 2000110,2000117
</Macro>

# Allow redirect to any URL
<Macro SecAllowOpenRedirect>
 Use SecRuleRemoveByID 4002205
</Macro>

# Allow // in URL
<Macro AllowDoubleSlashInURL>
 Use SecRuleRemoveById 2002917
</Macro>

# Allow empty user-agent
<Macro AllowEmptyUA>
 Use SecRuleRemoveById 2000607
</Macro>

# Allow XML tags for one arg
<Macro SecAllowXMLArg @arg>
 Use FrameworkXML_
 Use SecAllowURLArg @arg
 Use SecDisableRuleArg @arg  2000001-2000002
 Use SecDisableRuleArg @arg  2000301
 Use SecDisableRuleArg @arg  2000317
 Use SecDisableRuleArg @arg  2000324
 Use SecDisableRuleArg @arg  2000340
 Use SecDisableRuleArg @arg  2000345
 Use SecDisableRuleArg @arg  2000394
 Use SecDisableRuleArg @arg  2000429
 Use SecDisableRuleArg @arg  2000441
 Use SecDisableRuleArg @arg  2000840
 Use SecDisableRuleArg @arg  2002103
 Use SecDisableRuleArg @arg  2004403
 Use SecDisableRuleArg @arg  4002296
 Use SecAllowCalculation
</Macro>

# :: Allow XML data
<Macro SecAllowXMLData>
 Use FrameworkXML
 Use SecAllowContentType "~{MimeXML}"
 # No limit on XML body
 LimitXMLRequestBody 0
 Use SecAllowCalculation
 Use SecRuleRemoveByID 2000001,2000002,2000317,2000324,2000340,2000345,2000394,2000429,2000441,2000840,2002103,4002296
</Macro>

# :: Allow XML in/out
<Macro SecAllowXML>
 Use SecAllowXMLData
 Use SecAllowXMLInResponse
</Macro>
<Macro AllowXML>
 Use SecAllowXML
</Macro>

<Macro SecAllowXMLInResponse>
 Use SecRuleRemoveByID 4002296
</Macro>

<Macro SecAllowXMLExternalEntityReference>
 Use AllowXML
 Use SecRuleRemoveByID 2002801,2002802,2002805
</Macro>

<Macro SecAllowUrlInXMLTags>
 Use AllowXML
 Use SecRuleRemoveByID 2000122,2000123
</Macro>

# :: Allow web services (mainly closing tags), etc.
<Macro SecAllowMissingCT>
 Use SecRuleRemoveByID 2002922
</Macro>

# :: Allow web services (XML tags, etc.)
<Macro SecAllowSOAP @maxSize>
 Use AllowXML
 Use SecAllowUrlInXMLTags
 Use AllowAutomatedTools
 # done dynamically: Use DoNotRemapError 500
 Use SecNoCheckResponse
 Use AllowEmptyUA
 Use SecAllowMissingCT
 # Content-Disposition header may contain very strange filename syntax (ex: soap-9001c5a0b48911e194420050560f00ce@sap.com.xml)
 Use SecAction "phase:2,tag:security,~{nosecaction},setvar:TX.allow_soap=1,setvar:!TX.uploadfname"
 Use SecAllowTwoDashes
 <IfDefine !NOSSL>
  # Warning: this enforces SSL at Apache level
  SSLRenegBufferSize     @maxSize
 </IfDefine>
 Use SecRequestBodyLimit @maxSize
 LimitXMLRequestBody     @maxSize
 #Use SecAllowExt "wsil"
</Macro>

<Macro SecXMLTagMaxLength $tag $length>
 Use SecRuleArgsCookies "<\s*+$tag[^>]*>.{$length,}</\s*+$tag\s*+>" 9999999,tag:LowerThan,tag:specific ""
</Macro>

<Macro SecXMLTagSyntax $tag $pattern>
 Use SecRuleArgsCookies  "<\s*+$tag[^>]*>$pattern</\s*+$tag\s*+>"   9999999,tag:LowerThan,tag:specific ""
</Macro>

# Allow X.509 DN
<Macro SecAllowX509DN>
 Use SecRuleRemoveByID 2001920
</Macro>

# Allow LDAP code
<Macro SecAllowLDAP>
 Use SecRuleRemoveByID 2000001-2000002,2001901-2001915
 Use SecAllowX509DN
 Use SecRuleRemoveByFullTag LDAP
</Macro>

# Allow LDAP code in one arg
<Macro SecAllowLDAPArg @arg>
 Use SecDisableRuleArg @arg  2000001-2000002
 Use SecDisableRuleArg @arg  2001901-2001915
 Use SecDisableRuleArg @arg  2001920
 Use SecDisableRuleArgByFullTag @arg LDAP
</Macro>

# Allow all keywords in response
<Macro SecDisableResponseCheck>
 Use SecNoCheckResponse
</Macro>

# Allow SQL commands
<Macro AllowSQLEncodedBinary>
 Use SetEnv AllowSQLEncodedBinary 1
</Macro>
<Macro SecAllowSQL>
 Use SecAllowBackSlash
 Use SecRuleRemoveByID 2000723,2000800-2000899,2001656,2003100-2003199
 Use AllowSQLEncodedBinary
 Use SecRuleRemoveByTag "DBAll|Develop|SQL"
</Macro>
# Disable heuristic SQL injection check
<Macro SecDisableSQLCheck>
 Use SecAllowSQL
</Macro>

 # Allow technical keywords in args
<Macro SecAllowTechnicalCommand>
 Use SecAllowPath
 Use SecAllowConfigUrl
 Use SecRuleRemoveByFullTag "CmdDelim|Command|Multiple"
</Macro>
<Macro SecAllowTechnicalArgs>
 #Warning "*** All technical keywords are allowed -> high risk ***"
 Use SecAllowHTML
 Use SecAllowLDAP
 Use SecArgsAllowAllChars
 Use SecAllowSQL
 Use SecAllowRegex
 Use SecAllowPath
 Use SecAllowTechnicalCommand
 Use SecAllowURL
 Use SecRuleRemoveByID 2000200-2000499,2000700-2001599,2001001,2001008,2003003,2003017,2001501-2001503,2003009-2003010,2001600-2001699,2003006-2003009
 Use SecNoCheckResponse
 Use SecRuleRemoveByFullTag "DBAll|CmdDelim|Command|Develop|FrameworkTop|Multiple|OSShell|PATH|XML"
 Use SecRuleRemoveByTag     "Output|SQL|XSS"
</Macro>

# Allow technical keywords in one arg
<Macro SecAllowTechnicalCommandArg @arg>
 Use SecAllowPathArg @arg
 Use SecDisableRuleArgByFullTag @arg "CmdDelim|CmdDelim|Command|Multiple"
</Macro>
<Macro SecAllowTechnicalArg @arg>
 #Warning "*** All technical keywords are allowed -> high risk ***"
 Use SecAllowHTMLArg @arg
 Use SecAllowLDAP
 Use AllowJSON
 Use SecAllowHashInArg   @arg
 Use SecAllowTechnicalCommandArg @arg
 # Web servers, OS, DB, dev
 Use SecDisableRuleArg @arg  4003000-400499
 # SQL
 Use SecDisableRuleArg @arg  2000801-2000899
 # Other
 Use SecDisableRuleArg @arg  2000200-2000499
 Use SecDisableRuleArg @arg  2000700-2001599
 Use SecDisableRuleArg @arg  2001501-2001503
 Use SecDisableRuleArg @arg  2001600-2001699
 Use SecDisableRuleArg @arg  2003017
 Use SecDisableRuleArg @arg  2003009-2003010
 Use SecDisableRuleArg @arg  4002200-4002299

 Use SecAllowPathArg @arg
 Use SecDisableRuleArgByFullTag @arg  "BackendOS|BackendWeb|CmdDelim|CmdDelim|Command|DBAll|Develop|FrameworkTop|Multiple|OSShell|PATH|XML"
 Use SecDisableRuleArgByTag     @arg  "SQL|XSS"
</Macro>

<Macro NoCmdCall>
 Use SecRuleRemoveByFullTag Command
</Macro>

# Allow JSON data in args
<Macro SecAllowJsonInArgs>
 Use SecRuleRemoveByID 2000001,2000002
 Use SecRuleRemoveByFullTag JSON
 Use SecAllowBackSlashEscaping
</Macro>
<Macro SecAllowJsonInTargets           @target>
 Use SecRuleIgnoreTargetByFullTag JSON @target
</Macro>
<Macro SecAllowRegexInTargets           @target>
 Use SecRuleIgnoreTargetByFullTag Regex @target
</Macro>

<Macro AllowHiddenFrame>
 Use SecRuleRemoveByID 4002280-4002281
</Macro>

<Macro DoNotRemapError $error>
 Use SecRuleRemoveByID 2101$error
</Macro>
<Macro DoNotRemapErrors>
 Use DoNotRemapError 122
 Use DoNotRemapError 400
 Use DoNotRemapError 401
 Use DoNotRemapError 403
 Use DoNotRemapError 404
 Use DoNotRemapError 405
 Use DoNotRemapError 406
 Use DoNotRemapError 407
 Use DoNotRemapError 408
 Use DoNotRemapError 409
 Use DoNotRemapError 410
 Use DoNotRemapError 411
 Use DoNotRemapError 412
 Use DoNotRemapError 413
 Use DoNotRemapError 414
 Use DoNotRemapError 415
 Use DoNotRemapError 416
 Use DoNotRemapError 417
 Use DoNotRemapError 418
 Use DoNotRemapError 421
 Use DoNotRemapError 422
 Use DoNotRemapError 423
 Use DoNotRemapError 424
 Use DoNotRemapError 425
 Use DoNotRemapError 426
 Use DoNotRemapError 427
 Use DoNotRemapError 428
 Use DoNotRemapError 429
 Use DoNotRemapError 431
 Use DoNotRemapError 451
 Use DoNotRemapError 500
 Use DoNotRemapError 501
 Use DoNotRemapError 505
 Use DoNotRemapError 507
 Use DoNotRemapError 508
 Use DoNotRemapError 510
 Use DoNotRemapError 511
</Macro>

<Macro DoNotTrapError $error>
 Use DoNotRemapError       $error
 Use SecRuleRemoveByID 2102$error
 Use DontLogStatus         $error
 Use Setenv Ignore$error 1
</Macro>
<Macro DoNotTrapErrors>
 Use DoNotTrapError 122
 Use DoNotTrapError 400
 Use DoNotTrapError 401
 Use DoNotTrapError 403
 Use DoNotTrapError 404
 Use DoNotTrapError 405
 Use DoNotTrapError 406
 Use DoNotTrapError 407
 Use DoNotTrapError 408
 Use DoNotTrapError 409
 Use DoNotTrapError 410
 Use DoNotTrapError 411
 Use DoNotTrapError 412
 Use DoNotTrapError 413
 Use DoNotTrapError 414
 Use DoNotTrapError 415
 Use DoNotTrapError 416
 Use DoNotTrapError 417
 Use DoNotTrapError 418
 Use DoNotTrapError 421
 Use DoNotTrapError 422
 Use DoNotTrapError 423
 Use DoNotTrapError 424
 Use DoNotTrapError 425
 Use DoNotTrapError 426
 Use DoNotTrapError 427
 Use DoNotTrapError 428
 Use DoNotTrapError 429
 Use DoNotTrapError 431
 Use DoNotTrapError 451
 Use DoNotTrapError 500
 Use DoNotTrapError 501
 Use DoNotTrapError 505
 Use DoNotTrapError 507
 Use DoNotTrapError 508
 Use DoNotTrapError 510
 Use DoNotTrapError 511
 #Use DontLogStatus "40[013-9]|41[0-8]|42|431|451|50[01578]|51[01]"
 Use DontLogStatuses
</Macro>

# No warning about back-end servers, framework, etc.
<Macro NoBackendTechno>
 Use SecRuleRemoveByTag "^(?:BackendWeb|DBAll|FrameworkTop)$"
 Use SecRuleRemoveById 1000103-1000106
</Macro>

# No warning about response headers sent by back-end
<Macro NoResponseHeaderWarning>
 Use SecRuleRemoveById 2004601
</Macro>

<Macro AllowJavaHttpClient>
 Use SecRuleRemoveById 2000611
</Macro>

<Macro IgnoreReqBodyParsingError>
 Use SecRuleRemoveByID 2002906
 Use SetEnv IgnoreReqBodyParsingError 1
</Macro>

<Macro SecAllowConfigUrl>
 # /conf, /dev, /home, /local, /system
 # /etc, /opt, /tmp, ...
 Use SecRuleRemoveById 2001209
 # /samples
 Use SecRuleRemoveById 2000716
</Macro>

<Macro SecAllowNamespaces>
 # Unix
 Use SecRuleRemoveById 2001201,2001209,2000187,4003107,4003121,4003125
 # Windows
 Use SecRuleRemoveById 2000701,2000712,2000713,2000714,2000715,2000716,2000726,2000730
 # Java namespaces
 Use SecRuleRemoveById 4003717,4003723,4003728,4003717
 # .NET namespaces
 Use SecRuleRemoveById 4004004,4004020
 # Jenkins namespaces
 Use SecRuleRemoveById 6000001
 # PHP namespaces
 #Use SecRuleRemoveById 2001416,2001431,2001433,2001434,2001435,2001441
</Macro>

<Macro SecAllowDataUri>
 Use SecAllowBase64
 Use SecRuleRemoveById 2000347
</Macro>

<Macro SecExposeSwagger>
 Use SecRuleRemoveById 2000105,2000129
 Use SecAllowExt "yaml"
</Macro>

# Allow all security scanners
<Macro SecAllowVulnScan>
 Use SecRuleRemoveByFullTag VulnScan
</Macro>


# Standard Mode for non critical application or environment
<Macro DisableParanoidMode>
#Name Size: maximum auto file name using word is 216 characters. Assuming the limit is 255 path included.
# DefineStr UploadFileNameLengthMax 255
 Use GoogleApi
 Use MSGraphApi
 Use CDNJS
 Use CSPAllowInternalScript
 Use CSPAllowInternalStyle
 Use SecIgnorePageNotFound
 Use SecAllowAllUpFileNames
 Use SecAllowMultipleExtInUpDownDocs
 Use SecAllowQueryInPost
 Use SecAllowMultipleExtInUrl
 Use SecAllowDotInUrl
 Use AllowBasicHTML
 Use AllowUnknownTags
 Use SecArgsAllowUnicode
 #Use SecAllowUrl
 Use SecRuleRemoveByFullTag Command
 Use SecRuleRemoveByFullTag LDAP
 Use SecRuleRemoveByFullTag SHORT
 Use SecRuleRemoveByFullTag Parano
 # Remove Heuristic SQL-related rules
 Use SecRuleRemoveByFullTag SQLHeur
 Use SecRuleRemoveByFullTag SQLMinor
 Use SecRuleRemoveByFullTag ReplaceSQLComment
 Use SecRuleRemoveByFullTag RemoveSQLComment
 #Use SecRuleRemoveByFullTag SQLStackedQuery
 # libXSSi & libSQLi are very slow
 Use SecRuleRemoveByFullTag libSQLi
 Use SecRuleRemoveByFullTag libXSSi
 Use SecAllow2SlashesInArgs
</Macro>

<Macro PublicResource>
 AuthType none
 Require all granted
 Use SecIgnorePageNotFound
 Use SecRuleRemoveByFullTag bot
 Header   set Access-Control-Allow-Origin   "*"
 Header   add Access-Control-Request-Method "GET,HEAD"
 Header   set Access-Control-Max-Age        "360000"
 Use SecAllowInvalidCert
</Macro>
<Macro PublicStaticResource>
 Use PublicResource
 Use SecStaticPages
</Macro>
<Macro PublicStaticConfig>
 Use PublicStaticResource
 Use AllowAutomatedTools
</Macro>
<Macro PublicStaticConfigWithDot>
 Use PublicStaticConfig
 Use SecAllowDotInUrl
 # Allow /.
 Use SecRuleRemoveById 2000103
</Macro>

# Used in e-mails, ...
<Macro PublicImages>
 Use PublicResource
 # Allow access from Outlook
 Use SecRuleRemoveById 2000679
 # Allow access from social media
 Use SecRuleRemoveById 2000681
</Macro>

<Macro AllowHugeRanges>
 Use SecRuleRemoveById 2000502
</Macro>

<Macro SecAllowXPath>
 Use SecRuleRemoveByFullTag XPath
</Macro>

<Macro SecAllowXQuery>
 Use SecAllowXML
 Use SecAllowXPath
 Use SecAllowJsonInArgs
 Use SecRuleRemoveByFullTag XQuery
 # allow 2 quotes ''
 Use SecRuleRemoveById 2003131
 Use SecAllowNamespaces
</Macro>

<Macro InternalTestEnv>
 Use DoNotTrapErrors
  # TLS
 Use SSLUseStapling Off
 # Ignore IP restrictions
 Use SecRuleRemoveById 5000301
 # Ignore invalid userid
 Use SecRuleRemoveById 25
 Use SecRuleRemoveByFullTag Auth
</Macro>

<Macro AllowFilenameStar>
 Use SecRuleRemoveById 2002309
</Macro>
