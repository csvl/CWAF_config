# :: Macros: OpenID Connect
 # https://openid.net/specs/openid-connect-core-1_0.html
 # Authorization Code Flow + others?
# Range: 2001780-2001789


# scope often contains a URI
DefineStr OIDCScope_         "^[-a-zA-Z0-9_.:/ ]{1,400}$"
DefineStr OIDCRespMode_      "^(?:form_post|fragment|query)$"
DefineStr OIDCRespType_      "^(?:(?:code|id_token|token) ?){1,3}$"

DefineStr OIDCUserNameSyntax "~{UserNameSyntax}"

<Macro OpenIDCBearer>
 Use OAuth2
 Use JWTCheck TX:bearer_token
</Macro>

<Macro OpenIDCJWT>
 Use SecAllowBase64
 # JWT
 Use ArgPostWhiteList acr          "~{AuthInternalRef_}"
 # amr is an array
 Use ArgPostWhiteListExt amr       "~{AuthInternalRef_}"    0 20
 Use ArgPostWhiteListExt aud       "~{AuthInternalRef_}"    1  1
 Use ArgPostWhiteList    auth_time "^~{syntax_epoch}$"
 Use ArgPostWhiteList    azp       "~{AuthInternalRef_}"
 Use ArgPostWhiteListExt exp       "^~{syntax_epoch}$"      1  1
 Use ArgPostWhiteListExt iat       "^~{syntax_epoch}$"      1  1
 Use ArgPostWhiteListExt iss       "^~{syntax_URL_https}$"  1  1
 Use ArgPostWhiteList    nonce     "~{AuthInternalRef_}"
 Use ArgPostWhiteListExt sub       "~{AuthInternalRef_}"    1  1
 Use TokenCheckNb ARGS:nonce 0 0
 
 Use CheckWhiteListArgs
</Macro>

<Macro OpenIDCAuthN>
 # Format: GET or POST
 Use SecAllowBase64
 
 # HTTP params
 Use ArgWhiteList acr_values     "~{AuthInternalRef_}(?: ~{AuthInternalRef_})*"
 Use ArgWhiteList claims         "~{AuthJSON_}"
 Use ArgWhiteList claims_locales "~{syntax_lang_rfc5646}"
 Use ArgWhiteList client_id      "~{AuthInternalRef_}"
 Use ArgWhiteList code_challenge "^([a-zA-Z0-9-._~]{43,128})$|(?:(?=^.{32,64}$)^~{syntax_base64}$)"
 Use ArgWhiteList code_challenge_method "^(?:plain|S256)$"
 Use ArgWhiteList display        "^[a-z]{2,20}$"
 Use ArgWhiteList id_token_hint  "~{AuthToken_}"
 Use ArgWhiteList login_hint     "^[~{CharUserid}]{0,80}$"
 Use ArgWhiteList max_age        "^[0-9]{1,5}$"
 Use ArgWhiteList nonce          "~{AuthInternalRef_}"
 Use ArgWhiteList prompt         "~{AuthList_}"
 Use ArgWhiteList redirect_uri   "^~{syntax_URL_https_Query}$"
 Use ArgWhiteList registration   "~{AuthJSON_}"
 Use ArgWhiteList request        "~{JWTToken_}"
 Use ArgWhiteList request_uri    "^~{syntax_URL_https}$"
 Use ArgWhiteList response_mode  "~{OIDCRespMode_}"
 Use ArgWhiteList response_type  "~{OIDCRespType_}"
 Use ArgWhiteList scope          "~{OIDCScope_}"
 Use ArgWhiteList state          "~{AuthInternalRef_}"
 Use ArgWhiteList ui_locales     "~{syntax_lang_rfc5646}"

 Use TokenCheckNb ARGS:nonce 0 0 
 Use TokenCheckNb ARGS:state 0 0 
 
 # PKCE: https://developer.okta.com/docs/reference/api/oidc/#authorize
 #code_challenge 
 #code_challenge_method
 
 Use CheckWhiteListArgs
</Macro>

<Macro WebFinger $user>
 Use PublicResource
 Use AllowAutomatedTools
 Use SecAllowDotInUrl
 # Allow /.
 Use SecRuleRemoveById 2000103
 Use ArgWhiteList rel         "^~{syntax_URL_https}$"
 Use ArgWhiteList resource    "^(?:~{syntax_URL_https}|/~{syntax_URL_path}|(?:acct|mailto):~{syntax_email})$"
 Use ArgWhiteList subject     "^(?:https?://~{syntax_URL_host}/$user|acct://$user@~{syntax_URL_host})$"
 Use CheckWhiteListArgs
</Macro>

# $url is usually /authorize
<Macro OpenIDCProvider $url>
 <LocationMatch "(?i)$url">
  Use OpenIDCBearer
 </LocationMatch>
 <LocationMatch "(?i)$url(?:/.+)?/[.]well-known/jwks.json">
  Use PublicStaticConfigWithDot
 </LocationMatch>
 <LocationMatch "(?i)$url(?:/.+)?/[.]well-known/webfinger">
  Use WebFinger "~{OIDCUserNameSyntax}"
 </LocationMatch>
</Macro>
# $auth is usually /authorize
<Macro OpenIDCProviderUrl $auth $token $userinfo>
 <LocationMatch (?i)$auth>
  Use OpenIDCAuthN
 </LocationMatch>
 <LocationMatch (?i)$token>
  Use OAuth2TokenExchange
 </LocationMatch>
 <LocationMatch (?i)$userinfo>
  Use CheckWhiteListArgs
  Use AllowAutomatedTools
 </LocationMatch>
</Macro>
<Macro OpenIDCProviderLogout $path>
 <LocationMatch (?i)$path>
  Use SecAllowBase64
  Use ArgWhiteList id_token_hint            "~{AuthToken_}"
  Use ArgWhiteList post_logout_redirect_uri "^~{syntax_URL_https_Query}$"
  Use ArgWhiteList state                    "~{AuthInternalRef_}"
  Use ArgWhiteList ui_locales               "~{syntax_lang_rfc5646}"
  Use CheckWhiteListArgs
 </LocationMatch>
</Macro>
<Macro OpenIDCProviderLogoutCallback $path>
 <LocationMatch (?i)$path>
  Use SecAllowBase64
  Use ArgWhiteList endSessionId "~{AuthInternalRef_}"
  Use CheckWhiteListArgs
 </LocationMatch>
</Macro>

<Macro OpenIDCRP>
 Use SecAllowBase64
 # Authorization Code Flow:
 Use ArgWhiteList code               "~{AuthToken_}"
 Use TokenCheckNb ARGS:code  1 1
 Use ArgWhiteList scope              "~{OIDCScope_}"
 Use ArgWhiteList session_state      "~{AuthInternalRef_}"
 Use ArgWhiteList state              "~{AuthInternalRef_}"
 Use TokenCheckNb ARGS:state 1 1
 # For SAML
 Use ArgWhiteList SAMLResponse       "^~{syntax_base64}$"
 Use ArgWhiteList Signature          "^~{syntax_base64}$"
 Use ArgWhiteList SigAlg             "^~{syntax_URL_Query}$"
 Use ArgWhiteList RelayState         "~{AuthToken_}"
 # Parameters sometimes sent by Microsoft ADFS
 Use ArgWhiteList client-request-id  "^~{syntax_GUID}$"
 Use ArgWhiteList id_token           "~{JWTToken_}"
 # Parameters sometimes sent by ForgeRock
 Use ArgWhiteList client_id          "~{AuthInternalRef_}"
 Use ArgWhiteList iss                "^~{syntax_URL_https}$"
 # In case of error
 Use ArgWhiteList error              "^[-a-zA-Z0-9 :._]{0,100}$"
 Use ArgWhiteList error_description  "^[~{CharFreeText}]{0,1000}$"
 Use ArgWhiteList error_uri          "^~{syntax_URL_https_Query}$"
 Use CheckWhiteListArgs
</Macro>

# Exceptions -------------------------------------------------------------------
<Macro OIDCTestHttpPartners>
 Use ArgWhiteList  redirect_uri  "^~{syntax_URL_Query}$"
 Use CheckWhiteListArgs
 Use CSPAllowMixedContent
</Macro>

