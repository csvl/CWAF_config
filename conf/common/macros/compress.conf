# :: Macros: Compression


# Disable compression (phase 3 because it's in custom config)
<Macro DoNotCompressPhase $phase @target @pattern>
 Use SecRule @target @pattern "phase:$phase,~{nosecaction},tag:compress,t:none,setenv:!force-gzip,setenv:no-gzip,setenv:be_shouldnt_compress"
</Macro>
<Macro DoNotCompress      @target @pattern>
 Use DoNotCompressPhase 4 @target @pattern
</Macro>
<Macro NoCompression>
 Use SecAction "phase:2,~{nosecaction},tag:compress,setenv:be_shouldnt_compress"
</Macro>

<Macro ForceCompression>
 Use SecAction "phase:4,~{nosecaction},tag:compress,setenv:force-gzip"
</Macro>

<Macro EnableCompressionHttps>
 Use SetEnvSec force-gzip-https 1
</Macro>

<Macro DisableCompressionProxy>
 Use SetEnvSec no-gzip-proxy 1
</Macro>

<Macro NoCompressionType @pattern>
 Use DoNotCompress RESPONSE_CONTENT_TYPE  @pattern
</Macro>

# Disable compression based on size:
#  100   ^lt: don't compress if length < 100
#  10000 ^gt: don't compress if length > 10000
<Macro NoCompressionSize_ $len $op>
 Use SecRuleRemoveByFullTag "NoComp$op"
 # Enable compression when size is unknown
 Use SecRule TX:resp_size "@eq 0"        "phase:4,tag:compress,tag:'NoComp$op',t:none,~{skipAfter}:AfterNoCompressionSize"
  Use SecRuleIntComp_ TX:resp_size $len ",phase:4,tag:compress,tag:'NoComp$op'" ",t:none"
  Use DoNotCompressPhase "4,tag:compress,tag:'NoComp$op'" &TX:intcmp "@eq 0"
  Use DoNotCompressPhase "4,tag:compress,tag:'NoComp$op'"  TX:intcmp ^$op
 Use SecMarker AfterNoCompressionSize,tag:compress,tag:'NoComp$op'
</Macro>
<Macro NoCompressionSizeMin @len>
 Use NoCompressionSize_     @len lt 
</Macro>
<Macro NoCompressionSizeMax @len>
 Use NoCompressionSize_     @len gt 
</Macro>

# Replace Content-Type "application/x-gzip" by right one
# Add a content-encoding header to tell the browser to decompress
<Macro FixCompressedRessource_ $url $ext @mime>
 <LocationMatch "^(?:$url|~{CompressedResourceDir})/.*[.]$ext[.]gz$">
  ForceType @mime
  Header set Content-Encoding gzip
  Use NoCompression
 </LocationMatch>
</Macro>

# $url without final /
<Macro CompressedResources $url>
 # Make sure the browser supports gzip encoding before we send it
 RewriteOptions InheritBefore
 RewriteCond %{REQUEST_URI} "^$url/(?:[^/]*/)?(.*[.](?:css|js|html?|xml))$"
  RewriteCond %{HTTP:Accept-Encoding} "(?i)\b(x-)?gzip\b"
   RewriteCond (%{LA-U:REQUEST_FILENAME}[.]gz) -s [OR]
   RewriteCond (~{CompressedResourceDir}/%1[.]gz) -s
    RewriteRule ^ %1.gz [DPI,L]

 Use FixCompressedRessource_ "$url" css    text/css
 Use FixCompressedRessource_ "$url" js     text/javascript
 Use FixCompressedRessource_ "$url" html?  text/html
 Use FixCompressedRessource_ "$url" xml    text/xml
</Macro>

<Macro AllowCompressedRequest>
 SetInputFilter BROTLI_COMPRESS 
 SetInputFilter DEFLATE
 SecRuleRemoveById 2002920,2002918
</Macro>

<Macro CompressDebug_ $phase>
 <IfDefine EXTENDEDSTATUS>
   Use SecAction "phase:$phase,~{nosecaction},setenv:'be_cannot_compress_debug=TX.noResponseBodyAccess=%{TX.noResponseBodyAccess},TX.resp_subst=%{TX.resp_subst},ENV.no-gzip=%{ENV.no-gzip},ENV.be_cannot_compress$phase=%{ENV.be_cannot_compress}'"
   Header set compress-phase$phase %{be_cannot_compress_debug2}e env=be_cannot_compress_debug$phase
 </IfDefine>
 <IfDefine !EXTENDEDSTATUS>
   Use UnusedParam $phase
 </IfDefine>
</Macro>

