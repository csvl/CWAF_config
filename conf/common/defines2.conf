### general purpose defines using values defined in params.conf

# Security actions -------------------------------------------------------------
DefineStr nolog         "nolog,noauditlog,severity:255,~{countersSetEnv}"
DefineStr noErrorHeader "setenv:noErrorHeader,setenv:!errorMsg,setenv:!errorPage"
#DefineStr nosecaction   "~{nolog},pass,msg:'',setenv:!errorMsg,setenv:!errorPage"
DefineStr nosecaction   "~{nolog},pass,msg:''"
DefineStr skip          "~{nosecaction},skip"
DefineStr skipAfter     "~{nosecaction},skipAfter"
DefineStr skipAll       "setvar:TX.skipAll,tag:security,~{skipAfter}:VeryLastRule"
DefineStr allow         "~{nosecaction},tag:security,allow"
DefineStr logalso       "auditlog,~{AdditionalLogActions},severity:INFO,capture"
DefineStr log           "~{nosecaction},~{logalso}"
DefineStr logOnly       "~{log},severity:255"
DefineStr debug         "~{log},severity:DEBUG"
DefineStr warnalso      "~{logalso},severity:WARNING,tag:security,~{denySetEnv}"
DefineStr warn_         "~{log},severity:WARNING,tag:security"
DefineStr warn          "~{warn_},~{denySetEnv}"
DefineStr requestWarn   "~{warn}"
DefineStr responseWarn  "~{warn}"
# _ variables used on 1st line of chaines rules => no setenv
DefineStr deny_         "~{warn_},severity:ERROR,deny,status:506,msg:'Invalid request'"
DefineStr deny          "~{deny_},setenv:denied,setenv:'errorMsg=Invalid request',setenv:!no-log,setvar:'TX.invalidTarget=%{MATCHED_VAR_NAME}=%{MATCHED_VAR} (%{TX.0})'"
DefineStr proxy_        "~{deny_},proxy"
DefineStr proxy          "~{deny},proxy"
DefineStr errorPage_    "~{proxy_}:http://127.0.0.1/SecError/errorPage/%{env.errorPage}"
DefineStr errorPage      "~{proxy}:http://127.0.0.1/SecError/errorPage/%{env.errorPage},setenv:errorPage="
DefineStr denyBlocked   "~{errorPage}blocked,severity:ERROR"
DefineStr localFile     "~{stopSecurity},~{log},setenv:locationOK,setenv:EnforceLocalURL"
DefineStr status        "~{deny},status"
DefineStr status404     "~{status}:404,~{noErrorHeader}"
DefineStr statusResp    "~{deny},~{noErrorHeader},status"
DefineStr AnonymProxyAction  "~{warn}"
DefineStr testRule      "pass,auditlog,~{AdditionalLogActions},severity:WARNING,setenv:!denied,~{decreaseBlockCounter},tag:TestRule"
<IfDefine EXTENDEDSTATUS>
 DefineStr testRule     "tag:TestRule"
</IfDefine>

# skipAll when in detection mode
DefineStr stopSecurity "~{allow},ctl:ruleEngine=Off,setvar:TX.StopSecurity,tag:Ignore,setvar:TX.allowed1,setvar:TX.allowed2,setvar:TX.allowed3,setvar:TX.allowed4"
### ctl:ruleEngine=Off: only effective in next phase (but not in phase 5)
###                     redundant with "allow" (in each phase)
###                     leads to problems when followed by "proxy"

DefineStr stop404 "~{stopSecurity},~{status404},~{nolog}"
# Legacy
DefineStr ignoreAnd404 "~{stop404}"

DefineStr stopDeny      "~{stopSecurity},~{deny},~{nolog},~{noErrorHeader}"
DefineStr stopStatus    "~{stopDeny},status"
DefineStr stop200       "~{stopStatus}:200"
DefineStr stopProxy     "~{stopDeny},proxy"
DefineStr stopUnavail   "~{localFile}=/SecError/unavailable.html,~{nolog},~{noErrorHeader}"

# Drop connection => never (only when no reverse proxy is used)
#  - only under Unix
#  - not when using EXTENDEDSTATUS (regression testing)
DefineStr drop          "~{status}:400,severity:ALERT"
DefineStr drop404       "~{status404},severity:ALERT"
DefineStr ignoreAndDrop "~{nolog},deny,status:400,tag:security"
<IfDefine !EXTENDEDSTATUS>
 <IfModule !mpm_winnt_module>
  <IfDefine DoSProtection>
     DefineStr drop          "~{status}:400,drop,severity:ALERT"
     DefineStr drop404       "~{status404},drop,severity:ALERT"
     DefineStr ignoreAndDrop "~{nolog},drop,tag:security"
  </IfDefine>
 </IfModule>
</IfDefine>

DefineStr badUseridMsg  "~{status}:401,~{errorPage}userid,setenv:'errorMsg=Invalid userid syntax',msg:'Invalid userid syntax'"
DefineStr badUploadMsg  "~{errorPage}upload_syntax,setenv:'errorMsg=Invalid upload filename',logdata:'Invalid upload filename <%{ENV.upfn}> (Use SecAllowUpChars/SecAllowCharsInUpDownDocs/SecAllowUpFileNameLength/...)',tag:UpFileName,tag:Upload,ctl:auditLogParts=-CEG,ctl:auditLogParts=+IJ"
DefineStr badCharMsg    "~{errorPage}invalidchar,setenv:'errorMsg=Invalid character',msg:'Invalid character'"
DefineStr htmlMsg       "~{errorPage}html,setenv:'errorMsg=HTML code',msg:'HTML code'"

# Whitelisted IP & paths -------------------------------------------------------
DefineStr IpAdmin      "@ipMatch ~{WAF_admin_ip},~{EmergencyWafAdminIp},~{IpLocalhost}"
DefineStr IpToNotBlock "~{IpAdmin},~{IpInternal_},~{IpToIgnore},~{EmergencyIpToNotBlock},~{ReverseProxy_IP},~{App_WAF_Front_IP},~{Ip_Approach}"
DefineStr IpPublish_   "~{IpAdmin},~{IpPublish}"
<IfDefine !IpMatch>
 DefineStr IpAdmin      "^(?:~{WAF_admin_ip}|~{EmergencyWafAdminIp}|~{IpLocalHostRegex})$"
 DefineStr IpToNotBlock "^(?:~{IpAdmin}|~{IpInternalRegex}|~{IpToIgnore}|~{EmergencyIpToNotBlock}|~{ReverseProxy_IP}|~{App_WAF_Front_IP}|~{Ip_ApproachRegex})$"
 DefineStr IpPublish_   "~{IpAdmin}|~{IpPublish}"
</IfDefine>
DefineStr PathToIgnoreIntern "(?:^/(?:SecError(?:Res)?|[$!]internal|_restricted)/|(?i:(?:un)?block|query)(?i:IP|Res)=|~{ProbeURL_}|^/[.]well-known/acme-challenge/)"
#|/oidc_(?:mobile_[a-z]+|redirect_uri)$

# In detection mode, to only log first event
<IfDefine OnlyFirstRule>
 DefineStr deny          "~{warn},skipAfter:VeryLastRule,severity:ERROR,tag:security"
 DefineStr proxy         "~{deny},setvar:tx.unused="
 DefineStr errorPage     "~{deny},setvar:tx.unused="
 DefineStr denyBlocked   "~{deny}"
</IfDefine>

DefineStr defaultDenyAction "phase:2,~{increaseBlockCounter},~{deny}"
DefineStr DisableAllRequestsStatus  "~{increaseBlockCounter},~{status404},tag:AccessControl"

